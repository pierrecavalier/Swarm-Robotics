
build/ohc.elf:     file format elf32-avr


Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7008:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    700c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7010:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7014:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7018:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    701c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7020:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7024:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7028:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    702c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7030:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7034:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7038:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    703c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7040:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7044:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7048:	0c 94 48 38 	jmp	0x7090	; 0x7090 <__vector_18>
    704c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7050:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7054:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7058:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    705c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7060:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7064:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_clear_bss>:
    7074:	12 e0       	ldi	r17, 0x02	; 2
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	01 c0       	rjmp	.+2      	; 0x707e <.do_clear_bss_start>

0000707c <.do_clear_bss_loop>:
    707c:	1d 92       	st	X+, r1

0000707e <.do_clear_bss_start>:
    707e:	a0 32       	cpi	r26, 0x20	; 32
    7080:	b1 07       	cpc	r27, r17
    7082:	e1 f7       	brne	.-8      	; 0x707c <.do_clear_bss_loop>
    7084:	0e 94 b0 38 	call	0x7160	; 0x7160 <main>
    7088:	0c 94 3f 3f 	jmp	0x7e7e	; 0x7e7e <_exit>

0000708c <__bad_interrupt>:
    708c:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
    7090:	1f 92       	push	r1
    7092:	0f 92       	push	r0
    7094:	0f b6       	in	r0, 0x3f	; 63
    7096:	0f 92       	push	r0
    7098:	11 24       	eor	r1, r1
    709a:	2f 93       	push	r18
    709c:	3f 93       	push	r19
    709e:	4f 93       	push	r20
    70a0:	5f 93       	push	r21
    70a2:	8f 93       	push	r24
    70a4:	9f 93       	push	r25
    70a6:	af 93       	push	r26
    70a8:	bf 93       	push	r27
    70aa:	ef 93       	push	r30
    70ac:	ff 93       	push	r31
    uint8_t rx = UDR0;
    70ae:	80 91 c6 00 	lds	r24, 0x00C6

    packet_checksum ^= packet_buffer[packet_head];
    70b2:	20 91 00 01 	lds	r18, 0x0100
    70b6:	e2 2f       	mov	r30, r18
    70b8:	f0 e0       	ldi	r31, 0x00	; 0
    70ba:	eb 5f       	subi	r30, 0xFB	; 251
    70bc:	fe 4f       	sbci	r31, 0xFE	; 254
    70be:	90 81       	ld	r25, Z
    70c0:	30 91 01 01 	lds	r19, 0x0101
    packet_buffer[packet_head] = rx;
    70c4:	80 83       	st	Z, r24
    packet_checksum ^= rx;
    70c6:	38 27       	eor	r19, r24
    70c8:	39 27       	eor	r19, r25
    70ca:	30 93 01 01 	sts	0x0101, r19
    packet_head++;
    70ce:	2f 5f       	subi	r18, 0xFF	; 255
    70d0:	20 93 00 01 	sts	0x0100, r18
    if (packet_head >= PACKET_SIZE)
    70d4:	24 38       	cpi	r18, 0x84	; 132
    70d6:	18 f0       	brcs	.+6      	; 0x70de <__vector_18+0x4e>
        packet_head = 0;
    70d8:	10 92 00 01 	sts	0x0100, r1
    70dc:	20 e0       	ldi	r18, 0x00	; 0

    if (packet_buffer[packet_head] == PACKET_HEADER) {
    70de:	e2 2f       	mov	r30, r18
    70e0:	f0 e0       	ldi	r31, 0x00	; 0
    70e2:	df 01       	movw	r26, r30
    70e4:	ab 5f       	subi	r26, 0xFB	; 251
    70e6:	be 4f       	sbci	r27, 0xFE	; 254
    70e8:	8c 91       	ld	r24, X
    70ea:	85 35       	cpi	r24, 0x55	; 85
    70ec:	79 f0       	breq	.+30     	; 0x710c <__vector_18+0x7c>
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
            packet_type = new_packet[1];
        }
    }
}
    70ee:	ff 91       	pop	r31
    70f0:	ef 91       	pop	r30
    70f2:	bf 91       	pop	r27
    70f4:	af 91       	pop	r26
    70f6:	9f 91       	pop	r25
    70f8:	8f 91       	pop	r24
    70fa:	5f 91       	pop	r21
    70fc:	4f 91       	pop	r20
    70fe:	3f 91       	pop	r19
    7100:	2f 91       	pop	r18
    7102:	0f 90       	pop	r0
    7104:	0f be       	out	0x3f, r0	; 63
    7106:	0f 90       	pop	r0
    7108:	1f 90       	pop	r1
    710a:	18 95       	reti
    packet_head++;
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
    710c:	33 23       	and	r19, r19
    710e:	79 f7       	brne	.-34     	; 0x70ee <__vector_18+0x5e>
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
    7110:	44 e8       	ldi	r20, 0x84	; 132
    7112:	50 e0       	ldi	r21, 0x00	; 0
    7114:	4e 1b       	sub	r20, r30
    7116:	5f 0b       	sbc	r21, r31
            for (i = 0; i < num; i++)
    7118:	01 f1       	breq	.+64     	; 0x715a <__vector_18+0xca>
    711a:	e8 e9       	ldi	r30, 0x98	; 152
    711c:	f1 e0       	ldi	r31, 0x01	; 1
    711e:	9a 01       	movw	r18, r20
    7120:	2e 0f       	add	r18, r30
    7122:	3f 1f       	adc	r19, r31
                new_packet[i] = packet_buffer[i+packet_head];
    7124:	8d 91       	ld	r24, X+
    7126:	81 93       	st	Z+, r24

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
    7128:	e2 17       	cp	r30, r18
    712a:	f3 07       	cpc	r31, r19
    712c:	d9 f7       	brne	.-10     	; 0x7124 <__vector_18+0x94>
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
    712e:	44 38       	cpi	r20, 0x84	; 132
    7130:	51 05       	cpc	r21, r1
    7132:	58 f4       	brcc	.+22     	; 0x714a <__vector_18+0xba>

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
    7134:	a5 e0       	ldi	r26, 0x05	; 5
    7136:	b1 e0       	ldi	r27, 0x01	; 1
    7138:	f9 01       	movw	r30, r18
    713a:	9a 01       	movw	r18, r20
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
                new_packet[i] = packet_buffer[i-num];
    713c:	8d 91       	ld	r24, X+
    713e:	81 93       	st	Z+, r24
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
    7140:	2f 5f       	subi	r18, 0xFF	; 255
    7142:	3f 4f       	sbci	r19, 0xFF	; 255
    7144:	24 38       	cpi	r18, 0x84	; 132
    7146:	31 05       	cpc	r19, r1
    7148:	c8 f3       	brcs	.-14     	; 0x713c <__vector_18+0xac>
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
    714a:	81 e0       	ldi	r24, 0x01	; 1
    714c:	80 93 02 01 	sts	0x0102, r24
            packet_type = new_packet[1];
    7150:	80 91 99 01 	lds	r24, 0x0199
    7154:	80 93 97 01 	sts	0x0197, r24
    7158:	ca cf       	rjmp	.-108    	; 0x70ee <__vector_18+0x5e>
    715a:	28 e9       	ldi	r18, 0x98	; 152
    715c:	31 e0       	ldi	r19, 0x01	; 1
    715e:	ea cf       	rjmp	.-44     	; 0x7134 <__vector_18+0xa4>

00007160 <main>:
#define led_port PORTB
#define led_ddr DDRB
#define led_mask (1<<1)
#endif

int main() {
    7160:	ef 92       	push	r14
    7162:	ff 92       	push	r15
    7164:	1f 93       	push	r17
    7166:	cf 93       	push	r28
    7168:	df 93       	push	r29
    cli();
    716a:	f8 94       	cli
    // Set port outputs
    ir_ddr |= ir_mask;
    716c:	53 9a       	sbi	0x0a, 3	; 10
    led_ddr |= led_mask;
    716e:	21 9a       	sbi	0x04, 1	; 4
    // Turn off all leds
    led_port &= ~led_mask;
    7170:	29 98       	cbi	0x05, 1	; 5
    ir_port &= ~ir_mask;
    7172:	5b 98       	cbi	0x0b, 3	; 11
    // turn off analog comparator (to avoid detecting collisions)
    ACSR |= (1<<ACD);
    7174:	80 b7       	in	r24, 0x30	; 48
    7176:	80 68       	ori	r24, 0x80	; 128
    7178:	80 bf       	out	0x30, r24	; 48

#ifndef ARDUINO
    //move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    717a:	81 e0       	ldi	r24, 0x01	; 1
    717c:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    717e:	82 e0       	ldi	r24, 0x02	; 2
    7180:	85 bf       	out	0x35, r24	; 53
    CLKPR = 1;
#endif

#define BAUD 38400
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
    7182:	8c e0       	ldi	r24, 0x0C	; 12
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	90 93 c5 00 	sts	0x00C5, r25
    718a:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
    718e:	80 91 c0 00 	lds	r24, 0x00C0
    7192:	8d 7f       	andi	r24, 0xFD	; 253
    7194:	80 93 c0 00 	sts	0x00C0, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
    7198:	80 91 c2 00 	lds	r24, 0x00C2
    719c:	86 60       	ori	r24, 0x06	; 6
    719e:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
    71a2:	80 91 c1 00 	lds	r24, 0x00C1
    71a6:	88 69       	ori	r24, 0x98	; 152
    71a8:	80 93 c1 00 	sts	0x00C1, r24
    sei();
    71ac:	78 94       	sei

    tx_mask = ir_mask;
    71ae:	88 e0       	ldi	r24, 0x08	; 8
    71b0:	80 93 03 01 	sts	0x0103, r24
    bootmsg = (bootmsg_t*)msg.data;
    71b4:	8b e8       	ldi	r24, 0x8B	; 139
    71b6:	e8 2e       	mov	r14, r24
    71b8:	81 e0       	ldi	r24, 0x01	; 1
    71ba:	f8 2e       	mov	r15, r24
    71bc:	f0 92 8a 01 	sts	0x018A, r15
    71c0:	e0 92 89 01 	sts	0x0189, r14
    gpsmsg = (gpsmsg_t*)msg.data;
    71c4:	f0 92 1f 02 	sts	0x021F, r15
    71c8:	e0 92 1e 02 	sts	0x021E, r14
    rawmsg = (uint8_t*)&msg;
    71cc:	f0 92 1d 02 	sts	0x021D, r15
    71d0:	e0 92 1c 02 	sts	0x021C, r14
    71d4:	64 e0       	ldi	r22, 0x04	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    71d6:	48 ec       	ldi	r20, 0xC8	; 200
    71d8:	50 e0       	ldi	r21, 0x00	; 0

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
        led_port |= led_mask;
    71da:	29 9a       	sbi	0x05, 1	; 5
    71dc:	20 e0       	ldi	r18, 0x00	; 0
    71de:	30 e0       	ldi	r19, 0x00	; 0
    71e0:	ca 01       	movw	r24, r20
    71e2:	01 97       	sbiw	r24, 0x01	; 1
    71e4:	f1 f7       	brne	.-4      	; 0x71e2 <main+0x82>
    71e6:	2f 5f       	subi	r18, 0xFF	; 255
    71e8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71ea:	87 e0       	ldi	r24, 0x07	; 7
    71ec:	20 3d       	cpi	r18, 0xD0	; 208
    71ee:	38 07       	cpc	r19, r24
    71f0:	b9 f7       	brne	.-18     	; 0x71e0 <main+0x80>
        _delay_ms(200);
        led_port &= ~led_mask;
    71f2:	29 98       	cbi	0x05, 1	; 5
    71f4:	20 e0       	ldi	r18, 0x00	; 0
    71f6:	30 e0       	ldi	r19, 0x00	; 0
    71f8:	ca 01       	movw	r24, r20
    71fa:	01 97       	sbiw	r24, 0x01	; 1
    71fc:	f1 f7       	brne	.-4      	; 0x71fa <main+0x9a>
    71fe:	2f 5f       	subi	r18, 0xFF	; 255
    7200:	3f 4f       	sbci	r19, 0xFF	; 255
    7202:	e7 e0       	ldi	r30, 0x07	; 7
    7204:	20 3d       	cpi	r18, 0xD0	; 208
    7206:	3e 07       	cpc	r19, r30
    7208:	b9 f7       	brne	.-18     	; 0x71f8 <main+0x98>
    720a:	61 50       	subi	r22, 0x01	; 1
    720c:	30 f7       	brcc	.-52     	; 0x71da <main+0x7a>
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    720e:	80 91 02 01 	lds	r24, 0x0102
    7212:	88 23       	and	r24, r24
    7214:	e1 f3       	breq	.-8      	; 0x720e <main+0xae>
            has_new_packet = 0;
    7216:	10 92 02 01 	sts	0x0102, r1
            switch(packet_type) {
    721a:	80 91 97 01 	lds	r24, 0x0197
    721e:	83 30       	cpi	r24, 0x03	; 3
    7220:	09 f4       	brne	.+2      	; 0x7224 <main+0xc4>
    7222:	7a c4       	rjmp	.+2292   	; 0x7b18 <main+0x9b8>
    7224:	84 30       	cpi	r24, 0x04	; 4
    7226:	08 f0       	brcs	.+2      	; 0x722a <main+0xca>
    7228:	70 c0       	rjmp	.+224    	; 0x730a <main+0x1aa>
    722a:	81 30       	cpi	r24, 0x01	; 1
    722c:	09 f4       	brne	.+2      	; 0x7230 <main+0xd0>
    722e:	62 c4       	rjmp	.+2244   	; 0x7af4 <main+0x994>
    7230:	82 30       	cpi	r24, 0x02	; 2
    7232:	69 f7       	brne	.-38     	; 0x720e <main+0xae>
                    led_port &= ~led_mask;
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
    7234:	e0 91 1c 02 	lds	r30, 0x021C
    7238:	f0 91 1d 02 	lds	r31, 0x021D
    723c:	80 91 9a 01 	lds	r24, 0x019A
    7240:	80 83       	st	Z, r24
    7242:	e0 91 1c 02 	lds	r30, 0x021C
    7246:	f0 91 1d 02 	lds	r31, 0x021D
    724a:	80 91 9b 01 	lds	r24, 0x019B
    724e:	81 83       	std	Z+1, r24	; 0x01
    7250:	e0 91 1c 02 	lds	r30, 0x021C
    7254:	f0 91 1d 02 	lds	r31, 0x021D
    7258:	80 91 9c 01 	lds	r24, 0x019C
    725c:	82 83       	std	Z+2, r24	; 0x02
    725e:	e0 91 1c 02 	lds	r30, 0x021C
    7262:	f0 91 1d 02 	lds	r31, 0x021D
    7266:	80 91 9d 01 	lds	r24, 0x019D
    726a:	83 83       	std	Z+3, r24	; 0x03
    726c:	e0 91 1c 02 	lds	r30, 0x021C
    7270:	f0 91 1d 02 	lds	r31, 0x021D
    7274:	80 91 9e 01 	lds	r24, 0x019E
    7278:	84 83       	std	Z+4, r24	; 0x04
    727a:	e0 91 1c 02 	lds	r30, 0x021C
    727e:	f0 91 1d 02 	lds	r31, 0x021D
    7282:	80 91 9f 01 	lds	r24, 0x019F
    7286:	85 83       	std	Z+5, r24	; 0x05
    7288:	e0 91 1c 02 	lds	r30, 0x021C
    728c:	f0 91 1d 02 	lds	r31, 0x021D
    7290:	80 91 a0 01 	lds	r24, 0x01A0
    7294:	86 83       	std	Z+6, r24	; 0x06
    7296:	e0 91 1c 02 	lds	r30, 0x021C
    729a:	f0 91 1d 02 	lds	r31, 0x021D
    729e:	80 91 a1 01 	lds	r24, 0x01A1
    72a2:	87 83       	std	Z+7, r24	; 0x07
    72a4:	e0 91 1c 02 	lds	r30, 0x021C
    72a8:	f0 91 1d 02 	lds	r31, 0x021D
    72ac:	80 91 a2 01 	lds	r24, 0x01A2
    72b0:	80 87       	std	Z+8, r24	; 0x08
    72b2:	e0 91 1c 02 	lds	r30, 0x021C
    72b6:	f0 91 1d 02 	lds	r31, 0x021D
    72ba:	80 91 a3 01 	lds	r24, 0x01A3
    72be:	81 87       	std	Z+9, r24	; 0x09
                msg.crc = message_crc(&msg);
    72c0:	8b e8       	ldi	r24, 0x8B	; 139
    72c2:	91 e0       	ldi	r25, 0x01	; 1
    72c4:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    72c8:	90 93 96 01 	sts	0x0196, r25
    72cc:	80 93 95 01 	sts	0x0195, r24
                while(!has_new_packet) {
    72d0:	80 91 02 01 	lds	r24, 0x0102
    72d4:	88 23       	and	r24, r24
    72d6:	09 f0       	breq	.+2      	; 0x72da <main+0x17a>
    72d8:	9a cf       	rjmp	.-204    	; 0x720e <main+0xae>
    72da:	c0 e7       	ldi	r28, 0x70	; 112
    72dc:	d7 e1       	ldi	r29, 0x17	; 23
                    message_send(&msg);
    72de:	8b e8       	ldi	r24, 0x8B	; 139
    72e0:	91 e0       	ldi	r25, 0x01	; 1
    72e2:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
                    led_port |= led_mask;
    72e6:	29 9a       	sbi	0x05, 1	; 5
    72e8:	ce 01       	movw	r24, r28
    72ea:	01 97       	sbiw	r24, 0x01	; 1
    72ec:	f1 f7       	brne	.-4      	; 0x72ea <main+0x18a>
                    _delay_ms(3);
                    led_port &= ~led_mask;
    72ee:	29 98       	cbi	0x05, 1	; 5
    72f0:	ce 01       	movw	r24, r28
    72f2:	01 97       	sbiw	r24, 0x01	; 1
    72f4:	f1 f7       	brne	.-4      	; 0x72f2 <main+0x192>
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
                while(!has_new_packet) {
    72f6:	80 91 02 01 	lds	r24, 0x0102
    72fa:	88 23       	and	r24, r24
    72fc:	81 f3       	breq	.-32     	; 0x72de <main+0x17e>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    72fe:	80 91 02 01 	lds	r24, 0x0102
    7302:	88 23       	and	r24, r24
    7304:	09 f4       	brne	.+2      	; 0x7308 <main+0x1a8>
    7306:	83 cf       	rjmp	.-250    	; 0x720e <main+0xae>
    7308:	86 cf       	rjmp	.-244    	; 0x7216 <main+0xb6>
            has_new_packet = 0;
            switch(packet_type) {
    730a:	85 30       	cpi	r24, 0x05	; 5
    730c:	09 f4       	brne	.+2      	; 0x7310 <main+0x1b0>
    730e:	a8 c0       	rjmp	.+336    	; 0x7460 <main+0x300>
    7310:	85 30       	cpi	r24, 0x05	; 5
    7312:	08 f4       	brcc	.+2      	; 0x7316 <main+0x1b6>
    7314:	64 c0       	rjmp	.+200    	; 0x73de <main+0x27e>
    7316:	86 30       	cpi	r24, 0x06	; 6
    7318:	09 f0       	breq	.+2      	; 0x731c <main+0x1bc>
    731a:	79 cf       	rjmp	.-270    	; 0x720e <main+0xae>
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
    731c:	e0 91 1c 02 	lds	r30, 0x021C
    7320:	f0 91 1d 02 	lds	r31, 0x021D
    7324:	80 91 9a 01 	lds	r24, 0x019A
    7328:	80 83       	st	Z, r24
    732a:	e0 91 1c 02 	lds	r30, 0x021C
    732e:	f0 91 1d 02 	lds	r31, 0x021D
    7332:	80 91 9b 01 	lds	r24, 0x019B
    7336:	81 83       	std	Z+1, r24	; 0x01
    7338:	e0 91 1c 02 	lds	r30, 0x021C
    733c:	f0 91 1d 02 	lds	r31, 0x021D
    7340:	80 91 9c 01 	lds	r24, 0x019C
    7344:	82 83       	std	Z+2, r24	; 0x02
    7346:	e0 91 1c 02 	lds	r30, 0x021C
    734a:	f0 91 1d 02 	lds	r31, 0x021D
    734e:	80 91 9d 01 	lds	r24, 0x019D
    7352:	83 83       	std	Z+3, r24	; 0x03
    7354:	e0 91 1c 02 	lds	r30, 0x021C
    7358:	f0 91 1d 02 	lds	r31, 0x021D
    735c:	80 91 9e 01 	lds	r24, 0x019E
    7360:	84 83       	std	Z+4, r24	; 0x04
    7362:	e0 91 1c 02 	lds	r30, 0x021C
    7366:	f0 91 1d 02 	lds	r31, 0x021D
    736a:	80 91 9f 01 	lds	r24, 0x019F
    736e:	85 83       	std	Z+5, r24	; 0x05
    7370:	e0 91 1c 02 	lds	r30, 0x021C
    7374:	f0 91 1d 02 	lds	r31, 0x021D
    7378:	80 91 a0 01 	lds	r24, 0x01A0
    737c:	86 83       	std	Z+6, r24	; 0x06
    737e:	e0 91 1c 02 	lds	r30, 0x021C
    7382:	f0 91 1d 02 	lds	r31, 0x021D
    7386:	80 91 a1 01 	lds	r24, 0x01A1
    738a:	87 83       	std	Z+7, r24	; 0x07
    738c:	e0 91 1c 02 	lds	r30, 0x021C
    7390:	f0 91 1d 02 	lds	r31, 0x021D
    7394:	80 91 a2 01 	lds	r24, 0x01A2
    7398:	80 87       	std	Z+8, r24	; 0x08
    739a:	e0 91 1c 02 	lds	r30, 0x021C
    739e:	f0 91 1d 02 	lds	r31, 0x021D
    73a2:	80 91 a3 01 	lds	r24, 0x01A3
    73a6:	81 87       	std	Z+9, r24	; 0x09
                msg.crc = message_crc(&msg);
    73a8:	8b e8       	ldi	r24, 0x8B	; 139
    73aa:	91 e0       	ldi	r25, 0x01	; 1
    73ac:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    73b0:	90 93 96 01 	sts	0x0196, r25
    73b4:	80 93 95 01 	sts	0x0195, r24
                message_send(&msg);
    73b8:	8b e8       	ldi	r24, 0x8B	; 139
    73ba:	91 e0       	ldi	r25, 0x01	; 1
    73bc:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
                led_port |= led_mask;
    73c0:	29 9a       	sbi	0x05, 1	; 5
    73c2:	80 e7       	ldi	r24, 0x70	; 112
    73c4:	97 e1       	ldi	r25, 0x17	; 23
    73c6:	fc 01       	movw	r30, r24
    73c8:	31 97       	sbiw	r30, 0x01	; 1
    73ca:	f1 f7       	brne	.-4      	; 0x73c8 <main+0x268>
                _delay_ms(3);
                led_port &= ~led_mask;
    73cc:	29 98       	cbi	0x05, 1	; 5
    73ce:	01 97       	sbiw	r24, 0x01	; 1
    73d0:	f1 f7       	brne	.-4      	; 0x73ce <main+0x26e>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    73d2:	80 91 02 01 	lds	r24, 0x0102
    73d6:	88 23       	and	r24, r24
    73d8:	09 f4       	brne	.+2      	; 0x73dc <main+0x27c>
    73da:	19 cf       	rjmp	.-462    	; 0x720e <main+0xae>
    73dc:	1c cf       	rjmp	.-456    	; 0x7216 <main+0xb6>
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
    73de:	81 e8       	ldi	r24, 0x81	; 129
    73e0:	80 93 94 01 	sts	0x0194, r24
                bootmsg->page_address = new_packet[2];
    73e4:	e0 91 89 01 	lds	r30, 0x0189
    73e8:	f0 91 8a 01 	lds	r31, 0x018A
    73ec:	80 91 9a 01 	lds	r24, 0x019A
    73f0:	80 83       	st	Z, r24
                bootmsg->unused = 0;
    73f2:	10 86       	std	Z+8, r1	; 0x08
                cli();
    73f4:	f8 94       	cli
    73f6:	cb e9       	ldi	r28, 0x9B	; 155
    73f8:	d1 e0       	ldi	r29, 0x01	; 1
    73fa:	10 e0       	ldi	r17, 0x00	; 0
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    73fc:	80 91 02 01 	lds	r24, 0x0102
    7400:	88 23       	and	r24, r24
    7402:	f1 f4       	brne	.+60     	; 0x7440 <main+0x2e0>
                    bootmsg->page_offset = i/2;
    7404:	e0 91 89 01 	lds	r30, 0x0189
    7408:	f0 91 8a 01 	lds	r31, 0x018A
    740c:	81 2f       	mov	r24, r17
    740e:	86 95       	lsr	r24
    7410:	81 83       	std	Z+1, r24	; 0x01
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
    7412:	32 96       	adiw	r30, 0x02	; 2
    7414:	de 01       	movw	r26, r28
    7416:	86 e0       	ldi	r24, 0x06	; 6
    7418:	0d 90       	ld	r0, X+
    741a:	01 92       	st	Z+, r0
    741c:	81 50       	subi	r24, 0x01	; 1
    741e:	e1 f7       	brne	.-8      	; 0x7418 <main+0x2b8>
                    msg.crc = message_crc(&msg);
    7420:	8b e8       	ldi	r24, 0x8B	; 139
    7422:	91 e0       	ldi	r25, 0x01	; 1
    7424:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7428:	90 93 96 01 	sts	0x0196, r25
    742c:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7430:	8b e8       	ldi	r24, 0x8B	; 139
    7432:	91 e0       	ldi	r25, 0x01	; 1
    7434:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
                bootmsg->page_address = new_packet[2];
                bootmsg->unused = 0;
                cli();
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    7438:	1a 5f       	subi	r17, 0xFA	; 250
    743a:	26 96       	adiw	r28, 0x06	; 6
    743c:	14 38       	cpi	r17, 0x84	; 132
    743e:	f1 f6       	brne	.-68     	; 0x73fc <main+0x29c>
                    bootmsg->page_offset = i/2;
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                }
                sei();
    7440:	78 94       	sei
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                    _delay_us(50);
                }
                sei();
                led_port |= led_mask;
    7442:	29 9a       	sbi	0x05, 1	; 5
    7444:	80 e2       	ldi	r24, 0x20	; 32
    7446:	9e e4       	ldi	r25, 0x4E	; 78
    7448:	fc 01       	movw	r30, r24
    744a:	31 97       	sbiw	r30, 0x01	; 1
    744c:	f1 f7       	brne	.-4      	; 0x744a <main+0x2ea>
                _delay_ms(10);
                led_port &= ~led_mask;
    744e:	29 98       	cbi	0x05, 1	; 5
    7450:	01 97       	sbiw	r24, 0x01	; 1
    7452:	f1 f7       	brne	.-4      	; 0x7450 <main+0x2f0>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    7454:	80 91 02 01 	lds	r24, 0x0102
    7458:	88 23       	and	r24, r24
    745a:	09 f4       	brne	.+2      	; 0x745e <main+0x2fe>
    745c:	d8 ce       	rjmp	.-592    	; 0x720e <main+0xae>
    745e:	db ce       	rjmp	.-586    	; 0x7216 <main+0xb6>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    7460:	8a e0       	ldi	r24, 0x0A	; 10
    7462:	f7 01       	movw	r30, r14
    7464:	11 92       	st	Z+, r1
    7466:	8a 95       	dec	r24
    7468:	e9 f7       	brne	.-6      	; 0x7464 <main+0x304>
                msg.type = GPS;
    746a:	81 e0       	ldi	r24, 0x01	; 1
    746c:	80 93 94 01 	sts	0x0194, r24
                cli();
    7470:	f8 94       	cli
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7472:	20 91 1e 02 	lds	r18, 0x021E
    7476:	30 91 1f 02 	lds	r19, 0x021F
    747a:	c9 01       	movw	r24, r18
    747c:	dc 01       	movw	r26, r24
    747e:	ea e9       	ldi	r30, 0x9A	; 154
    7480:	f1 e0       	ldi	r31, 0x01	; 1
    7482:	88 e0       	ldi	r24, 0x08	; 8
    7484:	01 90       	ld	r0, Z+
    7486:	0d 92       	st	X+, r0
    7488:	81 50       	subi	r24, 0x01	; 1
    748a:	e1 f7       	brne	.-8      	; 0x7484 <main+0x324>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    748c:	e0 91 1e 02 	lds	r30, 0x021E
    7490:	f0 91 1f 02 	lds	r31, 0x021F
    7494:	80 81       	ld	r24, Z
    7496:	91 81       	ldd	r25, Z+1	; 0x01
    7498:	89 2b       	or	r24, r25
    749a:	81 f4       	brne	.+32     	; 0x74bc <main+0x35c>
    749c:	82 81       	ldd	r24, Z+2	; 0x02
    749e:	93 81       	ldd	r25, Z+3	; 0x03
    74a0:	89 2b       	or	r24, r25
    74a2:	61 f4       	brne	.+24     	; 0x74bc <main+0x35c>
    74a4:	84 81       	ldd	r24, Z+4	; 0x04
    74a6:	95 81       	ldd	r25, Z+5	; 0x05
    74a8:	89 2b       	or	r24, r25
    74aa:	41 f4       	brne	.+16     	; 0x74bc <main+0x35c>
    74ac:	86 81       	ldd	r24, Z+6	; 0x06
    74ae:	88 23       	and	r24, r24
    74b0:	29 f4       	brne	.+10     	; 0x74bc <main+0x35c>
    74b2:	87 81       	ldd	r24, Z+7	; 0x07
    74b4:	90 85       	ldd	r25, Z+8	; 0x08
    74b6:	89 2b       	or	r24, r25
    74b8:	09 f4       	brne	.+2      	; 0x74bc <main+0x35c>
    74ba:	1a c3       	rjmp	.+1588   	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    74bc:	8b e8       	ldi	r24, 0x8B	; 139
    74be:	91 e0       	ldi	r25, 0x01	; 1
    74c0:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    74c4:	90 93 96 01 	sts	0x0196, r25
    74c8:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    74cc:	8b e8       	ldi	r24, 0x8B	; 139
    74ce:	91 e0       	ldi	r25, 0x01	; 1
    74d0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    74d4:	85 e8       	ldi	r24, 0x85	; 133
    74d6:	8a 95       	dec	r24
    74d8:	f1 f7       	brne	.-4      	; 0x74d6 <main+0x376>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    74da:	80 91 1e 02 	lds	r24, 0x021E
    74de:	90 91 1f 02 	lds	r25, 0x021F
    74e2:	9c 01       	movw	r18, r24
    74e4:	d9 01       	movw	r26, r18
    74e6:	e2 ea       	ldi	r30, 0xA2	; 162
    74e8:	f1 e0       	ldi	r31, 0x01	; 1
    74ea:	88 e0       	ldi	r24, 0x08	; 8
    74ec:	01 90       	ld	r0, Z+
    74ee:	0d 92       	st	X+, r0
    74f0:	81 50       	subi	r24, 0x01	; 1
    74f2:	e1 f7       	brne	.-8      	; 0x74ec <main+0x38c>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    74f4:	e0 91 1e 02 	lds	r30, 0x021E
    74f8:	f0 91 1f 02 	lds	r31, 0x021F
    74fc:	80 81       	ld	r24, Z
    74fe:	91 81       	ldd	r25, Z+1	; 0x01
    7500:	89 2b       	or	r24, r25
    7502:	81 f4       	brne	.+32     	; 0x7524 <main+0x3c4>
    7504:	82 81       	ldd	r24, Z+2	; 0x02
    7506:	93 81       	ldd	r25, Z+3	; 0x03
    7508:	89 2b       	or	r24, r25
    750a:	61 f4       	brne	.+24     	; 0x7524 <main+0x3c4>
    750c:	84 81       	ldd	r24, Z+4	; 0x04
    750e:	95 81       	ldd	r25, Z+5	; 0x05
    7510:	89 2b       	or	r24, r25
    7512:	41 f4       	brne	.+16     	; 0x7524 <main+0x3c4>
    7514:	86 81       	ldd	r24, Z+6	; 0x06
    7516:	88 23       	and	r24, r24
    7518:	29 f4       	brne	.+10     	; 0x7524 <main+0x3c4>
    751a:	87 81       	ldd	r24, Z+7	; 0x07
    751c:	90 85       	ldd	r25, Z+8	; 0x08
    751e:	89 2b       	or	r24, r25
    7520:	09 f4       	brne	.+2      	; 0x7524 <main+0x3c4>
    7522:	e6 c2       	rjmp	.+1484   	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7524:	8b e8       	ldi	r24, 0x8B	; 139
    7526:	91 e0       	ldi	r25, 0x01	; 1
    7528:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    752c:	90 93 96 01 	sts	0x0196, r25
    7530:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7534:	8b e8       	ldi	r24, 0x8B	; 139
    7536:	91 e0       	ldi	r25, 0x01	; 1
    7538:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    753c:	85 e8       	ldi	r24, 0x85	; 133
    753e:	8a 95       	dec	r24
    7540:	f1 f7       	brne	.-4      	; 0x753e <main+0x3de>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7542:	80 91 1e 02 	lds	r24, 0x021E
    7546:	90 91 1f 02 	lds	r25, 0x021F
    754a:	9c 01       	movw	r18, r24
    754c:	d9 01       	movw	r26, r18
    754e:	ea ea       	ldi	r30, 0xAA	; 170
    7550:	f1 e0       	ldi	r31, 0x01	; 1
    7552:	88 e0       	ldi	r24, 0x08	; 8
    7554:	01 90       	ld	r0, Z+
    7556:	0d 92       	st	X+, r0
    7558:	81 50       	subi	r24, 0x01	; 1
    755a:	e1 f7       	brne	.-8      	; 0x7554 <main+0x3f4>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    755c:	e0 91 1e 02 	lds	r30, 0x021E
    7560:	f0 91 1f 02 	lds	r31, 0x021F
    7564:	80 81       	ld	r24, Z
    7566:	91 81       	ldd	r25, Z+1	; 0x01
    7568:	89 2b       	or	r24, r25
    756a:	81 f4       	brne	.+32     	; 0x758c <main+0x42c>
    756c:	82 81       	ldd	r24, Z+2	; 0x02
    756e:	93 81       	ldd	r25, Z+3	; 0x03
    7570:	89 2b       	or	r24, r25
    7572:	61 f4       	brne	.+24     	; 0x758c <main+0x42c>
    7574:	84 81       	ldd	r24, Z+4	; 0x04
    7576:	95 81       	ldd	r25, Z+5	; 0x05
    7578:	89 2b       	or	r24, r25
    757a:	41 f4       	brne	.+16     	; 0x758c <main+0x42c>
    757c:	86 81       	ldd	r24, Z+6	; 0x06
    757e:	88 23       	and	r24, r24
    7580:	29 f4       	brne	.+10     	; 0x758c <main+0x42c>
    7582:	87 81       	ldd	r24, Z+7	; 0x07
    7584:	90 85       	ldd	r25, Z+8	; 0x08
    7586:	89 2b       	or	r24, r25
    7588:	09 f4       	brne	.+2      	; 0x758c <main+0x42c>
    758a:	b2 c2       	rjmp	.+1380   	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    758c:	8b e8       	ldi	r24, 0x8B	; 139
    758e:	91 e0       	ldi	r25, 0x01	; 1
    7590:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7594:	90 93 96 01 	sts	0x0196, r25
    7598:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    759c:	8b e8       	ldi	r24, 0x8B	; 139
    759e:	91 e0       	ldi	r25, 0x01	; 1
    75a0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    75a4:	85 e8       	ldi	r24, 0x85	; 133
    75a6:	8a 95       	dec	r24
    75a8:	f1 f7       	brne	.-4      	; 0x75a6 <main+0x446>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    75aa:	80 91 1e 02 	lds	r24, 0x021E
    75ae:	90 91 1f 02 	lds	r25, 0x021F
    75b2:	9c 01       	movw	r18, r24
    75b4:	d9 01       	movw	r26, r18
    75b6:	e2 eb       	ldi	r30, 0xB2	; 178
    75b8:	f1 e0       	ldi	r31, 0x01	; 1
    75ba:	88 e0       	ldi	r24, 0x08	; 8
    75bc:	01 90       	ld	r0, Z+
    75be:	0d 92       	st	X+, r0
    75c0:	81 50       	subi	r24, 0x01	; 1
    75c2:	e1 f7       	brne	.-8      	; 0x75bc <main+0x45c>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    75c4:	e0 91 1e 02 	lds	r30, 0x021E
    75c8:	f0 91 1f 02 	lds	r31, 0x021F
    75cc:	80 81       	ld	r24, Z
    75ce:	91 81       	ldd	r25, Z+1	; 0x01
    75d0:	89 2b       	or	r24, r25
    75d2:	81 f4       	brne	.+32     	; 0x75f4 <main+0x494>
    75d4:	82 81       	ldd	r24, Z+2	; 0x02
    75d6:	93 81       	ldd	r25, Z+3	; 0x03
    75d8:	89 2b       	or	r24, r25
    75da:	61 f4       	brne	.+24     	; 0x75f4 <main+0x494>
    75dc:	84 81       	ldd	r24, Z+4	; 0x04
    75de:	95 81       	ldd	r25, Z+5	; 0x05
    75e0:	89 2b       	or	r24, r25
    75e2:	41 f4       	brne	.+16     	; 0x75f4 <main+0x494>
    75e4:	86 81       	ldd	r24, Z+6	; 0x06
    75e6:	88 23       	and	r24, r24
    75e8:	29 f4       	brne	.+10     	; 0x75f4 <main+0x494>
    75ea:	87 81       	ldd	r24, Z+7	; 0x07
    75ec:	90 85       	ldd	r25, Z+8	; 0x08
    75ee:	89 2b       	or	r24, r25
    75f0:	09 f4       	brne	.+2      	; 0x75f4 <main+0x494>
    75f2:	7e c2       	rjmp	.+1276   	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    75f4:	8b e8       	ldi	r24, 0x8B	; 139
    75f6:	91 e0       	ldi	r25, 0x01	; 1
    75f8:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    75fc:	90 93 96 01 	sts	0x0196, r25
    7600:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7604:	8b e8       	ldi	r24, 0x8B	; 139
    7606:	91 e0       	ldi	r25, 0x01	; 1
    7608:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    760c:	85 e8       	ldi	r24, 0x85	; 133
    760e:	8a 95       	dec	r24
    7610:	f1 f7       	brne	.-4      	; 0x760e <main+0x4ae>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7612:	80 91 1e 02 	lds	r24, 0x021E
    7616:	90 91 1f 02 	lds	r25, 0x021F
    761a:	9c 01       	movw	r18, r24
    761c:	d9 01       	movw	r26, r18
    761e:	ea eb       	ldi	r30, 0xBA	; 186
    7620:	f1 e0       	ldi	r31, 0x01	; 1
    7622:	88 e0       	ldi	r24, 0x08	; 8
    7624:	01 90       	ld	r0, Z+
    7626:	0d 92       	st	X+, r0
    7628:	81 50       	subi	r24, 0x01	; 1
    762a:	e1 f7       	brne	.-8      	; 0x7624 <main+0x4c4>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    762c:	e0 91 1e 02 	lds	r30, 0x021E
    7630:	f0 91 1f 02 	lds	r31, 0x021F
    7634:	80 81       	ld	r24, Z
    7636:	91 81       	ldd	r25, Z+1	; 0x01
    7638:	89 2b       	or	r24, r25
    763a:	81 f4       	brne	.+32     	; 0x765c <main+0x4fc>
    763c:	82 81       	ldd	r24, Z+2	; 0x02
    763e:	93 81       	ldd	r25, Z+3	; 0x03
    7640:	89 2b       	or	r24, r25
    7642:	61 f4       	brne	.+24     	; 0x765c <main+0x4fc>
    7644:	84 81       	ldd	r24, Z+4	; 0x04
    7646:	95 81       	ldd	r25, Z+5	; 0x05
    7648:	89 2b       	or	r24, r25
    764a:	41 f4       	brne	.+16     	; 0x765c <main+0x4fc>
    764c:	86 81       	ldd	r24, Z+6	; 0x06
    764e:	88 23       	and	r24, r24
    7650:	29 f4       	brne	.+10     	; 0x765c <main+0x4fc>
    7652:	87 81       	ldd	r24, Z+7	; 0x07
    7654:	90 85       	ldd	r25, Z+8	; 0x08
    7656:	89 2b       	or	r24, r25
    7658:	09 f4       	brne	.+2      	; 0x765c <main+0x4fc>
    765a:	4a c2       	rjmp	.+1172   	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    765c:	8b e8       	ldi	r24, 0x8B	; 139
    765e:	91 e0       	ldi	r25, 0x01	; 1
    7660:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7664:	90 93 96 01 	sts	0x0196, r25
    7668:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    766c:	8b e8       	ldi	r24, 0x8B	; 139
    766e:	91 e0       	ldi	r25, 0x01	; 1
    7670:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    7674:	85 e8       	ldi	r24, 0x85	; 133
    7676:	8a 95       	dec	r24
    7678:	f1 f7       	brne	.-4      	; 0x7676 <main+0x516>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    767a:	80 91 1e 02 	lds	r24, 0x021E
    767e:	90 91 1f 02 	lds	r25, 0x021F
    7682:	9c 01       	movw	r18, r24
    7684:	d9 01       	movw	r26, r18
    7686:	e2 ec       	ldi	r30, 0xC2	; 194
    7688:	f1 e0       	ldi	r31, 0x01	; 1
    768a:	88 e0       	ldi	r24, 0x08	; 8
    768c:	01 90       	ld	r0, Z+
    768e:	0d 92       	st	X+, r0
    7690:	81 50       	subi	r24, 0x01	; 1
    7692:	e1 f7       	brne	.-8      	; 0x768c <main+0x52c>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7694:	e0 91 1e 02 	lds	r30, 0x021E
    7698:	f0 91 1f 02 	lds	r31, 0x021F
    769c:	80 81       	ld	r24, Z
    769e:	91 81       	ldd	r25, Z+1	; 0x01
    76a0:	89 2b       	or	r24, r25
    76a2:	81 f4       	brne	.+32     	; 0x76c4 <main+0x564>
    76a4:	82 81       	ldd	r24, Z+2	; 0x02
    76a6:	93 81       	ldd	r25, Z+3	; 0x03
    76a8:	89 2b       	or	r24, r25
    76aa:	61 f4       	brne	.+24     	; 0x76c4 <main+0x564>
    76ac:	84 81       	ldd	r24, Z+4	; 0x04
    76ae:	95 81       	ldd	r25, Z+5	; 0x05
    76b0:	89 2b       	or	r24, r25
    76b2:	41 f4       	brne	.+16     	; 0x76c4 <main+0x564>
    76b4:	86 81       	ldd	r24, Z+6	; 0x06
    76b6:	88 23       	and	r24, r24
    76b8:	29 f4       	brne	.+10     	; 0x76c4 <main+0x564>
    76ba:	87 81       	ldd	r24, Z+7	; 0x07
    76bc:	90 85       	ldd	r25, Z+8	; 0x08
    76be:	89 2b       	or	r24, r25
    76c0:	09 f4       	brne	.+2      	; 0x76c4 <main+0x564>
    76c2:	16 c2       	rjmp	.+1068   	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    76c4:	8b e8       	ldi	r24, 0x8B	; 139
    76c6:	91 e0       	ldi	r25, 0x01	; 1
    76c8:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    76cc:	90 93 96 01 	sts	0x0196, r25
    76d0:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    76d4:	8b e8       	ldi	r24, 0x8B	; 139
    76d6:	91 e0       	ldi	r25, 0x01	; 1
    76d8:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    76dc:	85 e8       	ldi	r24, 0x85	; 133
    76de:	8a 95       	dec	r24
    76e0:	f1 f7       	brne	.-4      	; 0x76de <main+0x57e>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    76e2:	80 91 1e 02 	lds	r24, 0x021E
    76e6:	90 91 1f 02 	lds	r25, 0x021F
    76ea:	9c 01       	movw	r18, r24
    76ec:	d9 01       	movw	r26, r18
    76ee:	ea ec       	ldi	r30, 0xCA	; 202
    76f0:	f1 e0       	ldi	r31, 0x01	; 1
    76f2:	88 e0       	ldi	r24, 0x08	; 8
    76f4:	01 90       	ld	r0, Z+
    76f6:	0d 92       	st	X+, r0
    76f8:	81 50       	subi	r24, 0x01	; 1
    76fa:	e1 f7       	brne	.-8      	; 0x76f4 <main+0x594>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    76fc:	e0 91 1e 02 	lds	r30, 0x021E
    7700:	f0 91 1f 02 	lds	r31, 0x021F
    7704:	80 81       	ld	r24, Z
    7706:	91 81       	ldd	r25, Z+1	; 0x01
    7708:	89 2b       	or	r24, r25
    770a:	81 f4       	brne	.+32     	; 0x772c <main+0x5cc>
    770c:	82 81       	ldd	r24, Z+2	; 0x02
    770e:	93 81       	ldd	r25, Z+3	; 0x03
    7710:	89 2b       	or	r24, r25
    7712:	61 f4       	brne	.+24     	; 0x772c <main+0x5cc>
    7714:	84 81       	ldd	r24, Z+4	; 0x04
    7716:	95 81       	ldd	r25, Z+5	; 0x05
    7718:	89 2b       	or	r24, r25
    771a:	41 f4       	brne	.+16     	; 0x772c <main+0x5cc>
    771c:	86 81       	ldd	r24, Z+6	; 0x06
    771e:	88 23       	and	r24, r24
    7720:	29 f4       	brne	.+10     	; 0x772c <main+0x5cc>
    7722:	87 81       	ldd	r24, Z+7	; 0x07
    7724:	90 85       	ldd	r25, Z+8	; 0x08
    7726:	89 2b       	or	r24, r25
    7728:	09 f4       	brne	.+2      	; 0x772c <main+0x5cc>
    772a:	e2 c1       	rjmp	.+964    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    772c:	8b e8       	ldi	r24, 0x8B	; 139
    772e:	91 e0       	ldi	r25, 0x01	; 1
    7730:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7734:	90 93 96 01 	sts	0x0196, r25
    7738:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    773c:	8b e8       	ldi	r24, 0x8B	; 139
    773e:	91 e0       	ldi	r25, 0x01	; 1
    7740:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    7744:	85 e8       	ldi	r24, 0x85	; 133
    7746:	8a 95       	dec	r24
    7748:	f1 f7       	brne	.-4      	; 0x7746 <main+0x5e6>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    774a:	80 91 1e 02 	lds	r24, 0x021E
    774e:	90 91 1f 02 	lds	r25, 0x021F
    7752:	9c 01       	movw	r18, r24
    7754:	d9 01       	movw	r26, r18
    7756:	e2 ed       	ldi	r30, 0xD2	; 210
    7758:	f1 e0       	ldi	r31, 0x01	; 1
    775a:	88 e0       	ldi	r24, 0x08	; 8
    775c:	01 90       	ld	r0, Z+
    775e:	0d 92       	st	X+, r0
    7760:	81 50       	subi	r24, 0x01	; 1
    7762:	e1 f7       	brne	.-8      	; 0x775c <main+0x5fc>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7764:	e0 91 1e 02 	lds	r30, 0x021E
    7768:	f0 91 1f 02 	lds	r31, 0x021F
    776c:	80 81       	ld	r24, Z
    776e:	91 81       	ldd	r25, Z+1	; 0x01
    7770:	89 2b       	or	r24, r25
    7772:	81 f4       	brne	.+32     	; 0x7794 <main+0x634>
    7774:	82 81       	ldd	r24, Z+2	; 0x02
    7776:	93 81       	ldd	r25, Z+3	; 0x03
    7778:	89 2b       	or	r24, r25
    777a:	61 f4       	brne	.+24     	; 0x7794 <main+0x634>
    777c:	84 81       	ldd	r24, Z+4	; 0x04
    777e:	95 81       	ldd	r25, Z+5	; 0x05
    7780:	89 2b       	or	r24, r25
    7782:	41 f4       	brne	.+16     	; 0x7794 <main+0x634>
    7784:	86 81       	ldd	r24, Z+6	; 0x06
    7786:	88 23       	and	r24, r24
    7788:	29 f4       	brne	.+10     	; 0x7794 <main+0x634>
    778a:	87 81       	ldd	r24, Z+7	; 0x07
    778c:	90 85       	ldd	r25, Z+8	; 0x08
    778e:	89 2b       	or	r24, r25
    7790:	09 f4       	brne	.+2      	; 0x7794 <main+0x634>
    7792:	ae c1       	rjmp	.+860    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7794:	8b e8       	ldi	r24, 0x8B	; 139
    7796:	91 e0       	ldi	r25, 0x01	; 1
    7798:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    779c:	90 93 96 01 	sts	0x0196, r25
    77a0:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    77a4:	8b e8       	ldi	r24, 0x8B	; 139
    77a6:	91 e0       	ldi	r25, 0x01	; 1
    77a8:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    77ac:	85 e8       	ldi	r24, 0x85	; 133
    77ae:	8a 95       	dec	r24
    77b0:	f1 f7       	brne	.-4      	; 0x77ae <main+0x64e>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    77b2:	80 91 1e 02 	lds	r24, 0x021E
    77b6:	90 91 1f 02 	lds	r25, 0x021F
    77ba:	9c 01       	movw	r18, r24
    77bc:	d9 01       	movw	r26, r18
    77be:	ea ed       	ldi	r30, 0xDA	; 218
    77c0:	f1 e0       	ldi	r31, 0x01	; 1
    77c2:	88 e0       	ldi	r24, 0x08	; 8
    77c4:	01 90       	ld	r0, Z+
    77c6:	0d 92       	st	X+, r0
    77c8:	81 50       	subi	r24, 0x01	; 1
    77ca:	e1 f7       	brne	.-8      	; 0x77c4 <main+0x664>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    77cc:	e0 91 1e 02 	lds	r30, 0x021E
    77d0:	f0 91 1f 02 	lds	r31, 0x021F
    77d4:	80 81       	ld	r24, Z
    77d6:	91 81       	ldd	r25, Z+1	; 0x01
    77d8:	89 2b       	or	r24, r25
    77da:	81 f4       	brne	.+32     	; 0x77fc <main+0x69c>
    77dc:	82 81       	ldd	r24, Z+2	; 0x02
    77de:	93 81       	ldd	r25, Z+3	; 0x03
    77e0:	89 2b       	or	r24, r25
    77e2:	61 f4       	brne	.+24     	; 0x77fc <main+0x69c>
    77e4:	84 81       	ldd	r24, Z+4	; 0x04
    77e6:	95 81       	ldd	r25, Z+5	; 0x05
    77e8:	89 2b       	or	r24, r25
    77ea:	41 f4       	brne	.+16     	; 0x77fc <main+0x69c>
    77ec:	86 81       	ldd	r24, Z+6	; 0x06
    77ee:	88 23       	and	r24, r24
    77f0:	29 f4       	brne	.+10     	; 0x77fc <main+0x69c>
    77f2:	87 81       	ldd	r24, Z+7	; 0x07
    77f4:	90 85       	ldd	r25, Z+8	; 0x08
    77f6:	89 2b       	or	r24, r25
    77f8:	09 f4       	brne	.+2      	; 0x77fc <main+0x69c>
    77fa:	7a c1       	rjmp	.+756    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    77fc:	8b e8       	ldi	r24, 0x8B	; 139
    77fe:	91 e0       	ldi	r25, 0x01	; 1
    7800:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7804:	90 93 96 01 	sts	0x0196, r25
    7808:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    780c:	8b e8       	ldi	r24, 0x8B	; 139
    780e:	91 e0       	ldi	r25, 0x01	; 1
    7810:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    7814:	85 e8       	ldi	r24, 0x85	; 133
    7816:	8a 95       	dec	r24
    7818:	f1 f7       	brne	.-4      	; 0x7816 <main+0x6b6>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    781a:	80 91 1e 02 	lds	r24, 0x021E
    781e:	90 91 1f 02 	lds	r25, 0x021F
    7822:	9c 01       	movw	r18, r24
    7824:	d9 01       	movw	r26, r18
    7826:	e2 ee       	ldi	r30, 0xE2	; 226
    7828:	f1 e0       	ldi	r31, 0x01	; 1
    782a:	88 e0       	ldi	r24, 0x08	; 8
    782c:	01 90       	ld	r0, Z+
    782e:	0d 92       	st	X+, r0
    7830:	81 50       	subi	r24, 0x01	; 1
    7832:	e1 f7       	brne	.-8      	; 0x782c <main+0x6cc>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7834:	e0 91 1e 02 	lds	r30, 0x021E
    7838:	f0 91 1f 02 	lds	r31, 0x021F
    783c:	80 81       	ld	r24, Z
    783e:	91 81       	ldd	r25, Z+1	; 0x01
    7840:	89 2b       	or	r24, r25
    7842:	81 f4       	brne	.+32     	; 0x7864 <main+0x704>
    7844:	82 81       	ldd	r24, Z+2	; 0x02
    7846:	93 81       	ldd	r25, Z+3	; 0x03
    7848:	89 2b       	or	r24, r25
    784a:	61 f4       	brne	.+24     	; 0x7864 <main+0x704>
    784c:	84 81       	ldd	r24, Z+4	; 0x04
    784e:	95 81       	ldd	r25, Z+5	; 0x05
    7850:	89 2b       	or	r24, r25
    7852:	41 f4       	brne	.+16     	; 0x7864 <main+0x704>
    7854:	86 81       	ldd	r24, Z+6	; 0x06
    7856:	88 23       	and	r24, r24
    7858:	29 f4       	brne	.+10     	; 0x7864 <main+0x704>
    785a:	87 81       	ldd	r24, Z+7	; 0x07
    785c:	90 85       	ldd	r25, Z+8	; 0x08
    785e:	89 2b       	or	r24, r25
    7860:	09 f4       	brne	.+2      	; 0x7864 <main+0x704>
    7862:	46 c1       	rjmp	.+652    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7864:	8b e8       	ldi	r24, 0x8B	; 139
    7866:	91 e0       	ldi	r25, 0x01	; 1
    7868:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    786c:	90 93 96 01 	sts	0x0196, r25
    7870:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7874:	8b e8       	ldi	r24, 0x8B	; 139
    7876:	91 e0       	ldi	r25, 0x01	; 1
    7878:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    787c:	85 e8       	ldi	r24, 0x85	; 133
    787e:	8a 95       	dec	r24
    7880:	f1 f7       	brne	.-4      	; 0x787e <main+0x71e>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7882:	80 91 1e 02 	lds	r24, 0x021E
    7886:	90 91 1f 02 	lds	r25, 0x021F
    788a:	9c 01       	movw	r18, r24
    788c:	d9 01       	movw	r26, r18
    788e:	ea ee       	ldi	r30, 0xEA	; 234
    7890:	f1 e0       	ldi	r31, 0x01	; 1
    7892:	88 e0       	ldi	r24, 0x08	; 8
    7894:	01 90       	ld	r0, Z+
    7896:	0d 92       	st	X+, r0
    7898:	81 50       	subi	r24, 0x01	; 1
    789a:	e1 f7       	brne	.-8      	; 0x7894 <main+0x734>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    789c:	e0 91 1e 02 	lds	r30, 0x021E
    78a0:	f0 91 1f 02 	lds	r31, 0x021F
    78a4:	80 81       	ld	r24, Z
    78a6:	91 81       	ldd	r25, Z+1	; 0x01
    78a8:	89 2b       	or	r24, r25
    78aa:	81 f4       	brne	.+32     	; 0x78cc <main+0x76c>
    78ac:	82 81       	ldd	r24, Z+2	; 0x02
    78ae:	93 81       	ldd	r25, Z+3	; 0x03
    78b0:	89 2b       	or	r24, r25
    78b2:	61 f4       	brne	.+24     	; 0x78cc <main+0x76c>
    78b4:	84 81       	ldd	r24, Z+4	; 0x04
    78b6:	95 81       	ldd	r25, Z+5	; 0x05
    78b8:	89 2b       	or	r24, r25
    78ba:	41 f4       	brne	.+16     	; 0x78cc <main+0x76c>
    78bc:	86 81       	ldd	r24, Z+6	; 0x06
    78be:	88 23       	and	r24, r24
    78c0:	29 f4       	brne	.+10     	; 0x78cc <main+0x76c>
    78c2:	87 81       	ldd	r24, Z+7	; 0x07
    78c4:	90 85       	ldd	r25, Z+8	; 0x08
    78c6:	89 2b       	or	r24, r25
    78c8:	09 f4       	brne	.+2      	; 0x78cc <main+0x76c>
    78ca:	12 c1       	rjmp	.+548    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    78cc:	8b e8       	ldi	r24, 0x8B	; 139
    78ce:	91 e0       	ldi	r25, 0x01	; 1
    78d0:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    78d4:	90 93 96 01 	sts	0x0196, r25
    78d8:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    78dc:	8b e8       	ldi	r24, 0x8B	; 139
    78de:	91 e0       	ldi	r25, 0x01	; 1
    78e0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    78e4:	85 e8       	ldi	r24, 0x85	; 133
    78e6:	8a 95       	dec	r24
    78e8:	f1 f7       	brne	.-4      	; 0x78e6 <main+0x786>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    78ea:	80 91 1e 02 	lds	r24, 0x021E
    78ee:	90 91 1f 02 	lds	r25, 0x021F
    78f2:	9c 01       	movw	r18, r24
    78f4:	d9 01       	movw	r26, r18
    78f6:	e2 ef       	ldi	r30, 0xF2	; 242
    78f8:	f1 e0       	ldi	r31, 0x01	; 1
    78fa:	88 e0       	ldi	r24, 0x08	; 8
    78fc:	01 90       	ld	r0, Z+
    78fe:	0d 92       	st	X+, r0
    7900:	81 50       	subi	r24, 0x01	; 1
    7902:	e1 f7       	brne	.-8      	; 0x78fc <main+0x79c>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7904:	e0 91 1e 02 	lds	r30, 0x021E
    7908:	f0 91 1f 02 	lds	r31, 0x021F
    790c:	80 81       	ld	r24, Z
    790e:	91 81       	ldd	r25, Z+1	; 0x01
    7910:	89 2b       	or	r24, r25
    7912:	81 f4       	brne	.+32     	; 0x7934 <main+0x7d4>
    7914:	82 81       	ldd	r24, Z+2	; 0x02
    7916:	93 81       	ldd	r25, Z+3	; 0x03
    7918:	89 2b       	or	r24, r25
    791a:	61 f4       	brne	.+24     	; 0x7934 <main+0x7d4>
    791c:	84 81       	ldd	r24, Z+4	; 0x04
    791e:	95 81       	ldd	r25, Z+5	; 0x05
    7920:	89 2b       	or	r24, r25
    7922:	41 f4       	brne	.+16     	; 0x7934 <main+0x7d4>
    7924:	86 81       	ldd	r24, Z+6	; 0x06
    7926:	88 23       	and	r24, r24
    7928:	29 f4       	brne	.+10     	; 0x7934 <main+0x7d4>
    792a:	87 81       	ldd	r24, Z+7	; 0x07
    792c:	90 85       	ldd	r25, Z+8	; 0x08
    792e:	89 2b       	or	r24, r25
    7930:	09 f4       	brne	.+2      	; 0x7934 <main+0x7d4>
    7932:	de c0       	rjmp	.+444    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7934:	8b e8       	ldi	r24, 0x8B	; 139
    7936:	91 e0       	ldi	r25, 0x01	; 1
    7938:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    793c:	90 93 96 01 	sts	0x0196, r25
    7940:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7944:	8b e8       	ldi	r24, 0x8B	; 139
    7946:	91 e0       	ldi	r25, 0x01	; 1
    7948:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    794c:	85 e8       	ldi	r24, 0x85	; 133
    794e:	8a 95       	dec	r24
    7950:	f1 f7       	brne	.-4      	; 0x794e <main+0x7ee>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7952:	80 91 1e 02 	lds	r24, 0x021E
    7956:	90 91 1f 02 	lds	r25, 0x021F
    795a:	9c 01       	movw	r18, r24
    795c:	d9 01       	movw	r26, r18
    795e:	ea ef       	ldi	r30, 0xFA	; 250
    7960:	f1 e0       	ldi	r31, 0x01	; 1
    7962:	88 e0       	ldi	r24, 0x08	; 8
    7964:	01 90       	ld	r0, Z+
    7966:	0d 92       	st	X+, r0
    7968:	81 50       	subi	r24, 0x01	; 1
    796a:	e1 f7       	brne	.-8      	; 0x7964 <main+0x804>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    796c:	e0 91 1e 02 	lds	r30, 0x021E
    7970:	f0 91 1f 02 	lds	r31, 0x021F
    7974:	80 81       	ld	r24, Z
    7976:	91 81       	ldd	r25, Z+1	; 0x01
    7978:	89 2b       	or	r24, r25
    797a:	81 f4       	brne	.+32     	; 0x799c <main+0x83c>
    797c:	82 81       	ldd	r24, Z+2	; 0x02
    797e:	93 81       	ldd	r25, Z+3	; 0x03
    7980:	89 2b       	or	r24, r25
    7982:	61 f4       	brne	.+24     	; 0x799c <main+0x83c>
    7984:	84 81       	ldd	r24, Z+4	; 0x04
    7986:	95 81       	ldd	r25, Z+5	; 0x05
    7988:	89 2b       	or	r24, r25
    798a:	41 f4       	brne	.+16     	; 0x799c <main+0x83c>
    798c:	86 81       	ldd	r24, Z+6	; 0x06
    798e:	88 23       	and	r24, r24
    7990:	29 f4       	brne	.+10     	; 0x799c <main+0x83c>
    7992:	87 81       	ldd	r24, Z+7	; 0x07
    7994:	90 85       	ldd	r25, Z+8	; 0x08
    7996:	89 2b       	or	r24, r25
    7998:	09 f4       	brne	.+2      	; 0x799c <main+0x83c>
    799a:	aa c0       	rjmp	.+340    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    799c:	8b e8       	ldi	r24, 0x8B	; 139
    799e:	91 e0       	ldi	r25, 0x01	; 1
    79a0:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    79a4:	90 93 96 01 	sts	0x0196, r25
    79a8:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    79ac:	8b e8       	ldi	r24, 0x8B	; 139
    79ae:	91 e0       	ldi	r25, 0x01	; 1
    79b0:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    79b4:	85 e8       	ldi	r24, 0x85	; 133
    79b6:	8a 95       	dec	r24
    79b8:	f1 f7       	brne	.-4      	; 0x79b6 <main+0x856>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    79ba:	80 91 1e 02 	lds	r24, 0x021E
    79be:	90 91 1f 02 	lds	r25, 0x021F
    79c2:	9c 01       	movw	r18, r24
    79c4:	d9 01       	movw	r26, r18
    79c6:	e2 e0       	ldi	r30, 0x02	; 2
    79c8:	f2 e0       	ldi	r31, 0x02	; 2
    79ca:	88 e0       	ldi	r24, 0x08	; 8
    79cc:	01 90       	ld	r0, Z+
    79ce:	0d 92       	st	X+, r0
    79d0:	81 50       	subi	r24, 0x01	; 1
    79d2:	e1 f7       	brne	.-8      	; 0x79cc <main+0x86c>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    79d4:	e0 91 1e 02 	lds	r30, 0x021E
    79d8:	f0 91 1f 02 	lds	r31, 0x021F
    79dc:	80 81       	ld	r24, Z
    79de:	91 81       	ldd	r25, Z+1	; 0x01
    79e0:	89 2b       	or	r24, r25
    79e2:	81 f4       	brne	.+32     	; 0x7a04 <main+0x8a4>
    79e4:	82 81       	ldd	r24, Z+2	; 0x02
    79e6:	93 81       	ldd	r25, Z+3	; 0x03
    79e8:	89 2b       	or	r24, r25
    79ea:	61 f4       	brne	.+24     	; 0x7a04 <main+0x8a4>
    79ec:	84 81       	ldd	r24, Z+4	; 0x04
    79ee:	95 81       	ldd	r25, Z+5	; 0x05
    79f0:	89 2b       	or	r24, r25
    79f2:	41 f4       	brne	.+16     	; 0x7a04 <main+0x8a4>
    79f4:	86 81       	ldd	r24, Z+6	; 0x06
    79f6:	88 23       	and	r24, r24
    79f8:	29 f4       	brne	.+10     	; 0x7a04 <main+0x8a4>
    79fa:	87 81       	ldd	r24, Z+7	; 0x07
    79fc:	90 85       	ldd	r25, Z+8	; 0x08
    79fe:	89 2b       	or	r24, r25
    7a00:	09 f4       	brne	.+2      	; 0x7a04 <main+0x8a4>
    7a02:	76 c0       	rjmp	.+236    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7a04:	8b e8       	ldi	r24, 0x8B	; 139
    7a06:	91 e0       	ldi	r25, 0x01	; 1
    7a08:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7a0c:	90 93 96 01 	sts	0x0196, r25
    7a10:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7a14:	8b e8       	ldi	r24, 0x8B	; 139
    7a16:	91 e0       	ldi	r25, 0x01	; 1
    7a18:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    7a1c:	85 e8       	ldi	r24, 0x85	; 133
    7a1e:	8a 95       	dec	r24
    7a20:	f1 f7       	brne	.-4      	; 0x7a1e <main+0x8be>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7a22:	80 91 1e 02 	lds	r24, 0x021E
    7a26:	90 91 1f 02 	lds	r25, 0x021F
    7a2a:	9c 01       	movw	r18, r24
    7a2c:	d9 01       	movw	r26, r18
    7a2e:	ea e0       	ldi	r30, 0x0A	; 10
    7a30:	f2 e0       	ldi	r31, 0x02	; 2
    7a32:	88 e0       	ldi	r24, 0x08	; 8
    7a34:	01 90       	ld	r0, Z+
    7a36:	0d 92       	st	X+, r0
    7a38:	81 50       	subi	r24, 0x01	; 1
    7a3a:	e1 f7       	brne	.-8      	; 0x7a34 <main+0x8d4>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7a3c:	e0 91 1e 02 	lds	r30, 0x021E
    7a40:	f0 91 1f 02 	lds	r31, 0x021F
    7a44:	80 81       	ld	r24, Z
    7a46:	91 81       	ldd	r25, Z+1	; 0x01
    7a48:	89 2b       	or	r24, r25
    7a4a:	81 f4       	brne	.+32     	; 0x7a6c <main+0x90c>
    7a4c:	82 81       	ldd	r24, Z+2	; 0x02
    7a4e:	93 81       	ldd	r25, Z+3	; 0x03
    7a50:	89 2b       	or	r24, r25
    7a52:	61 f4       	brne	.+24     	; 0x7a6c <main+0x90c>
    7a54:	84 81       	ldd	r24, Z+4	; 0x04
    7a56:	95 81       	ldd	r25, Z+5	; 0x05
    7a58:	89 2b       	or	r24, r25
    7a5a:	41 f4       	brne	.+16     	; 0x7a6c <main+0x90c>
    7a5c:	86 81       	ldd	r24, Z+6	; 0x06
    7a5e:	88 23       	and	r24, r24
    7a60:	29 f4       	brne	.+10     	; 0x7a6c <main+0x90c>
    7a62:	87 81       	ldd	r24, Z+7	; 0x07
    7a64:	90 85       	ldd	r25, Z+8	; 0x08
    7a66:	89 2b       	or	r24, r25
    7a68:	09 f4       	brne	.+2      	; 0x7a6c <main+0x90c>
    7a6a:	42 c0       	rjmp	.+132    	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7a6c:	8b e8       	ldi	r24, 0x8B	; 139
    7a6e:	91 e0       	ldi	r25, 0x01	; 1
    7a70:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7a74:	90 93 96 01 	sts	0x0196, r25
    7a78:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7a7c:	8b e8       	ldi	r24, 0x8B	; 139
    7a7e:	91 e0       	ldi	r25, 0x01	; 1
    7a80:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    7a84:	85 e8       	ldi	r24, 0x85	; 133
    7a86:	8a 95       	dec	r24
    7a88:	f1 f7       	brne	.-4      	; 0x7a86 <main+0x926>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    7a8a:	80 91 1e 02 	lds	r24, 0x021E
    7a8e:	90 91 1f 02 	lds	r25, 0x021F
    7a92:	9c 01       	movw	r18, r24
    7a94:	d9 01       	movw	r26, r18
    7a96:	e2 e1       	ldi	r30, 0x12	; 18
    7a98:	f2 e0       	ldi	r31, 0x02	; 2
    7a9a:	88 e0       	ldi	r24, 0x08	; 8
    7a9c:	01 90       	ld	r0, Z+
    7a9e:	0d 92       	st	X+, r0
    7aa0:	81 50       	subi	r24, 0x01	; 1
    7aa2:	e1 f7       	brne	.-8      	; 0x7a9c <main+0x93c>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7aa4:	e0 91 1e 02 	lds	r30, 0x021E
    7aa8:	f0 91 1f 02 	lds	r31, 0x021F
    7aac:	80 81       	ld	r24, Z
    7aae:	91 81       	ldd	r25, Z+1	; 0x01
    7ab0:	89 2b       	or	r24, r25
    7ab2:	79 f4       	brne	.+30     	; 0x7ad2 <main+0x972>
    7ab4:	82 81       	ldd	r24, Z+2	; 0x02
    7ab6:	93 81       	ldd	r25, Z+3	; 0x03
    7ab8:	89 2b       	or	r24, r25
    7aba:	59 f4       	brne	.+22     	; 0x7ad2 <main+0x972>
    7abc:	84 81       	ldd	r24, Z+4	; 0x04
    7abe:	95 81       	ldd	r25, Z+5	; 0x05
    7ac0:	89 2b       	or	r24, r25
    7ac2:	39 f4       	brne	.+14     	; 0x7ad2 <main+0x972>
    7ac4:	86 81       	ldd	r24, Z+6	; 0x06
    7ac6:	88 23       	and	r24, r24
    7ac8:	21 f4       	brne	.+8      	; 0x7ad2 <main+0x972>
    7aca:	87 81       	ldd	r24, Z+7	; 0x07
    7acc:	90 85       	ldd	r25, Z+8	; 0x08
    7ace:	89 2b       	or	r24, r25
    7ad0:	79 f0       	breq	.+30     	; 0x7af0 <main+0x990>
                        break;
                    msg.crc = message_crc(&msg);
    7ad2:	8b e8       	ldi	r24, 0x8B	; 139
    7ad4:	91 e0       	ldi	r25, 0x01	; 1
    7ad6:	0e 94 04 3e 	call	0x7c08	; 0x7c08 <message_crc>
    7ada:	90 93 96 01 	sts	0x0196, r25
    7ade:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
    7ae2:	8b e8       	ldi	r24, 0x8B	; 139
    7ae4:	91 e0       	ldi	r25, 0x01	; 1
    7ae6:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
    7aea:	85 e8       	ldi	r24, 0x85	; 133
    7aec:	8a 95       	dec	r24
    7aee:	f1 f7       	brne	.-4      	; 0x7aec <main+0x98c>
                    _delay_us(50);
                }
                sei();
    7af0:	78 94       	sei
    7af2:	a7 cc       	rjmp	.-1714   	; 0x7442 <main+0x2e2>
            has_new_packet = 0;
            switch(packet_type) {
            case PACKET_STOP:
                break;
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
    7af4:	90 e0       	ldi	r25, 0x00	; 0
    7af6:	80 91 04 01 	lds	r24, 0x0104
    7afa:	88 23       	and	r24, r24
    7afc:	09 f4       	brne	.+2      	; 0x7b00 <main+0x9a0>
    7afe:	91 e0       	ldi	r25, 0x01	; 1
    7b00:	90 93 04 01 	sts	0x0104, r25
                if (leds_toggle) {
    7b04:	99 23       	and	r25, r25
    7b06:	09 f4       	brne	.+2      	; 0x7b0a <main+0x9aa>
    7b08:	78 c0       	rjmp	.+240    	; 0x7bfa <main+0xa9a>
                    led_port |= led_mask;
    7b0a:	29 9a       	sbi	0x05, 1	; 5
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    7b0c:	80 91 02 01 	lds	r24, 0x0102
    7b10:	88 23       	and	r24, r24
    7b12:	09 f4       	brne	.+2      	; 0x7b16 <main+0x9b6>
    7b14:	7c cb       	rjmp	.-2312   	; 0x720e <main+0xae>
    7b16:	7f cb       	rjmp	.-2306   	; 0x7216 <main+0xb6>
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
    7b18:	e0 91 1c 02 	lds	r30, 0x021C
    7b1c:	f0 91 1d 02 	lds	r31, 0x021D
    7b20:	80 91 9a 01 	lds	r24, 0x019A
    7b24:	80 83       	st	Z, r24
    7b26:	e0 91 1c 02 	lds	r30, 0x021C
    7b2a:	f0 91 1d 02 	lds	r31, 0x021D
    7b2e:	80 91 9b 01 	lds	r24, 0x019B
    7b32:	81 83       	std	Z+1, r24	; 0x01
    7b34:	e0 91 1c 02 	lds	r30, 0x021C
    7b38:	f0 91 1d 02 	lds	r31, 0x021D
    7b3c:	80 91 9c 01 	lds	r24, 0x019C
    7b40:	82 83       	std	Z+2, r24	; 0x02
    7b42:	e0 91 1c 02 	lds	r30, 0x021C
    7b46:	f0 91 1d 02 	lds	r31, 0x021D
    7b4a:	80 91 9d 01 	lds	r24, 0x019D
    7b4e:	83 83       	std	Z+3, r24	; 0x03
    7b50:	e0 91 1c 02 	lds	r30, 0x021C
    7b54:	f0 91 1d 02 	lds	r31, 0x021D
    7b58:	80 91 9e 01 	lds	r24, 0x019E
    7b5c:	84 83       	std	Z+4, r24	; 0x04
    7b5e:	e0 91 1c 02 	lds	r30, 0x021C
    7b62:	f0 91 1d 02 	lds	r31, 0x021D
    7b66:	80 91 9f 01 	lds	r24, 0x019F
    7b6a:	85 83       	std	Z+5, r24	; 0x05
    7b6c:	e0 91 1c 02 	lds	r30, 0x021C
    7b70:	f0 91 1d 02 	lds	r31, 0x021D
    7b74:	80 91 a0 01 	lds	r24, 0x01A0
    7b78:	86 83       	std	Z+6, r24	; 0x06
    7b7a:	e0 91 1c 02 	lds	r30, 0x021C
    7b7e:	f0 91 1d 02 	lds	r31, 0x021D
    7b82:	80 91 a1 01 	lds	r24, 0x01A1
    7b86:	87 83       	std	Z+7, r24	; 0x07
    7b88:	e0 91 1c 02 	lds	r30, 0x021C
    7b8c:	f0 91 1d 02 	lds	r31, 0x021D
    7b90:	80 91 a2 01 	lds	r24, 0x01A2
    7b94:	80 87       	std	Z+8, r24	; 0x08
    7b96:	e0 91 1c 02 	lds	r30, 0x021C
    7b9a:	f0 91 1d 02 	lds	r31, 0x021D
    7b9e:	80 91 a3 01 	lds	r24, 0x01A3
    7ba2:	81 87       	std	Z+9, r24	; 0x09
    7ba4:	e0 91 1c 02 	lds	r30, 0x021C
    7ba8:	f0 91 1d 02 	lds	r31, 0x021D
    7bac:	80 91 a4 01 	lds	r24, 0x01A4
    7bb0:	82 87       	std	Z+10, r24	; 0x0a
    7bb2:	e0 91 1c 02 	lds	r30, 0x021C
    7bb6:	f0 91 1d 02 	lds	r31, 0x021D
    7bba:	80 91 a5 01 	lds	r24, 0x01A5
    7bbe:	83 87       	std	Z+11, r24	; 0x0b
                while(!has_new_packet) {
    7bc0:	80 91 02 01 	lds	r24, 0x0102
    7bc4:	88 23       	and	r24, r24
    7bc6:	09 f0       	breq	.+2      	; 0x7bca <main+0xa6a>
    7bc8:	22 cb       	rjmp	.-2492   	; 0x720e <main+0xae>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7bca:	c0 e7       	ldi	r28, 0x70	; 112
    7bcc:	d7 e1       	ldi	r29, 0x17	; 23
                    message_send(&msg);
    7bce:	8b e8       	ldi	r24, 0x8B	; 139
    7bd0:	91 e0       	ldi	r25, 0x01	; 1
    7bd2:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <message_send>
                    led_port |= led_mask;
    7bd6:	29 9a       	sbi	0x05, 1	; 5
    7bd8:	ce 01       	movw	r24, r28
    7bda:	01 97       	sbiw	r24, 0x01	; 1
    7bdc:	f1 f7       	brne	.-4      	; 0x7bda <main+0xa7a>
                    _delay_ms(3);
                    led_port &= ~led_mask;
    7bde:	29 98       	cbi	0x05, 1	; 5
    7be0:	ce 01       	movw	r24, r28
    7be2:	01 97       	sbiw	r24, 0x01	; 1
    7be4:	f1 f7       	brne	.-4      	; 0x7be2 <main+0xa82>
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
                while(!has_new_packet) {
    7be6:	80 91 02 01 	lds	r24, 0x0102
    7bea:	88 23       	and	r24, r24
    7bec:	81 f3       	breq	.-32     	; 0x7bce <main+0xa6e>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    7bee:	80 91 02 01 	lds	r24, 0x0102
    7bf2:	88 23       	and	r24, r24
    7bf4:	09 f4       	brne	.+2      	; 0x7bf8 <main+0xa98>
    7bf6:	0b cb       	rjmp	.-2538   	; 0x720e <main+0xae>
    7bf8:	0e cb       	rjmp	.-2532   	; 0x7216 <main+0xb6>
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
                if (leds_toggle) {
                    led_port |= led_mask;
                } else {
                    led_port &= ~led_mask;
    7bfa:	29 98       	cbi	0x05, 1	; 5
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    7bfc:	80 91 02 01 	lds	r24, 0x0102
    7c00:	88 23       	and	r24, r24
    7c02:	09 f4       	brne	.+2      	; 0x7c06 <main+0xaa6>
    7c04:	04 cb       	rjmp	.-2552   	; 0x720e <main+0xae>
    7c06:	07 cb       	rjmp	.-2546   	; 0x7216 <main+0xb6>

00007c08 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    7c08:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    7c0a:	80 81       	ld	r24, Z
    7c0c:	2f ef       	ldi	r18, 0xFF	; 255
    7c0e:	3f ef       	ldi	r19, 0xFF	; 255
    7c10:	28 27       	eor	r18, r24
    7c12:	02 2e       	mov	r0, r18
    7c14:	22 95       	swap	r18
    7c16:	20 7f       	andi	r18, 0xF0	; 240
    7c18:	20 25       	eor	r18, r0
    7c1a:	03 2e       	mov	r0, r19
    7c1c:	32 2f       	mov	r19, r18
    7c1e:	22 95       	swap	r18
    7c20:	2f 70       	andi	r18, 0x0F	; 15
    7c22:	02 26       	eor	r0, r18
    7c24:	26 95       	lsr	r18
    7c26:	32 27       	eor	r19, r18
    7c28:	23 27       	eor	r18, r19
    7c2a:	22 0f       	add	r18, r18
    7c2c:	22 0f       	add	r18, r18
    7c2e:	22 0f       	add	r18, r18
    7c30:	20 25       	eor	r18, r0
    7c32:	81 81       	ldd	r24, Z+1	; 0x01
    7c34:	28 27       	eor	r18, r24
    7c36:	02 2e       	mov	r0, r18
    7c38:	22 95       	swap	r18
    7c3a:	20 7f       	andi	r18, 0xF0	; 240
    7c3c:	20 25       	eor	r18, r0
    7c3e:	03 2e       	mov	r0, r19
    7c40:	32 2f       	mov	r19, r18
    7c42:	22 95       	swap	r18
    7c44:	2f 70       	andi	r18, 0x0F	; 15
    7c46:	02 26       	eor	r0, r18
    7c48:	26 95       	lsr	r18
    7c4a:	32 27       	eor	r19, r18
    7c4c:	23 27       	eor	r18, r19
    7c4e:	22 0f       	add	r18, r18
    7c50:	22 0f       	add	r18, r18
    7c52:	22 0f       	add	r18, r18
    7c54:	20 25       	eor	r18, r0
    7c56:	82 81       	ldd	r24, Z+2	; 0x02
    7c58:	28 27       	eor	r18, r24
    7c5a:	02 2e       	mov	r0, r18
    7c5c:	22 95       	swap	r18
    7c5e:	20 7f       	andi	r18, 0xF0	; 240
    7c60:	20 25       	eor	r18, r0
    7c62:	03 2e       	mov	r0, r19
    7c64:	32 2f       	mov	r19, r18
    7c66:	22 95       	swap	r18
    7c68:	2f 70       	andi	r18, 0x0F	; 15
    7c6a:	02 26       	eor	r0, r18
    7c6c:	26 95       	lsr	r18
    7c6e:	32 27       	eor	r19, r18
    7c70:	23 27       	eor	r18, r19
    7c72:	22 0f       	add	r18, r18
    7c74:	22 0f       	add	r18, r18
    7c76:	22 0f       	add	r18, r18
    7c78:	20 25       	eor	r18, r0
    7c7a:	83 81       	ldd	r24, Z+3	; 0x03
    7c7c:	28 27       	eor	r18, r24
    7c7e:	02 2e       	mov	r0, r18
    7c80:	22 95       	swap	r18
    7c82:	20 7f       	andi	r18, 0xF0	; 240
    7c84:	20 25       	eor	r18, r0
    7c86:	03 2e       	mov	r0, r19
    7c88:	32 2f       	mov	r19, r18
    7c8a:	22 95       	swap	r18
    7c8c:	2f 70       	andi	r18, 0x0F	; 15
    7c8e:	02 26       	eor	r0, r18
    7c90:	26 95       	lsr	r18
    7c92:	32 27       	eor	r19, r18
    7c94:	23 27       	eor	r18, r19
    7c96:	22 0f       	add	r18, r18
    7c98:	22 0f       	add	r18, r18
    7c9a:	22 0f       	add	r18, r18
    7c9c:	20 25       	eor	r18, r0
    7c9e:	84 81       	ldd	r24, Z+4	; 0x04
    7ca0:	28 27       	eor	r18, r24
    7ca2:	02 2e       	mov	r0, r18
    7ca4:	22 95       	swap	r18
    7ca6:	20 7f       	andi	r18, 0xF0	; 240
    7ca8:	20 25       	eor	r18, r0
    7caa:	03 2e       	mov	r0, r19
    7cac:	32 2f       	mov	r19, r18
    7cae:	22 95       	swap	r18
    7cb0:	2f 70       	andi	r18, 0x0F	; 15
    7cb2:	02 26       	eor	r0, r18
    7cb4:	26 95       	lsr	r18
    7cb6:	32 27       	eor	r19, r18
    7cb8:	23 27       	eor	r18, r19
    7cba:	22 0f       	add	r18, r18
    7cbc:	22 0f       	add	r18, r18
    7cbe:	22 0f       	add	r18, r18
    7cc0:	20 25       	eor	r18, r0
    7cc2:	85 81       	ldd	r24, Z+5	; 0x05
    7cc4:	28 27       	eor	r18, r24
    7cc6:	02 2e       	mov	r0, r18
    7cc8:	22 95       	swap	r18
    7cca:	20 7f       	andi	r18, 0xF0	; 240
    7ccc:	20 25       	eor	r18, r0
    7cce:	03 2e       	mov	r0, r19
    7cd0:	32 2f       	mov	r19, r18
    7cd2:	22 95       	swap	r18
    7cd4:	2f 70       	andi	r18, 0x0F	; 15
    7cd6:	02 26       	eor	r0, r18
    7cd8:	26 95       	lsr	r18
    7cda:	32 27       	eor	r19, r18
    7cdc:	23 27       	eor	r18, r19
    7cde:	22 0f       	add	r18, r18
    7ce0:	22 0f       	add	r18, r18
    7ce2:	22 0f       	add	r18, r18
    7ce4:	20 25       	eor	r18, r0
    7ce6:	86 81       	ldd	r24, Z+6	; 0x06
    7ce8:	28 27       	eor	r18, r24
    7cea:	02 2e       	mov	r0, r18
    7cec:	22 95       	swap	r18
    7cee:	20 7f       	andi	r18, 0xF0	; 240
    7cf0:	20 25       	eor	r18, r0
    7cf2:	03 2e       	mov	r0, r19
    7cf4:	32 2f       	mov	r19, r18
    7cf6:	22 95       	swap	r18
    7cf8:	2f 70       	andi	r18, 0x0F	; 15
    7cfa:	02 26       	eor	r0, r18
    7cfc:	26 95       	lsr	r18
    7cfe:	32 27       	eor	r19, r18
    7d00:	23 27       	eor	r18, r19
    7d02:	22 0f       	add	r18, r18
    7d04:	22 0f       	add	r18, r18
    7d06:	22 0f       	add	r18, r18
    7d08:	20 25       	eor	r18, r0
    7d0a:	87 81       	ldd	r24, Z+7	; 0x07
    7d0c:	28 27       	eor	r18, r24
    7d0e:	02 2e       	mov	r0, r18
    7d10:	22 95       	swap	r18
    7d12:	20 7f       	andi	r18, 0xF0	; 240
    7d14:	20 25       	eor	r18, r0
    7d16:	03 2e       	mov	r0, r19
    7d18:	32 2f       	mov	r19, r18
    7d1a:	22 95       	swap	r18
    7d1c:	2f 70       	andi	r18, 0x0F	; 15
    7d1e:	02 26       	eor	r0, r18
    7d20:	26 95       	lsr	r18
    7d22:	32 27       	eor	r19, r18
    7d24:	23 27       	eor	r18, r19
    7d26:	22 0f       	add	r18, r18
    7d28:	22 0f       	add	r18, r18
    7d2a:	22 0f       	add	r18, r18
    7d2c:	20 25       	eor	r18, r0
    7d2e:	80 85       	ldd	r24, Z+8	; 0x08
    7d30:	28 27       	eor	r18, r24
    7d32:	02 2e       	mov	r0, r18
    7d34:	22 95       	swap	r18
    7d36:	20 7f       	andi	r18, 0xF0	; 240
    7d38:	20 25       	eor	r18, r0
    7d3a:	03 2e       	mov	r0, r19
    7d3c:	32 2f       	mov	r19, r18
    7d3e:	22 95       	swap	r18
    7d40:	2f 70       	andi	r18, 0x0F	; 15
    7d42:	02 26       	eor	r0, r18
    7d44:	26 95       	lsr	r18
    7d46:	32 27       	eor	r19, r18
    7d48:	23 27       	eor	r18, r19
    7d4a:	22 0f       	add	r18, r18
    7d4c:	22 0f       	add	r18, r18
    7d4e:	22 0f       	add	r18, r18
    7d50:	20 25       	eor	r18, r0
    7d52:	81 85       	ldd	r24, Z+9	; 0x09
    7d54:	28 27       	eor	r18, r24
    7d56:	02 2e       	mov	r0, r18
    7d58:	22 95       	swap	r18
    7d5a:	20 7f       	andi	r18, 0xF0	; 240
    7d5c:	20 25       	eor	r18, r0
    7d5e:	03 2e       	mov	r0, r19
    7d60:	32 2f       	mov	r19, r18
    7d62:	22 95       	swap	r18
    7d64:	2f 70       	andi	r18, 0x0F	; 15
    7d66:	02 26       	eor	r0, r18
    7d68:	26 95       	lsr	r18
    7d6a:	32 27       	eor	r19, r18
    7d6c:	23 27       	eor	r18, r19
    7d6e:	22 0f       	add	r18, r18
    7d70:	22 0f       	add	r18, r18
    7d72:	22 0f       	add	r18, r18
    7d74:	20 25       	eor	r18, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    7d76:	c9 01       	movw	r24, r18
    7d78:	08 95       	ret

00007d7a <message_send>:
    7d7a:	0f b6       	in	r0, 0x3f	; 63
    7d7c:	aa b1       	in	r26, 0x0a	; 10
    7d7e:	20 91 03 01 	lds	r18, 0x0103
    7d82:	2a 2b       	or	r18, r26
    7d84:	2a b9       	out	0x0a, r18	; 10
    7d86:	21 e0       	ldi	r18, 0x01	; 1
    7d88:	30 91 03 01 	lds	r19, 0x0103
    7d8c:	20 30       	cpi	r18, 0x00	; 0
    7d8e:	29 f0       	breq	.+10     	; 0x7d9a <message_send+0x20>
    7d90:	00 00       	nop
    7d92:	2b b1       	in	r18, 0x0b	; 11
    7d94:	23 2b       	or	r18, r19
    7d96:	2b b9       	out	0x0b, r18	; 11
    7d98:	04 c0       	rjmp	.+8      	; 0x7da2 <message_send+0x28>
    7d9a:	00 00       	nop
    7d9c:	00 00       	nop
    7d9e:	00 00       	nop
    7da0:	00 c0       	rjmp	.+0      	; 0x7da2 <message_send+0x28>
    7da2:	00 00       	nop
    7da4:	00 00       	nop
    7da6:	00 00       	nop
    7da8:	30 95       	com	r19
    7daa:	2b b1       	in	r18, 0x0b	; 11
    7dac:	23 23       	and	r18, r19
    7dae:	2b b9       	out	0x0b, r18	; 11
    7db0:	2e ea       	ldi	r18, 0xAE	; 174
    7db2:	2a 95       	dec	r18
    7db4:	f1 f7       	brne	.-4      	; 0x7db2 <message_send+0x38>
    7db6:	2b ee       	ldi	r18, 0xEB	; 235

00007db8 <checkcollision>:
    7db8:	30 b7       	in	r19, 0x30	; 48
    7dba:	35 ff       	sbrs	r19, 5
    7dbc:	0a c0       	rjmp	.+20     	; 0x7dd2 <nocollision>
    7dbe:	aa b9       	out	0x0a, r26	; 10
    7dc0:	30 91 03 01 	lds	r19, 0x0103
    7dc4:	30 95       	com	r19
    7dc6:	2b b1       	in	r18, 0x0b	; 11
    7dc8:	23 23       	and	r18, r19
    7dca:	2b b9       	out	0x0b, r18	; 11
    7dcc:	0f be       	out	0x3f, r0	; 63
    7dce:	80 e0       	ldi	r24, 0x00	; 0
    7dd0:	08 95       	ret

00007dd2 <nocollision>:
    7dd2:	00 00       	nop
    7dd4:	2a 95       	dec	r18
    7dd6:	81 f7       	brne	.-32     	; 0x7db8 <checkcollision>
    7dd8:	21 e0       	ldi	r18, 0x01	; 1
    7dda:	30 91 03 01 	lds	r19, 0x0103
    7dde:	20 30       	cpi	r18, 0x00	; 0
    7de0:	29 f0       	breq	.+10     	; 0x7dec <nocollision+0x1a>
    7de2:	00 00       	nop
    7de4:	2b b1       	in	r18, 0x0b	; 11
    7de6:	23 2b       	or	r18, r19
    7de8:	2b b9       	out	0x0b, r18	; 11
    7dea:	04 c0       	rjmp	.+8      	; 0x7df4 <nocollision+0x22>
    7dec:	00 00       	nop
    7dee:	00 00       	nop
    7df0:	00 00       	nop
    7df2:	00 c0       	rjmp	.+0      	; 0x7df4 <nocollision+0x22>
    7df4:	00 00       	nop
    7df6:	00 00       	nop
    7df8:	00 00       	nop
    7dfa:	30 95       	com	r19
    7dfc:	2b b1       	in	r18, 0x0b	; 11
    7dfe:	23 23       	and	r18, r19
    7e00:	2b b9       	out	0x0b, r18	; 11
    7e02:	00 00       	nop
    7e04:	24 e5       	ldi	r18, 0x54	; 84
    7e06:	2a 95       	dec	r18
    7e08:	f1 f7       	brne	.-4      	; 0x7e06 <nocollision+0x34>
    7e0a:	fc 01       	movw	r30, r24
    7e0c:	8c e0       	ldi	r24, 0x0C	; 12

00007e0e <sendbyte>:
    7e0e:	61 91       	ld	r22, Z+
    7e10:	70 e0       	ldi	r23, 0x00	; 0
    7e12:	66 0f       	add	r22, r22
    7e14:	77 1f       	adc	r23, r23
    7e16:	61 60       	ori	r22, 0x01	; 1
    7e18:	72 60       	ori	r23, 0x02	; 2
    7e1a:	9a e0       	ldi	r25, 0x0A	; 10
    7e1c:	41 e0       	ldi	r20, 0x01	; 1
    7e1e:	50 e0       	ldi	r21, 0x00	; 0

00007e20 <sendbit>:
    7e20:	9a 01       	movw	r18, r20
    7e22:	26 23       	and	r18, r22
    7e24:	37 23       	and	r19, r23
    7e26:	23 2b       	or	r18, r19
    7e28:	30 91 03 01 	lds	r19, 0x0103
    7e2c:	20 30       	cpi	r18, 0x00	; 0
    7e2e:	29 f0       	breq	.+10     	; 0x7e3a <sendbit+0x1a>
    7e30:	00 00       	nop
    7e32:	2b b1       	in	r18, 0x0b	; 11
    7e34:	23 2b       	or	r18, r19
    7e36:	2b b9       	out	0x0b, r18	; 11
    7e38:	04 c0       	rjmp	.+8      	; 0x7e42 <sendbit+0x22>
    7e3a:	00 00       	nop
    7e3c:	00 00       	nop
    7e3e:	00 00       	nop
    7e40:	00 c0       	rjmp	.+0      	; 0x7e42 <sendbit+0x22>
    7e42:	00 00       	nop
    7e44:	00 00       	nop
    7e46:	00 00       	nop
    7e48:	30 95       	com	r19
    7e4a:	2b b1       	in	r18, 0x0b	; 11
    7e4c:	23 23       	and	r18, r19
    7e4e:	2b b9       	out	0x0b, r18	; 11
    7e50:	00 00       	nop
    7e52:	21 e5       	ldi	r18, 0x51	; 81
    7e54:	2a 95       	dec	r18
    7e56:	f1 f7       	brne	.-4      	; 0x7e54 <sendbit+0x34>
    7e58:	44 0f       	add	r20, r20
    7e5a:	55 1f       	adc	r21, r21
    7e5c:	9a 95       	dec	r25
    7e5e:	01 f7       	brne	.-64     	; 0x7e20 <sendbit>
    7e60:	8a 95       	dec	r24
    7e62:	a9 f6       	brne	.-86     	; 0x7e0e <sendbyte>
    7e64:	20 b7       	in	r18, 0x30	; 48
    7e66:	20 61       	ori	r18, 0x10	; 16
    7e68:	20 bf       	out	0x30, r18	; 48
    7e6a:	aa b9       	out	0x0a, r26	; 10
    7e6c:	30 91 03 01 	lds	r19, 0x0103
    7e70:	30 95       	com	r19
    7e72:	2b b1       	in	r18, 0x0b	; 11
    7e74:	23 23       	and	r18, r19
    7e76:	2b b9       	out	0x0b, r18	; 11
    7e78:	0f be       	out	0x3f, r0	; 63
    7e7a:	81 e0       	ldi	r24, 0x01	; 1
    7e7c:	08 95       	ret

00007e7e <_exit>:
    7e7e:	f8 94       	cli

00007e80 <__stop_program>:
    7e80:	ff cf       	rjmp	.-2      	; 0x7e80 <__stop_program>
