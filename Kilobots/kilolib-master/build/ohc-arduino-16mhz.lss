
build/ohc-arduino-16mhz.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  88:	0c 94 41 07 	jmp	0xe82	; 0xe82 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
    uint8_t rx = UDR0;
  ae:	80 91 c6 00 	lds	r24, 0x00C6

    packet_checksum ^= packet_buffer[packet_head];
  b2:	20 91 00 01 	lds	r18, 0x0100
  b6:	e2 2f       	mov	r30, r18
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	eb 5f       	subi	r30, 0xFB	; 251
  bc:	fe 4f       	sbci	r31, 0xFE	; 254
  be:	90 81       	ld	r25, Z
  c0:	30 91 01 01 	lds	r19, 0x0101
    packet_buffer[packet_head] = rx;
  c4:	80 83       	st	Z, r24
    packet_checksum ^= rx;
  c6:	38 27       	eor	r19, r24
  c8:	39 27       	eor	r19, r25
  ca:	30 93 01 01 	sts	0x0101, r19
    packet_head++;
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	20 93 00 01 	sts	0x0100, r18
    if (packet_head >= PACKET_SIZE)
  d4:	24 38       	cpi	r18, 0x84	; 132
  d6:	18 f0       	brcs	.+6      	; 0xde <__vector_18+0x4e>
        packet_head = 0;
  d8:	10 92 00 01 	sts	0x0100, r1
  dc:	20 e0       	ldi	r18, 0x00	; 0

    if (packet_buffer[packet_head] == PACKET_HEADER) {
  de:	e2 2f       	mov	r30, r18
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	df 01       	movw	r26, r30
  e4:	ab 5f       	subi	r26, 0xFB	; 251
  e6:	be 4f       	sbci	r27, 0xFE	; 254
  e8:	8c 91       	ld	r24, X
  ea:	85 35       	cpi	r24, 0x55	; 85
  ec:	79 f0       	breq	.+30     	; 0x10c <__vector_18+0x7c>
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
            packet_type = new_packet[1];
        }
    }
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti
    packet_head++;
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
 10c:	33 23       	and	r19, r19
 10e:	79 f7       	brne	.-34     	; 0xee <__vector_18+0x5e>
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
 110:	44 e8       	ldi	r20, 0x84	; 132
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	4e 1b       	sub	r20, r30
 116:	5f 0b       	sbc	r21, r31
            for (i = 0; i < num; i++)
 118:	01 f1       	breq	.+64     	; 0x15a <__vector_18+0xca>
 11a:	e8 e9       	ldi	r30, 0x98	; 152
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	9a 01       	movw	r18, r20
 120:	2e 0f       	add	r18, r30
 122:	3f 1f       	adc	r19, r31
                new_packet[i] = packet_buffer[i+packet_head];
 124:	8d 91       	ld	r24, X+
 126:	81 93       	st	Z+, r24

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
 128:	e2 17       	cp	r30, r18
 12a:	f3 07       	cpc	r31, r19
 12c:	d9 f7       	brne	.-10     	; 0x124 <__vector_18+0x94>
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
 12e:	44 38       	cpi	r20, 0x84	; 132
 130:	51 05       	cpc	r21, r1
 132:	58 f4       	brcc	.+22     	; 0x14a <__vector_18+0xba>

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
 134:	a5 e0       	ldi	r26, 0x05	; 5
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	f9 01       	movw	r30, r18
 13a:	9a 01       	movw	r18, r20
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
                new_packet[i] = packet_buffer[i-num];
 13c:	8d 91       	ld	r24, X+
 13e:	81 93       	st	Z+, r24
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	24 38       	cpi	r18, 0x84	; 132
 146:	31 05       	cpc	r19, r1
 148:	c8 f3       	brcs	.-14     	; 0x13c <__vector_18+0xac>
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 02 01 	sts	0x0102, r24
            packet_type = new_packet[1];
 150:	80 91 99 01 	lds	r24, 0x0199
 154:	80 93 97 01 	sts	0x0197, r24
 158:	ca cf       	rjmp	.-108    	; 0xee <__vector_18+0x5e>
 15a:	28 e9       	ldi	r18, 0x98	; 152
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	ea cf       	rjmp	.-44     	; 0x134 <__vector_18+0xa4>

00000160 <main>:
#define led_port PORTB
#define led_ddr DDRB
#define led_mask (1<<1)
#endif

int main() {
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
    cli();
 16a:	f8 94       	cli
    // Set port outputs
    ir_ddr |= ir_mask;
 16c:	21 9a       	sbi	0x04, 1	; 4
    led_ddr |= led_mask;
 16e:	25 9a       	sbi	0x04, 5	; 4
    // Turn off all leds
    led_port &= ~led_mask;
 170:	2d 98       	cbi	0x05, 5	; 5
    ir_port &= ~ir_mask;
 172:	29 98       	cbi	0x05, 1	; 5
    // turn off analog comparator (to avoid detecting collisions)
    ACSR |= (1<<ACD);
 174:	80 b7       	in	r24, 0x30	; 48
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 bf       	out	0x30, r24	; 48
    //move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    MCUCR = (1<<IVSEL);
#endif
#ifdef ARDUINO_16MHZ
    CLKPR = (1<<CLKPCE);
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	80 93 61 00 	sts	0x0061, r24
    CLKPR = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 61 00 	sts	0x0061, r24
#endif

#define BAUD 38400
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 c5 00 	sts	0x00C5, r25
 18e:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
 192:	80 91 c0 00 	lds	r24, 0x00C0
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	80 93 c0 00 	sts	0x00C0, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
 19c:	80 91 c2 00 	lds	r24, 0x00C2
 1a0:	86 60       	ori	r24, 0x06	; 6
 1a2:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
 1a6:	80 91 c1 00 	lds	r24, 0x00C1
 1aa:	88 69       	ori	r24, 0x98	; 152
 1ac:	80 93 c1 00 	sts	0x00C1, r24
    sei();
 1b0:	78 94       	sei

    tx_mask = ir_mask;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 03 01 	sts	0x0103, r24
    bootmsg = (bootmsg_t*)msg.data;
 1b8:	8b e8       	ldi	r24, 0x8B	; 139
 1ba:	e8 2e       	mov	r14, r24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	f8 2e       	mov	r15, r24
 1c0:	f0 92 8a 01 	sts	0x018A, r15
 1c4:	e0 92 89 01 	sts	0x0189, r14
    gpsmsg = (gpsmsg_t*)msg.data;
 1c8:	f0 92 1f 02 	sts	0x021F, r15
 1cc:	e0 92 1e 02 	sts	0x021E, r14
    rawmsg = (uint8_t*)&msg;
 1d0:	f0 92 1d 02 	sts	0x021D, r15
 1d4:	e0 92 1c 02 	sts	0x021C, r14
 1d8:	64 e0       	ldi	r22, 0x04	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	48 ec       	ldi	r20, 0xC8	; 200
 1dc:	50 e0       	ldi	r21, 0x00	; 0

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
        led_port |= led_mask;
 1de:	2d 9a       	sbi	0x05, 5	; 5
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	ca 01       	movw	r24, r20
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x86>
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	20 3d       	cpi	r18, 0xD0	; 208
 1f2:	38 07       	cpc	r19, r24
 1f4:	b9 f7       	brne	.-18     	; 0x1e4 <main+0x84>
        _delay_ms(200);
        led_port &= ~led_mask;
 1f6:	2d 98       	cbi	0x05, 5	; 5
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	ca 01       	movw	r24, r20
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x9e>
 202:	2f 5f       	subi	r18, 0xFF	; 255
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	e7 e0       	ldi	r30, 0x07	; 7
 208:	20 3d       	cpi	r18, 0xD0	; 208
 20a:	3e 07       	cpc	r19, r30
 20c:	b9 f7       	brne	.-18     	; 0x1fc <main+0x9c>
 20e:	61 50       	subi	r22, 0x01	; 1
 210:	30 f7       	brcc	.-52     	; 0x1de <main+0x7e>
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 212:	80 91 02 01 	lds	r24, 0x0102
 216:	88 23       	and	r24, r24
 218:	e1 f3       	breq	.-8      	; 0x212 <main+0xb2>
            has_new_packet = 0;
 21a:	10 92 02 01 	sts	0x0102, r1
            switch(packet_type) {
 21e:	80 91 97 01 	lds	r24, 0x0197
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	09 f4       	brne	.+2      	; 0x228 <main+0xc8>
 226:	7a c4       	rjmp	.+2292   	; 0xb1c <__stack+0x21d>
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	08 f0       	brcs	.+2      	; 0x22e <main+0xce>
 22c:	70 c0       	rjmp	.+224    	; 0x30e <main+0x1ae>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	09 f4       	brne	.+2      	; 0x234 <main+0xd4>
 232:	62 c4       	rjmp	.+2244   	; 0xaf8 <__stack+0x1f9>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	69 f7       	brne	.-38     	; 0x212 <main+0xb2>
                    led_port &= ~led_mask;
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
 238:	e0 91 1c 02 	lds	r30, 0x021C
 23c:	f0 91 1d 02 	lds	r31, 0x021D
 240:	80 91 9a 01 	lds	r24, 0x019A
 244:	80 83       	st	Z, r24
 246:	e0 91 1c 02 	lds	r30, 0x021C
 24a:	f0 91 1d 02 	lds	r31, 0x021D
 24e:	80 91 9b 01 	lds	r24, 0x019B
 252:	81 83       	std	Z+1, r24	; 0x01
 254:	e0 91 1c 02 	lds	r30, 0x021C
 258:	f0 91 1d 02 	lds	r31, 0x021D
 25c:	80 91 9c 01 	lds	r24, 0x019C
 260:	82 83       	std	Z+2, r24	; 0x02
 262:	e0 91 1c 02 	lds	r30, 0x021C
 266:	f0 91 1d 02 	lds	r31, 0x021D
 26a:	80 91 9d 01 	lds	r24, 0x019D
 26e:	83 83       	std	Z+3, r24	; 0x03
 270:	e0 91 1c 02 	lds	r30, 0x021C
 274:	f0 91 1d 02 	lds	r31, 0x021D
 278:	80 91 9e 01 	lds	r24, 0x019E
 27c:	84 83       	std	Z+4, r24	; 0x04
 27e:	e0 91 1c 02 	lds	r30, 0x021C
 282:	f0 91 1d 02 	lds	r31, 0x021D
 286:	80 91 9f 01 	lds	r24, 0x019F
 28a:	85 83       	std	Z+5, r24	; 0x05
 28c:	e0 91 1c 02 	lds	r30, 0x021C
 290:	f0 91 1d 02 	lds	r31, 0x021D
 294:	80 91 a0 01 	lds	r24, 0x01A0
 298:	86 83       	std	Z+6, r24	; 0x06
 29a:	e0 91 1c 02 	lds	r30, 0x021C
 29e:	f0 91 1d 02 	lds	r31, 0x021D
 2a2:	80 91 a1 01 	lds	r24, 0x01A1
 2a6:	87 83       	std	Z+7, r24	; 0x07
 2a8:	e0 91 1c 02 	lds	r30, 0x021C
 2ac:	f0 91 1d 02 	lds	r31, 0x021D
 2b0:	80 91 a2 01 	lds	r24, 0x01A2
 2b4:	80 87       	std	Z+8, r24	; 0x08
 2b6:	e0 91 1c 02 	lds	r30, 0x021C
 2ba:	f0 91 1d 02 	lds	r31, 0x021D
 2be:	80 91 a3 01 	lds	r24, 0x01A3
 2c2:	81 87       	std	Z+9, r24	; 0x09
                msg.crc = message_crc(&msg);
 2c4:	8b e8       	ldi	r24, 0x8B	; 139
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 2cc:	90 93 96 01 	sts	0x0196, r25
 2d0:	80 93 95 01 	sts	0x0195, r24
                while(!has_new_packet) {
 2d4:	80 91 02 01 	lds	r24, 0x0102
 2d8:	88 23       	and	r24, r24
 2da:	09 f0       	breq	.+2      	; 0x2de <main+0x17e>
 2dc:	9a cf       	rjmp	.-204    	; 0x212 <main+0xb2>
 2de:	c0 e7       	ldi	r28, 0x70	; 112
 2e0:	d7 e1       	ldi	r29, 0x17	; 23
                    message_send(&msg);
 2e2:	8b e8       	ldi	r24, 0x8B	; 139
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
                    led_port |= led_mask;
 2ea:	2d 9a       	sbi	0x05, 5	; 5
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x18e>
                    _delay_ms(3);
                    led_port &= ~led_mask;
 2f2:	2d 98       	cbi	0x05, 5	; 5
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x196>
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
                while(!has_new_packet) {
 2fa:	80 91 02 01 	lds	r24, 0x0102
 2fe:	88 23       	and	r24, r24
 300:	81 f3       	breq	.-32     	; 0x2e2 <main+0x182>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 302:	80 91 02 01 	lds	r24, 0x0102
 306:	88 23       	and	r24, r24
 308:	09 f4       	brne	.+2      	; 0x30c <main+0x1ac>
 30a:	83 cf       	rjmp	.-250    	; 0x212 <main+0xb2>
 30c:	86 cf       	rjmp	.-244    	; 0x21a <main+0xba>
            has_new_packet = 0;
            switch(packet_type) {
 30e:	85 30       	cpi	r24, 0x05	; 5
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x1b4>
 312:	a8 c0       	rjmp	.+336    	; 0x464 <main+0x304>
 314:	85 30       	cpi	r24, 0x05	; 5
 316:	08 f4       	brcc	.+2      	; 0x31a <main+0x1ba>
 318:	64 c0       	rjmp	.+200    	; 0x3e2 <main+0x282>
 31a:	86 30       	cpi	r24, 0x06	; 6
 31c:	09 f0       	breq	.+2      	; 0x320 <main+0x1c0>
 31e:	79 cf       	rjmp	.-270    	; 0x212 <main+0xb2>
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
 320:	e0 91 1c 02 	lds	r30, 0x021C
 324:	f0 91 1d 02 	lds	r31, 0x021D
 328:	80 91 9a 01 	lds	r24, 0x019A
 32c:	80 83       	st	Z, r24
 32e:	e0 91 1c 02 	lds	r30, 0x021C
 332:	f0 91 1d 02 	lds	r31, 0x021D
 336:	80 91 9b 01 	lds	r24, 0x019B
 33a:	81 83       	std	Z+1, r24	; 0x01
 33c:	e0 91 1c 02 	lds	r30, 0x021C
 340:	f0 91 1d 02 	lds	r31, 0x021D
 344:	80 91 9c 01 	lds	r24, 0x019C
 348:	82 83       	std	Z+2, r24	; 0x02
 34a:	e0 91 1c 02 	lds	r30, 0x021C
 34e:	f0 91 1d 02 	lds	r31, 0x021D
 352:	80 91 9d 01 	lds	r24, 0x019D
 356:	83 83       	std	Z+3, r24	; 0x03
 358:	e0 91 1c 02 	lds	r30, 0x021C
 35c:	f0 91 1d 02 	lds	r31, 0x021D
 360:	80 91 9e 01 	lds	r24, 0x019E
 364:	84 83       	std	Z+4, r24	; 0x04
 366:	e0 91 1c 02 	lds	r30, 0x021C
 36a:	f0 91 1d 02 	lds	r31, 0x021D
 36e:	80 91 9f 01 	lds	r24, 0x019F
 372:	85 83       	std	Z+5, r24	; 0x05
 374:	e0 91 1c 02 	lds	r30, 0x021C
 378:	f0 91 1d 02 	lds	r31, 0x021D
 37c:	80 91 a0 01 	lds	r24, 0x01A0
 380:	86 83       	std	Z+6, r24	; 0x06
 382:	e0 91 1c 02 	lds	r30, 0x021C
 386:	f0 91 1d 02 	lds	r31, 0x021D
 38a:	80 91 a1 01 	lds	r24, 0x01A1
 38e:	87 83       	std	Z+7, r24	; 0x07
 390:	e0 91 1c 02 	lds	r30, 0x021C
 394:	f0 91 1d 02 	lds	r31, 0x021D
 398:	80 91 a2 01 	lds	r24, 0x01A2
 39c:	80 87       	std	Z+8, r24	; 0x08
 39e:	e0 91 1c 02 	lds	r30, 0x021C
 3a2:	f0 91 1d 02 	lds	r31, 0x021D
 3a6:	80 91 a3 01 	lds	r24, 0x01A3
 3aa:	81 87       	std	Z+9, r24	; 0x09
                msg.crc = message_crc(&msg);
 3ac:	8b e8       	ldi	r24, 0x8B	; 139
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 3b4:	90 93 96 01 	sts	0x0196, r25
 3b8:	80 93 95 01 	sts	0x0195, r24
                message_send(&msg);
 3bc:	8b e8       	ldi	r24, 0x8B	; 139
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
                led_port |= led_mask;
 3c4:	2d 9a       	sbi	0x05, 5	; 5
 3c6:	80 e7       	ldi	r24, 0x70	; 112
 3c8:	97 e1       	ldi	r25, 0x17	; 23
 3ca:	fc 01       	movw	r30, r24
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x26c>
                _delay_ms(3);
                led_port &= ~led_mask;
 3d0:	2d 98       	cbi	0x05, 5	; 5
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x272>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 3d6:	80 91 02 01 	lds	r24, 0x0102
 3da:	88 23       	and	r24, r24
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <main+0x280>
 3de:	19 cf       	rjmp	.-462    	; 0x212 <main+0xb2>
 3e0:	1c cf       	rjmp	.-456    	; 0x21a <main+0xba>
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
 3e2:	81 e8       	ldi	r24, 0x81	; 129
 3e4:	80 93 94 01 	sts	0x0194, r24
                bootmsg->page_address = new_packet[2];
 3e8:	e0 91 89 01 	lds	r30, 0x0189
 3ec:	f0 91 8a 01 	lds	r31, 0x018A
 3f0:	80 91 9a 01 	lds	r24, 0x019A
 3f4:	80 83       	st	Z, r24
                bootmsg->unused = 0;
 3f6:	10 86       	std	Z+8, r1	; 0x08
                cli();
 3f8:	f8 94       	cli
 3fa:	cb e9       	ldi	r28, 0x9B	; 155
 3fc:	d1 e0       	ldi	r29, 0x01	; 1
 3fe:	10 e0       	ldi	r17, 0x00	; 0
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 400:	80 91 02 01 	lds	r24, 0x0102
 404:	88 23       	and	r24, r24
 406:	f1 f4       	brne	.+60     	; 0x444 <main+0x2e4>
                    bootmsg->page_offset = i/2;
 408:	e0 91 89 01 	lds	r30, 0x0189
 40c:	f0 91 8a 01 	lds	r31, 0x018A
 410:	81 2f       	mov	r24, r17
 412:	86 95       	lsr	r24
 414:	81 83       	std	Z+1, r24	; 0x01
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
 416:	32 96       	adiw	r30, 0x02	; 2
 418:	de 01       	movw	r26, r28
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	0d 90       	ld	r0, X+
 41e:	01 92       	st	Z+, r0
 420:	81 50       	subi	r24, 0x01	; 1
 422:	e1 f7       	brne	.-8      	; 0x41c <main+0x2bc>
                    msg.crc = message_crc(&msg);
 424:	8b e8       	ldi	r24, 0x8B	; 139
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 42c:	90 93 96 01 	sts	0x0196, r25
 430:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 434:	8b e8       	ldi	r24, 0x8B	; 139
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
                bootmsg->page_address = new_packet[2];
                bootmsg->unused = 0;
                cli();
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 43c:	1a 5f       	subi	r17, 0xFA	; 250
 43e:	26 96       	adiw	r28, 0x06	; 6
 440:	14 38       	cpi	r17, 0x84	; 132
 442:	f1 f6       	brne	.-68     	; 0x400 <main+0x2a0>
                    bootmsg->page_offset = i/2;
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                }
                sei();
 444:	78 94       	sei
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                    _delay_us(50);
                }
                sei();
                led_port |= led_mask;
 446:	2d 9a       	sbi	0x05, 5	; 5
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	fc 01       	movw	r30, r24
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <main+0x2ee>
                _delay_ms(10);
                led_port &= ~led_mask;
 452:	2d 98       	cbi	0x05, 5	; 5
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <main+0x2f4>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 458:	80 91 02 01 	lds	r24, 0x0102
 45c:	88 23       	and	r24, r24
 45e:	09 f4       	brne	.+2      	; 0x462 <main+0x302>
 460:	d8 ce       	rjmp	.-592    	; 0x212 <main+0xb2>
 462:	db ce       	rjmp	.-586    	; 0x21a <main+0xba>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 464:	8a e0       	ldi	r24, 0x0A	; 10
 466:	f7 01       	movw	r30, r14
 468:	11 92       	st	Z+, r1
 46a:	8a 95       	dec	r24
 46c:	e9 f7       	brne	.-6      	; 0x468 <main+0x308>
                msg.type = GPS;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 94 01 	sts	0x0194, r24
                cli();
 474:	f8 94       	cli
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 476:	20 91 1e 02 	lds	r18, 0x021E
 47a:	30 91 1f 02 	lds	r19, 0x021F
 47e:	c9 01       	movw	r24, r18
 480:	dc 01       	movw	r26, r24
 482:	ea e9       	ldi	r30, 0x9A	; 154
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	01 90       	ld	r0, Z+
 48a:	0d 92       	st	X+, r0
 48c:	81 50       	subi	r24, 0x01	; 1
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0x328>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 490:	e0 91 1e 02 	lds	r30, 0x021E
 494:	f0 91 1f 02 	lds	r31, 0x021F
 498:	80 81       	ld	r24, Z
 49a:	91 81       	ldd	r25, Z+1	; 0x01
 49c:	89 2b       	or	r24, r25
 49e:	81 f4       	brne	.+32     	; 0x4c0 <main+0x360>
 4a0:	82 81       	ldd	r24, Z+2	; 0x02
 4a2:	93 81       	ldd	r25, Z+3	; 0x03
 4a4:	89 2b       	or	r24, r25
 4a6:	61 f4       	brne	.+24     	; 0x4c0 <main+0x360>
 4a8:	84 81       	ldd	r24, Z+4	; 0x04
 4aa:	95 81       	ldd	r25, Z+5	; 0x05
 4ac:	89 2b       	or	r24, r25
 4ae:	41 f4       	brne	.+16     	; 0x4c0 <main+0x360>
 4b0:	86 81       	ldd	r24, Z+6	; 0x06
 4b2:	88 23       	and	r24, r24
 4b4:	29 f4       	brne	.+10     	; 0x4c0 <main+0x360>
 4b6:	87 81       	ldd	r24, Z+7	; 0x07
 4b8:	90 85       	ldd	r25, Z+8	; 0x08
 4ba:	89 2b       	or	r24, r25
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <main+0x360>
 4be:	1a c3       	rjmp	.+1588   	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 4c0:	8b e8       	ldi	r24, 0x8B	; 139
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 4c8:	90 93 96 01 	sts	0x0196, r25
 4cc:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 4d0:	8b e8       	ldi	r24, 0x8B	; 139
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4d8:	85 e8       	ldi	r24, 0x85	; 133
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <main+0x37a>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 4de:	80 91 1e 02 	lds	r24, 0x021E
 4e2:	90 91 1f 02 	lds	r25, 0x021F
 4e6:	9c 01       	movw	r18, r24
 4e8:	d9 01       	movw	r26, r18
 4ea:	e2 ea       	ldi	r30, 0xA2	; 162
 4ec:	f1 e0       	ldi	r31, 0x01	; 1
 4ee:	88 e0       	ldi	r24, 0x08	; 8
 4f0:	01 90       	ld	r0, Z+
 4f2:	0d 92       	st	X+, r0
 4f4:	81 50       	subi	r24, 0x01	; 1
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x390>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 4f8:	e0 91 1e 02 	lds	r30, 0x021E
 4fc:	f0 91 1f 02 	lds	r31, 0x021F
 500:	80 81       	ld	r24, Z
 502:	91 81       	ldd	r25, Z+1	; 0x01
 504:	89 2b       	or	r24, r25
 506:	81 f4       	brne	.+32     	; 0x528 <main+0x3c8>
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	93 81       	ldd	r25, Z+3	; 0x03
 50c:	89 2b       	or	r24, r25
 50e:	61 f4       	brne	.+24     	; 0x528 <main+0x3c8>
 510:	84 81       	ldd	r24, Z+4	; 0x04
 512:	95 81       	ldd	r25, Z+5	; 0x05
 514:	89 2b       	or	r24, r25
 516:	41 f4       	brne	.+16     	; 0x528 <main+0x3c8>
 518:	86 81       	ldd	r24, Z+6	; 0x06
 51a:	88 23       	and	r24, r24
 51c:	29 f4       	brne	.+10     	; 0x528 <main+0x3c8>
 51e:	87 81       	ldd	r24, Z+7	; 0x07
 520:	90 85       	ldd	r25, Z+8	; 0x08
 522:	89 2b       	or	r24, r25
 524:	09 f4       	brne	.+2      	; 0x528 <main+0x3c8>
 526:	e6 c2       	rjmp	.+1484   	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 528:	8b e8       	ldi	r24, 0x8B	; 139
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 530:	90 93 96 01 	sts	0x0196, r25
 534:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 538:	8b e8       	ldi	r24, 0x8B	; 139
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 540:	85 e8       	ldi	r24, 0x85	; 133
 542:	8a 95       	dec	r24
 544:	f1 f7       	brne	.-4      	; 0x542 <main+0x3e2>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 546:	80 91 1e 02 	lds	r24, 0x021E
 54a:	90 91 1f 02 	lds	r25, 0x021F
 54e:	9c 01       	movw	r18, r24
 550:	d9 01       	movw	r26, r18
 552:	ea ea       	ldi	r30, 0xAA	; 170
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	01 90       	ld	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	81 50       	subi	r24, 0x01	; 1
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x3f8>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 560:	e0 91 1e 02 	lds	r30, 0x021E
 564:	f0 91 1f 02 	lds	r31, 0x021F
 568:	80 81       	ld	r24, Z
 56a:	91 81       	ldd	r25, Z+1	; 0x01
 56c:	89 2b       	or	r24, r25
 56e:	81 f4       	brne	.+32     	; 0x590 <main+0x430>
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	93 81       	ldd	r25, Z+3	; 0x03
 574:	89 2b       	or	r24, r25
 576:	61 f4       	brne	.+24     	; 0x590 <main+0x430>
 578:	84 81       	ldd	r24, Z+4	; 0x04
 57a:	95 81       	ldd	r25, Z+5	; 0x05
 57c:	89 2b       	or	r24, r25
 57e:	41 f4       	brne	.+16     	; 0x590 <main+0x430>
 580:	86 81       	ldd	r24, Z+6	; 0x06
 582:	88 23       	and	r24, r24
 584:	29 f4       	brne	.+10     	; 0x590 <main+0x430>
 586:	87 81       	ldd	r24, Z+7	; 0x07
 588:	90 85       	ldd	r25, Z+8	; 0x08
 58a:	89 2b       	or	r24, r25
 58c:	09 f4       	brne	.+2      	; 0x590 <main+0x430>
 58e:	b2 c2       	rjmp	.+1380   	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 590:	8b e8       	ldi	r24, 0x8B	; 139
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 598:	90 93 96 01 	sts	0x0196, r25
 59c:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 5a0:	8b e8       	ldi	r24, 0x8B	; 139
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 5a8:	85 e8       	ldi	r24, 0x85	; 133
 5aa:	8a 95       	dec	r24
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <main+0x44a>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 5ae:	80 91 1e 02 	lds	r24, 0x021E
 5b2:	90 91 1f 02 	lds	r25, 0x021F
 5b6:	9c 01       	movw	r18, r24
 5b8:	d9 01       	movw	r26, r18
 5ba:	e2 eb       	ldi	r30, 0xB2	; 178
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	88 e0       	ldi	r24, 0x08	; 8
 5c0:	01 90       	ld	r0, Z+
 5c2:	0d 92       	st	X+, r0
 5c4:	81 50       	subi	r24, 0x01	; 1
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <main+0x460>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 5c8:	e0 91 1e 02 	lds	r30, 0x021E
 5cc:	f0 91 1f 02 	lds	r31, 0x021F
 5d0:	80 81       	ld	r24, Z
 5d2:	91 81       	ldd	r25, Z+1	; 0x01
 5d4:	89 2b       	or	r24, r25
 5d6:	81 f4       	brne	.+32     	; 0x5f8 <main+0x498>
 5d8:	82 81       	ldd	r24, Z+2	; 0x02
 5da:	93 81       	ldd	r25, Z+3	; 0x03
 5dc:	89 2b       	or	r24, r25
 5de:	61 f4       	brne	.+24     	; 0x5f8 <main+0x498>
 5e0:	84 81       	ldd	r24, Z+4	; 0x04
 5e2:	95 81       	ldd	r25, Z+5	; 0x05
 5e4:	89 2b       	or	r24, r25
 5e6:	41 f4       	brne	.+16     	; 0x5f8 <main+0x498>
 5e8:	86 81       	ldd	r24, Z+6	; 0x06
 5ea:	88 23       	and	r24, r24
 5ec:	29 f4       	brne	.+10     	; 0x5f8 <main+0x498>
 5ee:	87 81       	ldd	r24, Z+7	; 0x07
 5f0:	90 85       	ldd	r25, Z+8	; 0x08
 5f2:	89 2b       	or	r24, r25
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <main+0x498>
 5f6:	7e c2       	rjmp	.+1276   	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 5f8:	8b e8       	ldi	r24, 0x8B	; 139
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 600:	90 93 96 01 	sts	0x0196, r25
 604:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 608:	8b e8       	ldi	r24, 0x8B	; 139
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 610:	85 e8       	ldi	r24, 0x85	; 133
 612:	8a 95       	dec	r24
 614:	f1 f7       	brne	.-4      	; 0x612 <main+0x4b2>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 616:	80 91 1e 02 	lds	r24, 0x021E
 61a:	90 91 1f 02 	lds	r25, 0x021F
 61e:	9c 01       	movw	r18, r24
 620:	d9 01       	movw	r26, r18
 622:	ea eb       	ldi	r30, 0xBA	; 186
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	88 e0       	ldi	r24, 0x08	; 8
 628:	01 90       	ld	r0, Z+
 62a:	0d 92       	st	X+, r0
 62c:	81 50       	subi	r24, 0x01	; 1
 62e:	e1 f7       	brne	.-8      	; 0x628 <main+0x4c8>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 630:	e0 91 1e 02 	lds	r30, 0x021E
 634:	f0 91 1f 02 	lds	r31, 0x021F
 638:	80 81       	ld	r24, Z
 63a:	91 81       	ldd	r25, Z+1	; 0x01
 63c:	89 2b       	or	r24, r25
 63e:	81 f4       	brne	.+32     	; 0x660 <main+0x500>
 640:	82 81       	ldd	r24, Z+2	; 0x02
 642:	93 81       	ldd	r25, Z+3	; 0x03
 644:	89 2b       	or	r24, r25
 646:	61 f4       	brne	.+24     	; 0x660 <main+0x500>
 648:	84 81       	ldd	r24, Z+4	; 0x04
 64a:	95 81       	ldd	r25, Z+5	; 0x05
 64c:	89 2b       	or	r24, r25
 64e:	41 f4       	brne	.+16     	; 0x660 <main+0x500>
 650:	86 81       	ldd	r24, Z+6	; 0x06
 652:	88 23       	and	r24, r24
 654:	29 f4       	brne	.+10     	; 0x660 <main+0x500>
 656:	87 81       	ldd	r24, Z+7	; 0x07
 658:	90 85       	ldd	r25, Z+8	; 0x08
 65a:	89 2b       	or	r24, r25
 65c:	09 f4       	brne	.+2      	; 0x660 <main+0x500>
 65e:	4a c2       	rjmp	.+1172   	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 660:	8b e8       	ldi	r24, 0x8B	; 139
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 668:	90 93 96 01 	sts	0x0196, r25
 66c:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 670:	8b e8       	ldi	r24, 0x8B	; 139
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 678:	85 e8       	ldi	r24, 0x85	; 133
 67a:	8a 95       	dec	r24
 67c:	f1 f7       	brne	.-4      	; 0x67a <main+0x51a>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 67e:	80 91 1e 02 	lds	r24, 0x021E
 682:	90 91 1f 02 	lds	r25, 0x021F
 686:	9c 01       	movw	r18, r24
 688:	d9 01       	movw	r26, r18
 68a:	e2 ec       	ldi	r30, 0xC2	; 194
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	88 e0       	ldi	r24, 0x08	; 8
 690:	01 90       	ld	r0, Z+
 692:	0d 92       	st	X+, r0
 694:	81 50       	subi	r24, 0x01	; 1
 696:	e1 f7       	brne	.-8      	; 0x690 <main+0x530>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 698:	e0 91 1e 02 	lds	r30, 0x021E
 69c:	f0 91 1f 02 	lds	r31, 0x021F
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
 6a4:	89 2b       	or	r24, r25
 6a6:	81 f4       	brne	.+32     	; 0x6c8 <main+0x568>
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	89 2b       	or	r24, r25
 6ae:	61 f4       	brne	.+24     	; 0x6c8 <main+0x568>
 6b0:	84 81       	ldd	r24, Z+4	; 0x04
 6b2:	95 81       	ldd	r25, Z+5	; 0x05
 6b4:	89 2b       	or	r24, r25
 6b6:	41 f4       	brne	.+16     	; 0x6c8 <main+0x568>
 6b8:	86 81       	ldd	r24, Z+6	; 0x06
 6ba:	88 23       	and	r24, r24
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <main+0x568>
 6be:	87 81       	ldd	r24, Z+7	; 0x07
 6c0:	90 85       	ldd	r25, Z+8	; 0x08
 6c2:	89 2b       	or	r24, r25
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <main+0x568>
 6c6:	16 c2       	rjmp	.+1068   	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 6c8:	8b e8       	ldi	r24, 0x8B	; 139
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 6d0:	90 93 96 01 	sts	0x0196, r25
 6d4:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 6d8:	8b e8       	ldi	r24, 0x8B	; 139
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 6e0:	85 e8       	ldi	r24, 0x85	; 133
 6e2:	8a 95       	dec	r24
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <main+0x582>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 6e6:	80 91 1e 02 	lds	r24, 0x021E
 6ea:	90 91 1f 02 	lds	r25, 0x021F
 6ee:	9c 01       	movw	r18, r24
 6f0:	d9 01       	movw	r26, r18
 6f2:	ea ec       	ldi	r30, 0xCA	; 202
 6f4:	f1 e0       	ldi	r31, 0x01	; 1
 6f6:	88 e0       	ldi	r24, 0x08	; 8
 6f8:	01 90       	ld	r0, Z+
 6fa:	0d 92       	st	X+, r0
 6fc:	81 50       	subi	r24, 0x01	; 1
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x598>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 700:	e0 91 1e 02 	lds	r30, 0x021E
 704:	f0 91 1f 02 	lds	r31, 0x021F
 708:	80 81       	ld	r24, Z
 70a:	91 81       	ldd	r25, Z+1	; 0x01
 70c:	89 2b       	or	r24, r25
 70e:	81 f4       	brne	.+32     	; 0x730 <main+0x5d0>
 710:	82 81       	ldd	r24, Z+2	; 0x02
 712:	93 81       	ldd	r25, Z+3	; 0x03
 714:	89 2b       	or	r24, r25
 716:	61 f4       	brne	.+24     	; 0x730 <main+0x5d0>
 718:	84 81       	ldd	r24, Z+4	; 0x04
 71a:	95 81       	ldd	r25, Z+5	; 0x05
 71c:	89 2b       	or	r24, r25
 71e:	41 f4       	brne	.+16     	; 0x730 <main+0x5d0>
 720:	86 81       	ldd	r24, Z+6	; 0x06
 722:	88 23       	and	r24, r24
 724:	29 f4       	brne	.+10     	; 0x730 <main+0x5d0>
 726:	87 81       	ldd	r24, Z+7	; 0x07
 728:	90 85       	ldd	r25, Z+8	; 0x08
 72a:	89 2b       	or	r24, r25
 72c:	09 f4       	brne	.+2      	; 0x730 <main+0x5d0>
 72e:	e2 c1       	rjmp	.+964    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 730:	8b e8       	ldi	r24, 0x8B	; 139
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 738:	90 93 96 01 	sts	0x0196, r25
 73c:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 740:	8b e8       	ldi	r24, 0x8B	; 139
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 748:	85 e8       	ldi	r24, 0x85	; 133
 74a:	8a 95       	dec	r24
 74c:	f1 f7       	brne	.-4      	; 0x74a <main+0x5ea>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 74e:	80 91 1e 02 	lds	r24, 0x021E
 752:	90 91 1f 02 	lds	r25, 0x021F
 756:	9c 01       	movw	r18, r24
 758:	d9 01       	movw	r26, r18
 75a:	e2 ed       	ldi	r30, 0xD2	; 210
 75c:	f1 e0       	ldi	r31, 0x01	; 1
 75e:	88 e0       	ldi	r24, 0x08	; 8
 760:	01 90       	ld	r0, Z+
 762:	0d 92       	st	X+, r0
 764:	81 50       	subi	r24, 0x01	; 1
 766:	e1 f7       	brne	.-8      	; 0x760 <main+0x600>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 768:	e0 91 1e 02 	lds	r30, 0x021E
 76c:	f0 91 1f 02 	lds	r31, 0x021F
 770:	80 81       	ld	r24, Z
 772:	91 81       	ldd	r25, Z+1	; 0x01
 774:	89 2b       	or	r24, r25
 776:	81 f4       	brne	.+32     	; 0x798 <main+0x638>
 778:	82 81       	ldd	r24, Z+2	; 0x02
 77a:	93 81       	ldd	r25, Z+3	; 0x03
 77c:	89 2b       	or	r24, r25
 77e:	61 f4       	brne	.+24     	; 0x798 <main+0x638>
 780:	84 81       	ldd	r24, Z+4	; 0x04
 782:	95 81       	ldd	r25, Z+5	; 0x05
 784:	89 2b       	or	r24, r25
 786:	41 f4       	brne	.+16     	; 0x798 <main+0x638>
 788:	86 81       	ldd	r24, Z+6	; 0x06
 78a:	88 23       	and	r24, r24
 78c:	29 f4       	brne	.+10     	; 0x798 <main+0x638>
 78e:	87 81       	ldd	r24, Z+7	; 0x07
 790:	90 85       	ldd	r25, Z+8	; 0x08
 792:	89 2b       	or	r24, r25
 794:	09 f4       	brne	.+2      	; 0x798 <main+0x638>
 796:	ae c1       	rjmp	.+860    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 798:	8b e8       	ldi	r24, 0x8B	; 139
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 7a0:	90 93 96 01 	sts	0x0196, r25
 7a4:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 7a8:	8b e8       	ldi	r24, 0x8B	; 139
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 7b0:	85 e8       	ldi	r24, 0x85	; 133
 7b2:	8a 95       	dec	r24
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <main+0x652>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 7b6:	80 91 1e 02 	lds	r24, 0x021E
 7ba:	90 91 1f 02 	lds	r25, 0x021F
 7be:	9c 01       	movw	r18, r24
 7c0:	d9 01       	movw	r26, r18
 7c2:	ea ed       	ldi	r30, 0xDA	; 218
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
 7c6:	88 e0       	ldi	r24, 0x08	; 8
 7c8:	01 90       	ld	r0, Z+
 7ca:	0d 92       	st	X+, r0
 7cc:	81 50       	subi	r24, 0x01	; 1
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <main+0x668>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 7d0:	e0 91 1e 02 	lds	r30, 0x021E
 7d4:	f0 91 1f 02 	lds	r31, 0x021F
 7d8:	80 81       	ld	r24, Z
 7da:	91 81       	ldd	r25, Z+1	; 0x01
 7dc:	89 2b       	or	r24, r25
 7de:	81 f4       	brne	.+32     	; 0x800 <main+0x6a0>
 7e0:	82 81       	ldd	r24, Z+2	; 0x02
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	89 2b       	or	r24, r25
 7e6:	61 f4       	brne	.+24     	; 0x800 <main+0x6a0>
 7e8:	84 81       	ldd	r24, Z+4	; 0x04
 7ea:	95 81       	ldd	r25, Z+5	; 0x05
 7ec:	89 2b       	or	r24, r25
 7ee:	41 f4       	brne	.+16     	; 0x800 <main+0x6a0>
 7f0:	86 81       	ldd	r24, Z+6	; 0x06
 7f2:	88 23       	and	r24, r24
 7f4:	29 f4       	brne	.+10     	; 0x800 <main+0x6a0>
 7f6:	87 81       	ldd	r24, Z+7	; 0x07
 7f8:	90 85       	ldd	r25, Z+8	; 0x08
 7fa:	89 2b       	or	r24, r25
 7fc:	09 f4       	brne	.+2      	; 0x800 <main+0x6a0>
 7fe:	7a c1       	rjmp	.+756    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 800:	8b e8       	ldi	r24, 0x8B	; 139
 802:	91 e0       	ldi	r25, 0x01	; 1
 804:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 808:	90 93 96 01 	sts	0x0196, r25
 80c:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 810:	8b e8       	ldi	r24, 0x8B	; 139
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 818:	85 e8       	ldi	r24, 0x85	; 133
 81a:	8a 95       	dec	r24
 81c:	f1 f7       	brne	.-4      	; 0x81a <main+0x6ba>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 81e:	80 91 1e 02 	lds	r24, 0x021E
 822:	90 91 1f 02 	lds	r25, 0x021F
 826:	9c 01       	movw	r18, r24
 828:	d9 01       	movw	r26, r18
 82a:	e2 ee       	ldi	r30, 0xE2	; 226
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	88 e0       	ldi	r24, 0x08	; 8
 830:	01 90       	ld	r0, Z+
 832:	0d 92       	st	X+, r0
 834:	81 50       	subi	r24, 0x01	; 1
 836:	e1 f7       	brne	.-8      	; 0x830 <main+0x6d0>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 838:	e0 91 1e 02 	lds	r30, 0x021E
 83c:	f0 91 1f 02 	lds	r31, 0x021F
 840:	80 81       	ld	r24, Z
 842:	91 81       	ldd	r25, Z+1	; 0x01
 844:	89 2b       	or	r24, r25
 846:	81 f4       	brne	.+32     	; 0x868 <main+0x708>
 848:	82 81       	ldd	r24, Z+2	; 0x02
 84a:	93 81       	ldd	r25, Z+3	; 0x03
 84c:	89 2b       	or	r24, r25
 84e:	61 f4       	brne	.+24     	; 0x868 <main+0x708>
 850:	84 81       	ldd	r24, Z+4	; 0x04
 852:	95 81       	ldd	r25, Z+5	; 0x05
 854:	89 2b       	or	r24, r25
 856:	41 f4       	brne	.+16     	; 0x868 <main+0x708>
 858:	86 81       	ldd	r24, Z+6	; 0x06
 85a:	88 23       	and	r24, r24
 85c:	29 f4       	brne	.+10     	; 0x868 <main+0x708>
 85e:	87 81       	ldd	r24, Z+7	; 0x07
 860:	90 85       	ldd	r25, Z+8	; 0x08
 862:	89 2b       	or	r24, r25
 864:	09 f4       	brne	.+2      	; 0x868 <main+0x708>
 866:	46 c1       	rjmp	.+652    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 868:	8b e8       	ldi	r24, 0x8B	; 139
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 870:	90 93 96 01 	sts	0x0196, r25
 874:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 878:	8b e8       	ldi	r24, 0x8B	; 139
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 880:	85 e8       	ldi	r24, 0x85	; 133
 882:	8a 95       	dec	r24
 884:	f1 f7       	brne	.-4      	; 0x882 <main+0x722>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 886:	80 91 1e 02 	lds	r24, 0x021E
 88a:	90 91 1f 02 	lds	r25, 0x021F
 88e:	9c 01       	movw	r18, r24
 890:	d9 01       	movw	r26, r18
 892:	ea ee       	ldi	r30, 0xEA	; 234
 894:	f1 e0       	ldi	r31, 0x01	; 1
 896:	88 e0       	ldi	r24, 0x08	; 8
 898:	01 90       	ld	r0, Z+
 89a:	0d 92       	st	X+, r0
 89c:	81 50       	subi	r24, 0x01	; 1
 89e:	e1 f7       	brne	.-8      	; 0x898 <main+0x738>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 8a0:	e0 91 1e 02 	lds	r30, 0x021E
 8a4:	f0 91 1f 02 	lds	r31, 0x021F
 8a8:	80 81       	ld	r24, Z
 8aa:	91 81       	ldd	r25, Z+1	; 0x01
 8ac:	89 2b       	or	r24, r25
 8ae:	81 f4       	brne	.+32     	; 0x8d0 <main+0x770>
 8b0:	82 81       	ldd	r24, Z+2	; 0x02
 8b2:	93 81       	ldd	r25, Z+3	; 0x03
 8b4:	89 2b       	or	r24, r25
 8b6:	61 f4       	brne	.+24     	; 0x8d0 <main+0x770>
 8b8:	84 81       	ldd	r24, Z+4	; 0x04
 8ba:	95 81       	ldd	r25, Z+5	; 0x05
 8bc:	89 2b       	or	r24, r25
 8be:	41 f4       	brne	.+16     	; 0x8d0 <main+0x770>
 8c0:	86 81       	ldd	r24, Z+6	; 0x06
 8c2:	88 23       	and	r24, r24
 8c4:	29 f4       	brne	.+10     	; 0x8d0 <main+0x770>
 8c6:	87 81       	ldd	r24, Z+7	; 0x07
 8c8:	90 85       	ldd	r25, Z+8	; 0x08
 8ca:	89 2b       	or	r24, r25
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <main+0x770>
 8ce:	12 c1       	rjmp	.+548    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 8d0:	8b e8       	ldi	r24, 0x8B	; 139
 8d2:	91 e0       	ldi	r25, 0x01	; 1
 8d4:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 8d8:	90 93 96 01 	sts	0x0196, r25
 8dc:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 8e0:	8b e8       	ldi	r24, 0x8B	; 139
 8e2:	91 e0       	ldi	r25, 0x01	; 1
 8e4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 8e8:	85 e8       	ldi	r24, 0x85	; 133
 8ea:	8a 95       	dec	r24
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <main+0x78a>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 8ee:	80 91 1e 02 	lds	r24, 0x021E
 8f2:	90 91 1f 02 	lds	r25, 0x021F
 8f6:	9c 01       	movw	r18, r24
 8f8:	d9 01       	movw	r26, r18
 8fa:	e2 ef       	ldi	r30, 0xF2	; 242
 8fc:	f1 e0       	ldi	r31, 0x01	; 1
 8fe:	88 e0       	ldi	r24, 0x08	; 8
 900:	01 90       	ld	r0, Z+
 902:	0d 92       	st	X+, r0
 904:	81 50       	subi	r24, 0x01	; 1
 906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0x1>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 908:	e0 91 1e 02 	lds	r30, 0x021E
 90c:	f0 91 1f 02 	lds	r31, 0x021F
 910:	80 81       	ld	r24, Z
 912:	91 81       	ldd	r25, Z+1	; 0x01
 914:	89 2b       	or	r24, r25
 916:	81 f4       	brne	.+32     	; 0x938 <__stack+0x39>
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	89 2b       	or	r24, r25
 91e:	61 f4       	brne	.+24     	; 0x938 <__stack+0x39>
 920:	84 81       	ldd	r24, Z+4	; 0x04
 922:	95 81       	ldd	r25, Z+5	; 0x05
 924:	89 2b       	or	r24, r25
 926:	41 f4       	brne	.+16     	; 0x938 <__stack+0x39>
 928:	86 81       	ldd	r24, Z+6	; 0x06
 92a:	88 23       	and	r24, r24
 92c:	29 f4       	brne	.+10     	; 0x938 <__stack+0x39>
 92e:	87 81       	ldd	r24, Z+7	; 0x07
 930:	90 85       	ldd	r25, Z+8	; 0x08
 932:	89 2b       	or	r24, r25
 934:	09 f4       	brne	.+2      	; 0x938 <__stack+0x39>
 936:	de c0       	rjmp	.+444    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 938:	8b e8       	ldi	r24, 0x8B	; 139
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 940:	90 93 96 01 	sts	0x0196, r25
 944:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 948:	8b e8       	ldi	r24, 0x8B	; 139
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 950:	85 e8       	ldi	r24, 0x85	; 133
 952:	8a 95       	dec	r24
 954:	f1 f7       	brne	.-4      	; 0x952 <__stack+0x53>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 956:	80 91 1e 02 	lds	r24, 0x021E
 95a:	90 91 1f 02 	lds	r25, 0x021F
 95e:	9c 01       	movw	r18, r24
 960:	d9 01       	movw	r26, r18
 962:	ea ef       	ldi	r30, 0xFA	; 250
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	88 e0       	ldi	r24, 0x08	; 8
 968:	01 90       	ld	r0, Z+
 96a:	0d 92       	st	X+, r0
 96c:	81 50       	subi	r24, 0x01	; 1
 96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x69>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 970:	e0 91 1e 02 	lds	r30, 0x021E
 974:	f0 91 1f 02 	lds	r31, 0x021F
 978:	80 81       	ld	r24, Z
 97a:	91 81       	ldd	r25, Z+1	; 0x01
 97c:	89 2b       	or	r24, r25
 97e:	81 f4       	brne	.+32     	; 0x9a0 <__stack+0xa1>
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	89 2b       	or	r24, r25
 986:	61 f4       	brne	.+24     	; 0x9a0 <__stack+0xa1>
 988:	84 81       	ldd	r24, Z+4	; 0x04
 98a:	95 81       	ldd	r25, Z+5	; 0x05
 98c:	89 2b       	or	r24, r25
 98e:	41 f4       	brne	.+16     	; 0x9a0 <__stack+0xa1>
 990:	86 81       	ldd	r24, Z+6	; 0x06
 992:	88 23       	and	r24, r24
 994:	29 f4       	brne	.+10     	; 0x9a0 <__stack+0xa1>
 996:	87 81       	ldd	r24, Z+7	; 0x07
 998:	90 85       	ldd	r25, Z+8	; 0x08
 99a:	89 2b       	or	r24, r25
 99c:	09 f4       	brne	.+2      	; 0x9a0 <__stack+0xa1>
 99e:	aa c0       	rjmp	.+340    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 9a0:	8b e8       	ldi	r24, 0x8B	; 139
 9a2:	91 e0       	ldi	r25, 0x01	; 1
 9a4:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 9a8:	90 93 96 01 	sts	0x0196, r25
 9ac:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 9b0:	8b e8       	ldi	r24, 0x8B	; 139
 9b2:	91 e0       	ldi	r25, 0x01	; 1
 9b4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 9b8:	85 e8       	ldi	r24, 0x85	; 133
 9ba:	8a 95       	dec	r24
 9bc:	f1 f7       	brne	.-4      	; 0x9ba <__stack+0xbb>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 9be:	80 91 1e 02 	lds	r24, 0x021E
 9c2:	90 91 1f 02 	lds	r25, 0x021F
 9c6:	9c 01       	movw	r18, r24
 9c8:	d9 01       	movw	r26, r18
 9ca:	e2 e0       	ldi	r30, 0x02	; 2
 9cc:	f2 e0       	ldi	r31, 0x02	; 2
 9ce:	88 e0       	ldi	r24, 0x08	; 8
 9d0:	01 90       	ld	r0, Z+
 9d2:	0d 92       	st	X+, r0
 9d4:	81 50       	subi	r24, 0x01	; 1
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <__stack+0xd1>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 9d8:	e0 91 1e 02 	lds	r30, 0x021E
 9dc:	f0 91 1f 02 	lds	r31, 0x021F
 9e0:	80 81       	ld	r24, Z
 9e2:	91 81       	ldd	r25, Z+1	; 0x01
 9e4:	89 2b       	or	r24, r25
 9e6:	81 f4       	brne	.+32     	; 0xa08 <__stack+0x109>
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	89 2b       	or	r24, r25
 9ee:	61 f4       	brne	.+24     	; 0xa08 <__stack+0x109>
 9f0:	84 81       	ldd	r24, Z+4	; 0x04
 9f2:	95 81       	ldd	r25, Z+5	; 0x05
 9f4:	89 2b       	or	r24, r25
 9f6:	41 f4       	brne	.+16     	; 0xa08 <__stack+0x109>
 9f8:	86 81       	ldd	r24, Z+6	; 0x06
 9fa:	88 23       	and	r24, r24
 9fc:	29 f4       	brne	.+10     	; 0xa08 <__stack+0x109>
 9fe:	87 81       	ldd	r24, Z+7	; 0x07
 a00:	90 85       	ldd	r25, Z+8	; 0x08
 a02:	89 2b       	or	r24, r25
 a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x109>
 a06:	76 c0       	rjmp	.+236    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 a08:	8b e8       	ldi	r24, 0x8B	; 139
 a0a:	91 e0       	ldi	r25, 0x01	; 1
 a0c:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 a10:	90 93 96 01 	sts	0x0196, r25
 a14:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 a18:	8b e8       	ldi	r24, 0x8B	; 139
 a1a:	91 e0       	ldi	r25, 0x01	; 1
 a1c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 a20:	85 e8       	ldi	r24, 0x85	; 133
 a22:	8a 95       	dec	r24
 a24:	f1 f7       	brne	.-4      	; 0xa22 <__stack+0x123>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 a26:	80 91 1e 02 	lds	r24, 0x021E
 a2a:	90 91 1f 02 	lds	r25, 0x021F
 a2e:	9c 01       	movw	r18, r24
 a30:	d9 01       	movw	r26, r18
 a32:	ea e0       	ldi	r30, 0x0A	; 10
 a34:	f2 e0       	ldi	r31, 0x02	; 2
 a36:	88 e0       	ldi	r24, 0x08	; 8
 a38:	01 90       	ld	r0, Z+
 a3a:	0d 92       	st	X+, r0
 a3c:	81 50       	subi	r24, 0x01	; 1
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <__stack+0x139>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 a40:	e0 91 1e 02 	lds	r30, 0x021E
 a44:	f0 91 1f 02 	lds	r31, 0x021F
 a48:	80 81       	ld	r24, Z
 a4a:	91 81       	ldd	r25, Z+1	; 0x01
 a4c:	89 2b       	or	r24, r25
 a4e:	81 f4       	brne	.+32     	; 0xa70 <__stack+0x171>
 a50:	82 81       	ldd	r24, Z+2	; 0x02
 a52:	93 81       	ldd	r25, Z+3	; 0x03
 a54:	89 2b       	or	r24, r25
 a56:	61 f4       	brne	.+24     	; 0xa70 <__stack+0x171>
 a58:	84 81       	ldd	r24, Z+4	; 0x04
 a5a:	95 81       	ldd	r25, Z+5	; 0x05
 a5c:	89 2b       	or	r24, r25
 a5e:	41 f4       	brne	.+16     	; 0xa70 <__stack+0x171>
 a60:	86 81       	ldd	r24, Z+6	; 0x06
 a62:	88 23       	and	r24, r24
 a64:	29 f4       	brne	.+10     	; 0xa70 <__stack+0x171>
 a66:	87 81       	ldd	r24, Z+7	; 0x07
 a68:	90 85       	ldd	r25, Z+8	; 0x08
 a6a:	89 2b       	or	r24, r25
 a6c:	09 f4       	brne	.+2      	; 0xa70 <__stack+0x171>
 a6e:	42 c0       	rjmp	.+132    	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 a70:	8b e8       	ldi	r24, 0x8B	; 139
 a72:	91 e0       	ldi	r25, 0x01	; 1
 a74:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 a78:	90 93 96 01 	sts	0x0196, r25
 a7c:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 a80:	8b e8       	ldi	r24, 0x8B	; 139
 a82:	91 e0       	ldi	r25, 0x01	; 1
 a84:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 a88:	85 e8       	ldi	r24, 0x85	; 133
 a8a:	8a 95       	dec	r24
 a8c:	f1 f7       	brne	.-4      	; 0xa8a <__stack+0x18b>
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 a8e:	80 91 1e 02 	lds	r24, 0x021E
 a92:	90 91 1f 02 	lds	r25, 0x021F
 a96:	9c 01       	movw	r18, r24
 a98:	d9 01       	movw	r26, r18
 a9a:	e2 e1       	ldi	r30, 0x12	; 18
 a9c:	f2 e0       	ldi	r31, 0x02	; 2
 a9e:	88 e0       	ldi	r24, 0x08	; 8
 aa0:	01 90       	ld	r0, Z+
 aa2:	0d 92       	st	X+, r0
 aa4:	81 50       	subi	r24, 0x01	; 1
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <__stack+0x1a1>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 aa8:	e0 91 1e 02 	lds	r30, 0x021E
 aac:	f0 91 1f 02 	lds	r31, 0x021F
 ab0:	80 81       	ld	r24, Z
 ab2:	91 81       	ldd	r25, Z+1	; 0x01
 ab4:	89 2b       	or	r24, r25
 ab6:	79 f4       	brne	.+30     	; 0xad6 <__stack+0x1d7>
 ab8:	82 81       	ldd	r24, Z+2	; 0x02
 aba:	93 81       	ldd	r25, Z+3	; 0x03
 abc:	89 2b       	or	r24, r25
 abe:	59 f4       	brne	.+22     	; 0xad6 <__stack+0x1d7>
 ac0:	84 81       	ldd	r24, Z+4	; 0x04
 ac2:	95 81       	ldd	r25, Z+5	; 0x05
 ac4:	89 2b       	or	r24, r25
 ac6:	39 f4       	brne	.+14     	; 0xad6 <__stack+0x1d7>
 ac8:	86 81       	ldd	r24, Z+6	; 0x06
 aca:	88 23       	and	r24, r24
 acc:	21 f4       	brne	.+8      	; 0xad6 <__stack+0x1d7>
 ace:	87 81       	ldd	r24, Z+7	; 0x07
 ad0:	90 85       	ldd	r25, Z+8	; 0x08
 ad2:	89 2b       	or	r24, r25
 ad4:	79 f0       	breq	.+30     	; 0xaf4 <__stack+0x1f5>
                        break;
                    msg.crc = message_crc(&msg);
 ad6:	8b e8       	ldi	r24, 0x8B	; 139
 ad8:	91 e0       	ldi	r25, 0x01	; 1
 ada:	0e 94 06 06 	call	0xc0c	; 0xc0c <message_crc>
 ade:	90 93 96 01 	sts	0x0196, r25
 ae2:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 ae6:	8b e8       	ldi	r24, 0x8B	; 139
 ae8:	91 e0       	ldi	r25, 0x01	; 1
 aea:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
 aee:	85 e8       	ldi	r24, 0x85	; 133
 af0:	8a 95       	dec	r24
 af2:	f1 f7       	brne	.-4      	; 0xaf0 <__stack+0x1f1>
                    _delay_us(50);
                }
                sei();
 af4:	78 94       	sei
 af6:	a7 cc       	rjmp	.-1714   	; 0x446 <main+0x2e6>
            has_new_packet = 0;
            switch(packet_type) {
            case PACKET_STOP:
                break;
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	80 91 04 01 	lds	r24, 0x0104
 afe:	88 23       	and	r24, r24
 b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x205>
 b02:	91 e0       	ldi	r25, 0x01	; 1
 b04:	90 93 04 01 	sts	0x0104, r25
                if (leds_toggle) {
 b08:	99 23       	and	r25, r25
 b0a:	09 f4       	brne	.+2      	; 0xb0e <__stack+0x20f>
 b0c:	78 c0       	rjmp	.+240    	; 0xbfe <__stack+0x2ff>
                    led_port |= led_mask;
 b0e:	2d 9a       	sbi	0x05, 5	; 5
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 b10:	80 91 02 01 	lds	r24, 0x0102
 b14:	88 23       	and	r24, r24
 b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x21b>
 b18:	7c cb       	rjmp	.-2312   	; 0x212 <main+0xb2>
 b1a:	7f cb       	rjmp	.-2306   	; 0x21a <main+0xba>
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
 b1c:	e0 91 1c 02 	lds	r30, 0x021C
 b20:	f0 91 1d 02 	lds	r31, 0x021D
 b24:	80 91 9a 01 	lds	r24, 0x019A
 b28:	80 83       	st	Z, r24
 b2a:	e0 91 1c 02 	lds	r30, 0x021C
 b2e:	f0 91 1d 02 	lds	r31, 0x021D
 b32:	80 91 9b 01 	lds	r24, 0x019B
 b36:	81 83       	std	Z+1, r24	; 0x01
 b38:	e0 91 1c 02 	lds	r30, 0x021C
 b3c:	f0 91 1d 02 	lds	r31, 0x021D
 b40:	80 91 9c 01 	lds	r24, 0x019C
 b44:	82 83       	std	Z+2, r24	; 0x02
 b46:	e0 91 1c 02 	lds	r30, 0x021C
 b4a:	f0 91 1d 02 	lds	r31, 0x021D
 b4e:	80 91 9d 01 	lds	r24, 0x019D
 b52:	83 83       	std	Z+3, r24	; 0x03
 b54:	e0 91 1c 02 	lds	r30, 0x021C
 b58:	f0 91 1d 02 	lds	r31, 0x021D
 b5c:	80 91 9e 01 	lds	r24, 0x019E
 b60:	84 83       	std	Z+4, r24	; 0x04
 b62:	e0 91 1c 02 	lds	r30, 0x021C
 b66:	f0 91 1d 02 	lds	r31, 0x021D
 b6a:	80 91 9f 01 	lds	r24, 0x019F
 b6e:	85 83       	std	Z+5, r24	; 0x05
 b70:	e0 91 1c 02 	lds	r30, 0x021C
 b74:	f0 91 1d 02 	lds	r31, 0x021D
 b78:	80 91 a0 01 	lds	r24, 0x01A0
 b7c:	86 83       	std	Z+6, r24	; 0x06
 b7e:	e0 91 1c 02 	lds	r30, 0x021C
 b82:	f0 91 1d 02 	lds	r31, 0x021D
 b86:	80 91 a1 01 	lds	r24, 0x01A1
 b8a:	87 83       	std	Z+7, r24	; 0x07
 b8c:	e0 91 1c 02 	lds	r30, 0x021C
 b90:	f0 91 1d 02 	lds	r31, 0x021D
 b94:	80 91 a2 01 	lds	r24, 0x01A2
 b98:	80 87       	std	Z+8, r24	; 0x08
 b9a:	e0 91 1c 02 	lds	r30, 0x021C
 b9e:	f0 91 1d 02 	lds	r31, 0x021D
 ba2:	80 91 a3 01 	lds	r24, 0x01A3
 ba6:	81 87       	std	Z+9, r24	; 0x09
 ba8:	e0 91 1c 02 	lds	r30, 0x021C
 bac:	f0 91 1d 02 	lds	r31, 0x021D
 bb0:	80 91 a4 01 	lds	r24, 0x01A4
 bb4:	82 87       	std	Z+10, r24	; 0x0a
 bb6:	e0 91 1c 02 	lds	r30, 0x021C
 bba:	f0 91 1d 02 	lds	r31, 0x021D
 bbe:	80 91 a5 01 	lds	r24, 0x01A5
 bc2:	83 87       	std	Z+11, r24	; 0x0b
                while(!has_new_packet) {
 bc4:	80 91 02 01 	lds	r24, 0x0102
 bc8:	88 23       	and	r24, r24
 bca:	09 f0       	breq	.+2      	; 0xbce <__stack+0x2cf>
 bcc:	22 cb       	rjmp	.-2492   	; 0x212 <main+0xb2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 bce:	c0 e7       	ldi	r28, 0x70	; 112
 bd0:	d7 e1       	ldi	r29, 0x17	; 23
                    message_send(&msg);
 bd2:	8b e8       	ldi	r24, 0x8B	; 139
 bd4:	91 e0       	ldi	r25, 0x01	; 1
 bd6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <message_send>
                    led_port |= led_mask;
 bda:	2d 9a       	sbi	0x05, 5	; 5
 bdc:	ce 01       	movw	r24, r28
 bde:	01 97       	sbiw	r24, 0x01	; 1
 be0:	f1 f7       	brne	.-4      	; 0xbde <__stack+0x2df>
                    _delay_ms(3);
                    led_port &= ~led_mask;
 be2:	2d 98       	cbi	0x05, 5	; 5
 be4:	ce 01       	movw	r24, r28
 be6:	01 97       	sbiw	r24, 0x01	; 1
 be8:	f1 f7       	brne	.-4      	; 0xbe6 <__stack+0x2e7>
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
                while(!has_new_packet) {
 bea:	80 91 02 01 	lds	r24, 0x0102
 bee:	88 23       	and	r24, r24
 bf0:	81 f3       	breq	.-32     	; 0xbd2 <__stack+0x2d3>
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 bf2:	80 91 02 01 	lds	r24, 0x0102
 bf6:	88 23       	and	r24, r24
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__stack+0x2fd>
 bfa:	0b cb       	rjmp	.-2538   	; 0x212 <main+0xb2>
 bfc:	0e cb       	rjmp	.-2532   	; 0x21a <main+0xba>
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
                if (leds_toggle) {
                    led_port |= led_mask;
                } else {
                    led_port &= ~led_mask;
 bfe:	2d 98       	cbi	0x05, 5	; 5
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 c00:	80 91 02 01 	lds	r24, 0x0102
 c04:	88 23       	and	r24, r24
 c06:	09 f4       	brne	.+2      	; 0xc0a <__stack+0x30b>
 c08:	04 cb       	rjmp	.-2552   	; 0x212 <main+0xb2>
 c0a:	07 cb       	rjmp	.-2546   	; 0x21a <main+0xba>

00000c0c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
 c0c:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 c0e:	80 81       	ld	r24, Z
 c10:	2f ef       	ldi	r18, 0xFF	; 255
 c12:	3f ef       	ldi	r19, 0xFF	; 255
 c14:	28 27       	eor	r18, r24
 c16:	02 2e       	mov	r0, r18
 c18:	22 95       	swap	r18
 c1a:	20 7f       	andi	r18, 0xF0	; 240
 c1c:	20 25       	eor	r18, r0
 c1e:	03 2e       	mov	r0, r19
 c20:	32 2f       	mov	r19, r18
 c22:	22 95       	swap	r18
 c24:	2f 70       	andi	r18, 0x0F	; 15
 c26:	02 26       	eor	r0, r18
 c28:	26 95       	lsr	r18
 c2a:	32 27       	eor	r19, r18
 c2c:	23 27       	eor	r18, r19
 c2e:	22 0f       	add	r18, r18
 c30:	22 0f       	add	r18, r18
 c32:	22 0f       	add	r18, r18
 c34:	20 25       	eor	r18, r0
 c36:	81 81       	ldd	r24, Z+1	; 0x01
 c38:	28 27       	eor	r18, r24
 c3a:	02 2e       	mov	r0, r18
 c3c:	22 95       	swap	r18
 c3e:	20 7f       	andi	r18, 0xF0	; 240
 c40:	20 25       	eor	r18, r0
 c42:	03 2e       	mov	r0, r19
 c44:	32 2f       	mov	r19, r18
 c46:	22 95       	swap	r18
 c48:	2f 70       	andi	r18, 0x0F	; 15
 c4a:	02 26       	eor	r0, r18
 c4c:	26 95       	lsr	r18
 c4e:	32 27       	eor	r19, r18
 c50:	23 27       	eor	r18, r19
 c52:	22 0f       	add	r18, r18
 c54:	22 0f       	add	r18, r18
 c56:	22 0f       	add	r18, r18
 c58:	20 25       	eor	r18, r0
 c5a:	82 81       	ldd	r24, Z+2	; 0x02
 c5c:	28 27       	eor	r18, r24
 c5e:	02 2e       	mov	r0, r18
 c60:	22 95       	swap	r18
 c62:	20 7f       	andi	r18, 0xF0	; 240
 c64:	20 25       	eor	r18, r0
 c66:	03 2e       	mov	r0, r19
 c68:	32 2f       	mov	r19, r18
 c6a:	22 95       	swap	r18
 c6c:	2f 70       	andi	r18, 0x0F	; 15
 c6e:	02 26       	eor	r0, r18
 c70:	26 95       	lsr	r18
 c72:	32 27       	eor	r19, r18
 c74:	23 27       	eor	r18, r19
 c76:	22 0f       	add	r18, r18
 c78:	22 0f       	add	r18, r18
 c7a:	22 0f       	add	r18, r18
 c7c:	20 25       	eor	r18, r0
 c7e:	83 81       	ldd	r24, Z+3	; 0x03
 c80:	28 27       	eor	r18, r24
 c82:	02 2e       	mov	r0, r18
 c84:	22 95       	swap	r18
 c86:	20 7f       	andi	r18, 0xF0	; 240
 c88:	20 25       	eor	r18, r0
 c8a:	03 2e       	mov	r0, r19
 c8c:	32 2f       	mov	r19, r18
 c8e:	22 95       	swap	r18
 c90:	2f 70       	andi	r18, 0x0F	; 15
 c92:	02 26       	eor	r0, r18
 c94:	26 95       	lsr	r18
 c96:	32 27       	eor	r19, r18
 c98:	23 27       	eor	r18, r19
 c9a:	22 0f       	add	r18, r18
 c9c:	22 0f       	add	r18, r18
 c9e:	22 0f       	add	r18, r18
 ca0:	20 25       	eor	r18, r0
 ca2:	84 81       	ldd	r24, Z+4	; 0x04
 ca4:	28 27       	eor	r18, r24
 ca6:	02 2e       	mov	r0, r18
 ca8:	22 95       	swap	r18
 caa:	20 7f       	andi	r18, 0xF0	; 240
 cac:	20 25       	eor	r18, r0
 cae:	03 2e       	mov	r0, r19
 cb0:	32 2f       	mov	r19, r18
 cb2:	22 95       	swap	r18
 cb4:	2f 70       	andi	r18, 0x0F	; 15
 cb6:	02 26       	eor	r0, r18
 cb8:	26 95       	lsr	r18
 cba:	32 27       	eor	r19, r18
 cbc:	23 27       	eor	r18, r19
 cbe:	22 0f       	add	r18, r18
 cc0:	22 0f       	add	r18, r18
 cc2:	22 0f       	add	r18, r18
 cc4:	20 25       	eor	r18, r0
 cc6:	85 81       	ldd	r24, Z+5	; 0x05
 cc8:	28 27       	eor	r18, r24
 cca:	02 2e       	mov	r0, r18
 ccc:	22 95       	swap	r18
 cce:	20 7f       	andi	r18, 0xF0	; 240
 cd0:	20 25       	eor	r18, r0
 cd2:	03 2e       	mov	r0, r19
 cd4:	32 2f       	mov	r19, r18
 cd6:	22 95       	swap	r18
 cd8:	2f 70       	andi	r18, 0x0F	; 15
 cda:	02 26       	eor	r0, r18
 cdc:	26 95       	lsr	r18
 cde:	32 27       	eor	r19, r18
 ce0:	23 27       	eor	r18, r19
 ce2:	22 0f       	add	r18, r18
 ce4:	22 0f       	add	r18, r18
 ce6:	22 0f       	add	r18, r18
 ce8:	20 25       	eor	r18, r0
 cea:	86 81       	ldd	r24, Z+6	; 0x06
 cec:	28 27       	eor	r18, r24
 cee:	02 2e       	mov	r0, r18
 cf0:	22 95       	swap	r18
 cf2:	20 7f       	andi	r18, 0xF0	; 240
 cf4:	20 25       	eor	r18, r0
 cf6:	03 2e       	mov	r0, r19
 cf8:	32 2f       	mov	r19, r18
 cfa:	22 95       	swap	r18
 cfc:	2f 70       	andi	r18, 0x0F	; 15
 cfe:	02 26       	eor	r0, r18
 d00:	26 95       	lsr	r18
 d02:	32 27       	eor	r19, r18
 d04:	23 27       	eor	r18, r19
 d06:	22 0f       	add	r18, r18
 d08:	22 0f       	add	r18, r18
 d0a:	22 0f       	add	r18, r18
 d0c:	20 25       	eor	r18, r0
 d0e:	87 81       	ldd	r24, Z+7	; 0x07
 d10:	28 27       	eor	r18, r24
 d12:	02 2e       	mov	r0, r18
 d14:	22 95       	swap	r18
 d16:	20 7f       	andi	r18, 0xF0	; 240
 d18:	20 25       	eor	r18, r0
 d1a:	03 2e       	mov	r0, r19
 d1c:	32 2f       	mov	r19, r18
 d1e:	22 95       	swap	r18
 d20:	2f 70       	andi	r18, 0x0F	; 15
 d22:	02 26       	eor	r0, r18
 d24:	26 95       	lsr	r18
 d26:	32 27       	eor	r19, r18
 d28:	23 27       	eor	r18, r19
 d2a:	22 0f       	add	r18, r18
 d2c:	22 0f       	add	r18, r18
 d2e:	22 0f       	add	r18, r18
 d30:	20 25       	eor	r18, r0
 d32:	80 85       	ldd	r24, Z+8	; 0x08
 d34:	28 27       	eor	r18, r24
 d36:	02 2e       	mov	r0, r18
 d38:	22 95       	swap	r18
 d3a:	20 7f       	andi	r18, 0xF0	; 240
 d3c:	20 25       	eor	r18, r0
 d3e:	03 2e       	mov	r0, r19
 d40:	32 2f       	mov	r19, r18
 d42:	22 95       	swap	r18
 d44:	2f 70       	andi	r18, 0x0F	; 15
 d46:	02 26       	eor	r0, r18
 d48:	26 95       	lsr	r18
 d4a:	32 27       	eor	r19, r18
 d4c:	23 27       	eor	r18, r19
 d4e:	22 0f       	add	r18, r18
 d50:	22 0f       	add	r18, r18
 d52:	22 0f       	add	r18, r18
 d54:	20 25       	eor	r18, r0
 d56:	81 85       	ldd	r24, Z+9	; 0x09
 d58:	28 27       	eor	r18, r24
 d5a:	02 2e       	mov	r0, r18
 d5c:	22 95       	swap	r18
 d5e:	20 7f       	andi	r18, 0xF0	; 240
 d60:	20 25       	eor	r18, r0
 d62:	03 2e       	mov	r0, r19
 d64:	32 2f       	mov	r19, r18
 d66:	22 95       	swap	r18
 d68:	2f 70       	andi	r18, 0x0F	; 15
 d6a:	02 26       	eor	r0, r18
 d6c:	26 95       	lsr	r18
 d6e:	32 27       	eor	r19, r18
 d70:	23 27       	eor	r18, r19
 d72:	22 0f       	add	r18, r18
 d74:	22 0f       	add	r18, r18
 d76:	22 0f       	add	r18, r18
 d78:	20 25       	eor	r18, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
 d7a:	c9 01       	movw	r24, r18
 d7c:	08 95       	ret

00000d7e <message_send>:
 d7e:	0f b6       	in	r0, 0x3f	; 63
 d80:	a4 b1       	in	r26, 0x04	; 4
 d82:	20 91 03 01 	lds	r18, 0x0103
 d86:	2a 2b       	or	r18, r26
 d88:	24 b9       	out	0x04, r18	; 4
 d8a:	21 e0       	ldi	r18, 0x01	; 1
 d8c:	30 91 03 01 	lds	r19, 0x0103
 d90:	20 30       	cpi	r18, 0x00	; 0
 d92:	29 f0       	breq	.+10     	; 0xd9e <message_send+0x20>
 d94:	00 00       	nop
 d96:	25 b1       	in	r18, 0x05	; 5
 d98:	23 2b       	or	r18, r19
 d9a:	25 b9       	out	0x05, r18	; 5
 d9c:	04 c0       	rjmp	.+8      	; 0xda6 <message_send+0x28>
 d9e:	00 00       	nop
 da0:	00 00       	nop
 da2:	00 00       	nop
 da4:	00 c0       	rjmp	.+0      	; 0xda6 <message_send+0x28>
 da6:	00 00       	nop
 da8:	00 00       	nop
 daa:	00 00       	nop
 dac:	30 95       	com	r19
 dae:	25 b1       	in	r18, 0x05	; 5
 db0:	23 23       	and	r18, r19
 db2:	25 b9       	out	0x05, r18	; 5
 db4:	2e ea       	ldi	r18, 0xAE	; 174
 db6:	2a 95       	dec	r18
 db8:	f1 f7       	brne	.-4      	; 0xdb6 <message_send+0x38>
 dba:	2b ee       	ldi	r18, 0xEB	; 235

00000dbc <checkcollision>:
 dbc:	30 b7       	in	r19, 0x30	; 48
 dbe:	35 ff       	sbrs	r19, 5
 dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <nocollision>
 dc2:	a4 b9       	out	0x04, r26	; 4
 dc4:	30 91 03 01 	lds	r19, 0x0103
 dc8:	30 95       	com	r19
 dca:	25 b1       	in	r18, 0x05	; 5
 dcc:	23 23       	and	r18, r19
 dce:	25 b9       	out	0x05, r18	; 5
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	80 e0       	ldi	r24, 0x00	; 0
 dd4:	08 95       	ret

00000dd6 <nocollision>:
 dd6:	00 00       	nop
 dd8:	2a 95       	dec	r18
 dda:	81 f7       	brne	.-32     	; 0xdbc <checkcollision>
 ddc:	21 e0       	ldi	r18, 0x01	; 1
 dde:	30 91 03 01 	lds	r19, 0x0103
 de2:	20 30       	cpi	r18, 0x00	; 0
 de4:	29 f0       	breq	.+10     	; 0xdf0 <nocollision+0x1a>
 de6:	00 00       	nop
 de8:	25 b1       	in	r18, 0x05	; 5
 dea:	23 2b       	or	r18, r19
 dec:	25 b9       	out	0x05, r18	; 5
 dee:	04 c0       	rjmp	.+8      	; 0xdf8 <nocollision+0x22>
 df0:	00 00       	nop
 df2:	00 00       	nop
 df4:	00 00       	nop
 df6:	00 c0       	rjmp	.+0      	; 0xdf8 <nocollision+0x22>
 df8:	00 00       	nop
 dfa:	00 00       	nop
 dfc:	00 00       	nop
 dfe:	30 95       	com	r19
 e00:	25 b1       	in	r18, 0x05	; 5
 e02:	23 23       	and	r18, r19
 e04:	25 b9       	out	0x05, r18	; 5
 e06:	00 00       	nop
 e08:	24 e5       	ldi	r18, 0x54	; 84
 e0a:	2a 95       	dec	r18
 e0c:	f1 f7       	brne	.-4      	; 0xe0a <nocollision+0x34>
 e0e:	fc 01       	movw	r30, r24
 e10:	8c e0       	ldi	r24, 0x0C	; 12

00000e12 <sendbyte>:
 e12:	61 91       	ld	r22, Z+
 e14:	70 e0       	ldi	r23, 0x00	; 0
 e16:	66 0f       	add	r22, r22
 e18:	77 1f       	adc	r23, r23
 e1a:	61 60       	ori	r22, 0x01	; 1
 e1c:	72 60       	ori	r23, 0x02	; 2
 e1e:	9a e0       	ldi	r25, 0x0A	; 10
 e20:	41 e0       	ldi	r20, 0x01	; 1
 e22:	50 e0       	ldi	r21, 0x00	; 0

00000e24 <sendbit>:
 e24:	9a 01       	movw	r18, r20
 e26:	26 23       	and	r18, r22
 e28:	37 23       	and	r19, r23
 e2a:	23 2b       	or	r18, r19
 e2c:	30 91 03 01 	lds	r19, 0x0103
 e30:	20 30       	cpi	r18, 0x00	; 0
 e32:	29 f0       	breq	.+10     	; 0xe3e <sendbit+0x1a>
 e34:	00 00       	nop
 e36:	25 b1       	in	r18, 0x05	; 5
 e38:	23 2b       	or	r18, r19
 e3a:	25 b9       	out	0x05, r18	; 5
 e3c:	04 c0       	rjmp	.+8      	; 0xe46 <sendbit+0x22>
 e3e:	00 00       	nop
 e40:	00 00       	nop
 e42:	00 00       	nop
 e44:	00 c0       	rjmp	.+0      	; 0xe46 <sendbit+0x22>
 e46:	00 00       	nop
 e48:	00 00       	nop
 e4a:	00 00       	nop
 e4c:	30 95       	com	r19
 e4e:	25 b1       	in	r18, 0x05	; 5
 e50:	23 23       	and	r18, r19
 e52:	25 b9       	out	0x05, r18	; 5
 e54:	00 00       	nop
 e56:	21 e5       	ldi	r18, 0x51	; 81
 e58:	2a 95       	dec	r18
 e5a:	f1 f7       	brne	.-4      	; 0xe58 <sendbit+0x34>
 e5c:	44 0f       	add	r20, r20
 e5e:	55 1f       	adc	r21, r21
 e60:	9a 95       	dec	r25
 e62:	01 f7       	brne	.-64     	; 0xe24 <sendbit>
 e64:	8a 95       	dec	r24
 e66:	a9 f6       	brne	.-86     	; 0xe12 <sendbyte>
 e68:	20 b7       	in	r18, 0x30	; 48
 e6a:	20 61       	ori	r18, 0x10	; 16
 e6c:	20 bf       	out	0x30, r18	; 48
 e6e:	a4 b9       	out	0x04, r26	; 4
 e70:	30 91 03 01 	lds	r19, 0x0103
 e74:	30 95       	com	r19
 e76:	25 b1       	in	r18, 0x05	; 5
 e78:	23 23       	and	r18, r19
 e7a:	25 b9       	out	0x05, r18	; 5
 e7c:	0f be       	out	0x3f, r0	; 63
 e7e:	81 e0       	ldi	r24, 0x01	; 1
 e80:	08 95       	ret

00000e82 <_exit>:
 e82:	f8 94       	cli

00000e84 <__stop_program>:
 e84:	ff cf       	rjmp	.-2      	; 0xe84 <__stop_program>
