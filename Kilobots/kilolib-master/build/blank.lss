
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	09 02       	muls	r16, r25
      6a:	ed 01       	movw	r28, r26
      6c:	c1 01       	movw	r24, r2
      6e:	b8 01       	movw	r22, r16
      70:	be 01       	movw	r22, r28
      72:	67 02       	muls	r22, r23
      74:	5c 02       	muls	r21, r28
      76:	dc 08       	sbc	r13, r12
      78:	bc 07       	cpc	r27, r28
      7a:	bc 07       	cpc	r27, r28
      7c:	d9 08       	sbc	r13, r9
      7e:	e5 08       	sbc	r14, r5
      80:	d5 08       	sbc	r13, r5
      82:	ec 08       	sbc	r14, r12
      84:	e8 08       	sbc	r14, r8
      86:	f0 08       	sbc	r15, r0
      88:	a8 08       	sbc	r10, r8
      8a:	7a 08       	sbc	r7, r10

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 ed       	ldi	r30, 0xD6	; 214
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 bf 0a 	call	0x157e	; 0x157e <main>
      da:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
}

message_t *message_tx()
{
    return &message;
}
      e2:	82 e1       	ldi	r24, 0x12	; 18
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:

void message_tx_success()
{
    // Set the flag on message transmission.
    message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
      f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
      f4:	08 95       	ret

000000f6 <setup>:
message_t message;
// Flag to keep track of message transmission.
int message_sent = 0;

void setup()
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
    // Initialize message:
    // The type is always NORMAL.
    message.type = NORMAL;
      fa:	c2 e1       	ldi	r28, 0x12	; 18
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
    // Some dummy data as an example.
    message.data[0] = 0;
     100:	18 82       	st	Y, r1
    // It's important that the CRC is computed after the data has been set;
    // otherwise it would be wrong and the message would be dropped by the
    // receiver.
    message.crc = message_crc(&message);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 83 09 	call	0x1306	; 0x1306 <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <loop>:

void loop()
{
    // Blink the LED magenta whenever a message is sent.
    if (message_sent == 1)
     112:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     116:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	09 f0       	breq	.+2      	; 0x120 <loop+0xe>
     11e:	08 95       	ret
    {
        // Reset the flag so the LED is only blinked once per message.
        message_sent = 0;
     120:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     124:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
        
        set_color(RGB(1, 0, 1));
     128:	81 e1       	ldi	r24, 0x11	; 17
     12a:	0e 94 36 07 	call	0xe6c	; 0xe6c <set_color>
        delay(200);
     12e:	88 ec       	ldi	r24, 0xC8	; 200
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 f6 02 	call	0x5ec	; 0x5ec <delay>
        set_color(RGB(0, 0, 0));
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <set_color>

0000013c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     13c:	08 95       	ret

0000013e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	08 95       	ret

00000144 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     144:	08 95       	ret

00000146 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
    cli();
     154:	f8 94       	cli

    ports_off();
     156:	14 b8       	out	0x04, r1	; 4
     158:	17 b8       	out	0x07, r1	; 7
     15a:	1a b8       	out	0x0a, r1	; 10
     15c:	15 b8       	out	0x05, r1	; 5
     15e:	18 b8       	out	0x08, r1	; 8
     160:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     162:	52 9a       	sbi	0x0a, 2	; 10
     164:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     166:	14 bc       	out	0x24, r1	; 36
     168:	85 e0       	ldi	r24, 0x05	; 5
     16a:	85 bd       	out	0x25, r24	; 37
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	87 bd       	out	0x27, r24	; 39
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    rx_timer_setup();
     176:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     17a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     17e:	2f e8       	ldi	r18, 0x8F	; 143
     180:	3b e0       	ldi	r19, 0x0B	; 11
     182:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     186:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     18a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    motors_setup();
     18e:	53 98       	cbi	0x0a, 3	; 10
     190:	23 98       	cbi	0x04, 3	; 4
     192:	91 ea       	ldi	r25, 0xA1	; 161
     194:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     198:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     19c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     1a0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    acomp_setup();
     1a4:	8b e0       	ldi	r24, 0x0B	; 11
     1a6:	80 bf       	out	0x30, r24	; 48
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
    adc_setup();
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1b4:	83 e8       	ldi	r24, 0x83	; 131
     1b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1be:	80 64       	ori	r24, 0x40	; 64
     1c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1c8:	86 fd       	sbrc	r24, 6
     1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1cc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1d0:	83 ea       	ldi	r24, 0xA3	; 163
     1d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
    if (osccal != 0xFF)
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	11 f0       	breq	.+4      	; 0x1ec <kilo_init+0xa6>
        OSCCAL = osccal;
     1e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

    rx_busy = 0;
     1ec:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    rx_leadingbit = 1;
     1f0:	c1 e0       	ldi	r28, 0x01	; 1
     1f2:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     1f6:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <rx_leadingbyte>
    rx_byteindex = 0;
     1fa:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
    rx_bytevalue = 0;
     1fe:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     202:	80 e9       	ldi	r24, 0x90	; 144
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     20a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     20e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tx_mask>
     212:	88 73       	andi	r24, 0x38	; 56
     214:	11 f0       	breq	.+4      	; 0x21a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     216:	c0 93 3b 01 	sts	0x013B, r28	; 0x80013b <tx_mask>
    tx_clock = 0;
     21a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     21e:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
    tx_increment = 255;
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     22a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    kilo_ticks = 0;
     22e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <kilo_ticks>
     232:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <kilo_ticks+0x1>
     236:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <kilo_ticks+0x2>
     23a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks+0x3>
    kilo_state = IDLE;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    kilo_tx_period = 3906;
     244:	82 e4       	ldi	r24, 0x42	; 66
     246:	9f e0       	ldi	r25, 0x0F	; 15
     248:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <kilo_tx_period+0x1>
     24c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     250:	80 eb       	ldi	r24, 0xB0	; 176
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     258:	c8 2f       	mov	r28, r24
     25a:	81 eb       	ldi	r24, 0xB1	; 177
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     262:	2c 2f       	mov	r18, r28
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	38 2b       	or	r19, r24
     268:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <kilo_uid+0x1>
     26c:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     278:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     27c:	89 e0       	ldi	r24, 0x09	; 9
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     284:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     288:	8c e0       	ldi	r24, 0x0C	; 12
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     290:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     294:	84 e1       	ldi	r24, 0x14	; 20
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     29c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
     2a0:	56 e4       	ldi	r21, 0x46	; 70
     2a2:	e5 2e       	mov	r14, r21
     2a4:	51 e0       	ldi	r21, 0x01	; 1
     2a6:	f5 2e       	mov	r15, r21
     2a8:	0f e1       	ldi	r16, 0x1F	; 31
     2aa:	11 e0       	ldi	r17, 0x01	; 1
     2ac:	c0 e2       	ldi	r28, 0x20	; 32
     2ae:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2b0:	ce 01       	movw	r24, r28
     2b2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     2b6:	d8 2e       	mov	r13, r24
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     2c0:	2d 2d       	mov	r18, r13
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	32 2f       	mov	r19, r18
     2c6:	22 27       	eor	r18, r18
     2c8:	28 2b       	or	r18, r24
     2ca:	f7 01       	movw	r30, r14
     2cc:	21 93       	st	Z+, r18
     2ce:	31 93       	st	Z+, r19
     2d0:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2d2:	ce 01       	movw	r24, r28
     2d4:	c0 96       	adiw	r24, 0x30	; 48
     2d6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     2da:	d8 2e       	mov	r13, r24
     2dc:	ce 01       	movw	r24, r28
     2de:	c1 96       	adiw	r24, 0x31	; 49
     2e0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <eeprom_read_byte>
     2e4:	2d 2d       	mov	r18, r13
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	32 2f       	mov	r19, r18
     2ea:	22 27       	eor	r18, r18
     2ec:	28 2b       	or	r18, r24
     2ee:	f8 01       	movw	r30, r16
     2f0:	21 93       	st	Z+, r18
     2f2:	31 93       	st	Z+, r19
     2f4:	8f 01       	movw	r16, r30
     2f6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2f8:	cc 33       	cpi	r28, 0x3C	; 60
     2fa:	d1 05       	cpc	r29, r1
     2fc:	c9 f6       	brne	.-78     	; 0x2b0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2fe:	78 94       	sei
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	08 95       	ret

00000310 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	a8 95       	wdr
     322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     326:	88 61       	ori	r24, 0x18	; 24
     328:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     32c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     330:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     33e:	3c 01       	movw	r6, r24
     340:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     342:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     344:	99 24       	eor	r9, r9
     346:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     34c:	96 e0       	ldi	r25, 0x06	; 6
     34e:	a9 2e       	mov	r10, r25
     350:	23 e8       	ldi	r18, 0x83	; 131
     352:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     354:	38 e1       	ldi	r19, 0x18	; 24
     356:	d3 2e       	mov	r13, r19
     358:	49 e2       	ldi	r20, 0x29	; 41
     35a:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     35c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	e7 30       	cpi	r30, 0x07	; 7
     364:	f1 05       	cpc	r31, r1
     366:	d0 f7       	brcc	.-12     	; 0x35c <kilo_start+0x1e>
     368:	ec 5c       	subi	r30, 0xCC	; 204
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     370:	11 23       	and	r17, r17
     372:	09 f4       	brne	.+2      	; 0x376 <kilo_start+0x38>
     374:	05 c1       	rjmp	.+522    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     376:	c0 92 11 01 	sts	0x0111, r12	; 0x800111 <kilo_state>
     37a:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     37c:	fe 01       	movw	r30, r28
     37e:	09 95       	icall
                break;
     380:	ed cf       	rjmp	.-38     	; 0x35c <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     382:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     386:	81 11       	cpse	r24, r1
     388:	05 c1       	rjmp	.+522    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
        cli();                                    // disable interrupts
     38a:	f8 94       	cli
        adc_setup_conversion(6);
     38c:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     390:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     394:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     398:	80 64       	ori	r24, 0x40	; 64
     39a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     39e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3a2:	86 fd       	sbrc	r24, 6
     3a4:	fc cf       	rjmp	.-8      	; 0x39e <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     3a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     3ae:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     3b0:	8b 3a       	cpi	r24, 0xAB	; 171
     3b2:	e2 e0       	ldi	r30, 0x02	; 2
     3b4:	9e 07       	cpc	r25, r30
     3b6:	0c f0       	brlt	.+2      	; 0x3ba <kilo_start+0x7c>
     3b8:	e6 c0       	rjmp	.+460    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     3ba:	89 38       	cpi	r24, 0x89	; 137
     3bc:	f2 e0       	ldi	r31, 0x02	; 2
     3be:	9f 07       	cpc	r25, r31
     3c0:	0c f0       	brlt	.+2      	; 0x3c4 <kilo_start+0x86>
     3c2:	ef c0       	rjmp	.+478    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     3c4:	87 36       	cpi	r24, 0x67	; 103
     3c6:	92 40       	sbci	r25, 0x02	; 2
     3c8:	0c f4       	brge	.+2      	; 0x3cc <kilo_start+0x8e>
     3ca:	e4 c0       	rjmp	.+456    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     3cc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     3ce:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3d0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3d2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3d4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3d6:	3c 98       	cbi	0x07, 4	; 7
     3d8:	c1 cf       	rjmp	.-126    	; 0x35c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     3da:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     3dc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3de:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3e0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3e2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3e4:	3c 98       	cbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e6:	ef ec       	ldi	r30, 0xCF	; 207
     3e8:	f7 e0       	ldi	r31, 0x07	; 7
     3ea:	31 97       	sbiw	r30, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <kilo_start+0xac>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <kilo_start+0xb2>
     3f0:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     3f2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     3f4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     3f6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     3f8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3fa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3fc:	3c 98       	cbi	0x07, 4	; 7
     3fe:	ff ef       	ldi	r31, 0xFF	; 255
     400:	21 ee       	ldi	r18, 0xE1	; 225
     402:	84 e0       	ldi	r24, 0x04	; 4
     404:	f1 50       	subi	r31, 0x01	; 1
     406:	20 40       	sbci	r18, 0x00	; 0
     408:	80 40       	sbci	r24, 0x00	; 0
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
     410:	a5 cf       	rjmp	.-182    	; 0x35c <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     412:	f8 94       	cli
                acomp_off();
     414:	80 b7       	in	r24, 0x30	; 48
     416:	87 7f       	andi	r24, 0xF7	; 247
     418:	80 bf       	out	0x30, r24	; 48
                adc_off();
     41a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     41e:	8f 77       	andi	r24, 0x7F	; 127
     420:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
                ports_off();
     424:	14 b8       	out	0x04, r1	; 4
     426:	17 b8       	out	0x07, r1	; 7
     428:	1a b8       	out	0x0a, r1	; 10
     42a:	15 b8       	out	0x05, r1	; 5
     42c:	18 b8       	out	0x08, r1	; 8
     42e:	1b b8       	out	0x0b, r1	; 11
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	a8 95       	wdr
     436:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     440:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     44a:	83 b7       	in	r24, 0x33	; 51
     44c:	81 7f       	andi	r24, 0xF1	; 241
     44e:	84 60       	ori	r24, 0x04	; 4
     450:	83 bf       	out	0x33, r24	; 51
                cli();
     452:	f8 94       	cli
                sleep_enable();
     454:	83 b7       	in	r24, 0x33	; 51
     456:	81 60       	ori	r24, 0x01	; 1
     458:	83 bf       	out	0x33, r24	; 51
                sei();
     45a:	78 94       	sei
                sleep_cpu();
     45c:	88 95       	sleep
                sleep_disable();
     45e:	83 b7       	in	r24, 0x33	; 51
     460:	8e 7f       	andi	r24, 0xFE	; 254
     462:	83 bf       	out	0x33, r24	; 51
                sei();
     464:	78 94       	sei
                rx_busy = 0;
     466:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
                ports_on();
     46a:	52 9a       	sbi	0x0a, 2	; 10
     46c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     46e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     472:	80 68       	ori	r24, 0x80	; 128
     474:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     478:	87 e5       	ldi	r24, 0x57	; 87
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     480:	00 c0       	rjmp	.+0      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     482:	00 00       	nop
                _delay_us(300);
                acomp_on();
     484:	80 b7       	in	r24, 0x30	; 48
     486:	88 61       	ori	r24, 0x18	; 24
     488:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     48a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     48c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     48e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     490:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     492:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     494:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     496:	ef e1       	ldi	r30, 0x1F	; 31
     498:	fe e4       	ldi	r31, 0x4E	; 78
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a0:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     4a2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     4a6:	81 11       	cpse	r24, r1
     4a8:	5b c0       	rjmp	.+182    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4aa:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ac:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4ae:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4b0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4b2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4b4:	3c 98       	cbi	0x07, 4	; 7
     4b6:	52 cf       	rjmp	.-348    	; 0x35c <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     4b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     4bc:	81 11       	cpse	r24, r1
     4be:	25 c0       	rjmp	.+74     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     4c4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     4c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     4cc:	47 cf       	rjmp	.-370    	; 0x35c <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     4ce:	48 99       	sbic	0x09, 0	; 9
     4d0:	ec cf       	rjmp	.-40     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     4d2:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4d4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4d6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4d8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4dc:	3c 98       	cbi	0x07, 4	; 7
     4de:	8f ec       	ldi	r24, 0xCF	; 207
     4e0:	97 e0       	ldi	r25, 0x07	; 7
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4ea:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4ec:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4ee:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4f0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4f2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4f4:	3c 98       	cbi	0x07, 4	; 7
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	e1 ee       	ldi	r30, 0xE1	; 225
     4fa:	f4 e0       	ldi	r31, 0x04	; 4
     4fc:	91 50       	subi	r25, 0x01	; 1
     4fe:	e0 40       	sbci	r30, 0x00	; 0
     500:	f0 40       	sbci	r31, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     504:	00 c0       	rjmp	.+0      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     506:	00 00       	nop
     508:	29 cf       	rjmp	.-430    	; 0x35c <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     50a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     50e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>
     512:	98 17       	cp	r25, r24
     514:	09 f4       	brne	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     516:	22 cf       	rjmp	.-444    	; 0x35c <kilo_start+0x1e>
                        prev_motion = cur_motion;
     518:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     51c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     520:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	09 f4       	brne	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     528:	50 c0       	rjmp	.+160    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     52a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     52e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     532:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	d9 f1       	breq	.+118    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     53a:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     53e:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     542:	8f e2       	ldi	r24, 0x2F	; 47
     544:	95 e7       	ldi	r25, 0x75	; 117
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     54c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     54e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_straight_right>
     552:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     556:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     55a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     55e:	fe ce       	rjmp	.-516    	; 0x35c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     560:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     562:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     564:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     566:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     568:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     56a:	3c 98       	cbi	0x07, 4	; 7
     56c:	ff ef       	ldi	r31, 0xFF	; 255
     56e:	20 e7       	ldi	r18, 0x70	; 112
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	f1 50       	subi	r31, 0x01	; 1
     574:	20 40       	sbci	r18, 0x00	; 0
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     57c:	00 00       	nop
     57e:	95 cf       	rjmp	.-214    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     580:	f3 01       	movw	r30, r6
     582:	09 95       	icall
     584:	f8 ce       	rjmp	.-528    	; 0x376 <kilo_start+0x38>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     586:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     588:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     58a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     58c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     58e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     590:	3c 98       	cbi	0x07, 4	; 7
     592:	e4 ce       	rjmp	.-568    	; 0x35c <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     594:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     596:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     598:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     59a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     59c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     59e:	3c 98       	cbi	0x07, 4	; 7
     5a0:	dd ce       	rjmp	.-582    	; 0x35c <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5a2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5a4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5a6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5a8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     5aa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     5ac:	3c 9a       	sbi	0x07, 4	; 7
     5ae:	d6 ce       	rjmp	.-596    	; 0x35c <kilo_start+0x1e>
     5b0:	ef e2       	ldi	r30, 0x2F	; 47
     5b2:	f5 e7       	ldi	r31, 0x75	; 117
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5ba:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     5bc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     5c4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     5c8:	c9 ce       	rjmp	.-622    	; 0x35c <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ca:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     5ce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     5d2:	8f e2       	ldi	r24, 0x2F	; 47
     5d4:	95 e7       	ldi	r25, 0x75	; 117
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5dc:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5de:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     5e6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     5ea:	b8 ce       	rjmp	.-656    	; 0x35c <kilo_start+0x1e>

000005ec <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <delay+0x10>
     5ee:	ef ec       	ldi	r30, 0xCF	; 207
     5f0:	f7 e0       	ldi	r31, 0x07	; 7
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <delay+0x6>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <delay+0xc>
     5f8:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5fa:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	b9 f7       	brne	.-18     	; 0x5ee <delay+0x2>
     600:	08 95       	ret

00000602 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     602:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     606:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     60a:	08 95       	ret

0000060c <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     612:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     616:	8f e0       	ldi	r24, 0x0F	; 15
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	ef ec       	ldi	r30, 0xCF	; 207
     61c:	f7 e0       	ldi	r31, 0x07	; 7
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <spinup_motors+0x12>
     622:	00 c0       	rjmp	.+0      	; 0x624 <spinup_motors+0x18>
     624:	00 00       	nop
     626:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     628:	c1 f7       	brne	.-16     	; 0x61a <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     62a:	08 95       	ret

0000062c <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     62c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     630:	81 11       	cpse	r24, r1
     632:	1e c0       	rjmp	.+60     	; 0x670 <get_ambientlight+0x44>
        cli();
     634:	f8 94       	cli
        adc_setup_conversion(7);
     636:	87 e0       	ldi	r24, 0x07	; 7
     638:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     63c:	83 e8       	ldi	r24, 0x83	; 131
     63e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     642:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     646:	80 64       	ori	r24, 0x40	; 64
     648:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     64c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     650:	86 fd       	sbrc	r24, 6
     652:	fc cf       	rjmp	.-8      	; 0x64c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     654:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     658:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     65c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     660:	23 ea       	ldi	r18, 0xA3	; 163
     662:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
        sei();                                    // reenable interrupts
     66c:	78 94       	sei
     66e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     674:	08 95       	ret

00000676 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     676:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     67a:	81 11       	cpse	r24, r1
     67c:	1e c0       	rjmp	.+60     	; 0x6ba <get_temperature+0x44>
        cli();
     67e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     680:	88 ec       	ldi	r24, 0xC8	; 200
     682:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     686:	87 e8       	ldi	r24, 0x87	; 135
     688:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     68c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     690:	80 64       	ori	r24, 0x40	; 64
     692:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     696:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     69a:	86 fd       	sbrc	r24, 6
     69c:	fc cf       	rjmp	.-8      	; 0x696 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     69e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     6a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6a6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     6aa:	23 ea       	ldi	r18, 0xA3	; 163
     6ac:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
        sei();                                    // reenable interrupts
     6b6:	78 94       	sei
     6b8:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     6be:	08 95       	ret

000006c0 <rand_hard>:

uint8_t rand_hard() {
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	e0 e0       	ldi	r30, 0x00	; 0
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     6ce:	03 ea       	ldi	r16, 0xA3	; 163
     6d0:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6d2:	d6 e0       	ldi	r29, 0x06	; 6
     6d4:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6d6:	a1 e0       	ldi	r26, 0x01	; 1
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6da:	60 e8       	ldi	r22, 0x80	; 128
     6dc:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6de:	f8 94       	cli
            adc_setup_conversion(6);
     6e0:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     6e4:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            adc_start_conversion();
     6e8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6ec:	90 64       	ori	r25, 0x40	; 64
     6ee:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            adc_finish_conversion();
     6f2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6f6:	96 fd       	sbrc	r25, 6
     6f8:	fc cf       	rjmp	.-8      	; 0x6f2 <rand_hard+0x32>
            a = ADCW&0x1;
     6fa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     6fe:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     702:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     704:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     708:	90 64       	ori	r25, 0x40	; 64
     70a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            adc_finish_conversion();
     70e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     712:	96 fd       	sbrc	r25, 6
     714:	fc cf       	rjmp	.-8      	; 0x70e <rand_hard+0x4e>
            b = ADCW&0x1;
     716:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     71a:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
            adc_trigger_high_gain();
     71e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     722:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     726:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
            sei();
     72a:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     72c:	41 70       	andi	r20, 0x01	; 1
     72e:	24 13       	cpse	r18, r20
     730:	03 c0       	rjmp	.+6      	; 0x738 <rand_hard+0x78>
     732:	61 50       	subi	r22, 0x01	; 1
     734:	71 09       	sbc	r23, r1
     736:	99 f6       	brne	.-90     	; 0x6de <rand_hard+0x1e>
        if (a)
     738:	22 23       	and	r18, r18
     73a:	39 f0       	breq	.+14     	; 0x74a <rand_hard+0x8a>
            num |= (1<<i);
     73c:	9d 01       	movw	r18, r26
     73e:	0e 2e       	mov	r0, r30
     740:	01 c0       	rjmp	.+2      	; 0x744 <rand_hard+0x84>
     742:	22 0f       	add	r18, r18
     744:	0a 94       	dec	r0
     746:	ea f7       	brpl	.-6      	; 0x742 <rand_hard+0x82>
     748:	82 2b       	or	r24, r18
     74a:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     74c:	e8 30       	cpi	r30, 0x08	; 8
     74e:	f1 05       	cpc	r31, r1
     750:	09 f0       	breq	.+2      	; 0x754 <rand_hard+0x94>
     752:	c3 cf       	rjmp	.-122    	; 0x6da <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     75e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     762:	98 2f       	mov	r25, r24
     764:	99 0f       	add	r25, r25
     766:	99 0f       	add	r25, r25
     768:	99 0f       	add	r25, r25
     76a:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     76c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <accumulator>
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	29 0f       	add	r18, r25
     774:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <accumulator>
     778:	28 2f       	mov	r18, r24
     77a:	22 95       	swap	r18
     77c:	26 95       	lsr	r18
     77e:	27 70       	andi	r18, 0x07	; 7
     780:	82 27       	eor	r24, r18
     782:	96 95       	lsr	r25
     784:	96 95       	lsr	r25
     786:	89 27       	eor	r24, r25
     788:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    return seed;
}
     78c:	08 95       	ret

0000078e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     78e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     792:	08 95       	ret

00000794 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     794:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     798:	81 11       	cpse	r24, r1
     79a:	16 c0       	rjmp	.+44     	; 0x7c8 <get_voltage+0x34>
        cli();                                    // disable interrupts
     79c:	f8 94       	cli
        adc_setup_conversion(6);
     79e:	86 e0       	ldi	r24, 0x06	; 6
     7a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     7a4:	83 e8       	ldi	r24, 0x83	; 131
     7a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     7aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     7ae:	80 64       	ori	r24, 0x40	; 64
     7b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     7b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     7b8:	86 fd       	sbrc	r24, 6
     7ba:	fc cf       	rjmp	.-8      	; 0x7b4 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     7bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     7c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     7c4:	78 94       	sei
     7c6:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     7cc:	08 95       	ret

000007ce <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7ce:	2f 92       	push	r2
     7d0:	3f 92       	push	r3
     7d2:	4f 92       	push	r4
     7d4:	5f 92       	push	r5
     7d6:	6f 92       	push	r6
     7d8:	7f 92       	push	r7
     7da:	8f 92       	push	r8
     7dc:	9f 92       	push	r9
     7de:	af 92       	push	r10
     7e0:	bf 92       	push	r11
     7e2:	cf 92       	push	r12
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <estimate_distance+0x26>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <estimate_distance+0x28>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <estimate_distance+0x2a>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7fe:	dc 01       	movw	r26, r24
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	0d 90       	ld	r0, X+
     804:	bc 91       	ld	r27, X
     806:	a0 2d       	mov	r26, r0
     808:	be 83       	std	Y+6, r27	; 0x06
     80a:	ad 83       	std	Y+5, r26	; 0x05
     80c:	a4 38       	cpi	r26, 0x84	; 132
     80e:	e3 e0       	ldi	r30, 0x03	; 3
     810:	be 07       	cpc	r27, r30
     812:	0c f0       	brlt	.+2      	; 0x816 <estimate_distance+0x48>
     814:	cb c0       	rjmp	.+406    	; 0x9ac <__stack+0xad>
        if (dist->high_gain > kilo_irhigh[0]) {
     816:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_irhigh>
     81a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <kilo_irhigh+0x1>
     81e:	8a 17       	cp	r24, r26
     820:	9b 07       	cpc	r25, r27
     822:	08 f4       	brcc	.+2      	; 0x826 <estimate_distance+0x58>
     824:	8c c1       	rjmp	.+792    	; 0xb3e <__stack+0x23f>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     826:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <kilo_irhigh+0x2>
     82a:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <kilo_irhigh+0x3>
     82e:	0a 17       	cp	r16, r26
     830:	1b 07       	cpc	r17, r27
     832:	08 f4       	brcc	.+2      	; 0x836 <estimate_distance+0x68>
     834:	22 c2       	rjmp	.+1092   	; 0xc7a <__stack+0x37b>
     836:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <kilo_irhigh+0x4>
     83a:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <kilo_irhigh+0x5>
     83e:	0a 17       	cp	r16, r26
     840:	1b 07       	cpc	r17, r27
     842:	08 f4       	brcc	.+2      	; 0x846 <estimate_distance+0x78>
     844:	28 c2       	rjmp	.+1104   	; 0xc96 <__stack+0x397>
     846:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <kilo_irhigh+0x6>
     84a:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <kilo_irhigh+0x7>
     84e:	0a 17       	cp	r16, r26
     850:	1b 07       	cpc	r17, r27
     852:	08 f4       	brcc	.+2      	; 0x856 <estimate_distance+0x88>
     854:	24 c2       	rjmp	.+1096   	; 0xc9e <__stack+0x39f>
     856:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <kilo_irhigh+0x8>
     85a:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <kilo_irhigh+0x9>
     85e:	0a 17       	cp	r16, r26
     860:	1b 07       	cpc	r17, r27
     862:	08 f4       	brcc	.+2      	; 0x866 <estimate_distance+0x98>
     864:	25 c2       	rjmp	.+1098   	; 0xcb0 <__stack+0x3b1>
     866:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <kilo_irhigh+0xa>
     86a:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <kilo_irhigh+0xb>
     86e:	0a 17       	cp	r16, r26
     870:	1b 07       	cpc	r17, r27
     872:	08 f4       	brcc	.+2      	; 0x876 <estimate_distance+0xa8>
     874:	e6 c1       	rjmp	.+972    	; 0xc42 <__stack+0x343>
     876:	00 91 2b 01 	lds	r16, 0x012B	; 0x80012b <kilo_irhigh+0xc>
     87a:	10 91 2c 01 	lds	r17, 0x012C	; 0x80012c <kilo_irhigh+0xd>
     87e:	0a 17       	cp	r16, r26
     880:	1b 07       	cpc	r17, r27
     882:	08 f4       	brcc	.+2      	; 0x886 <estimate_distance+0xb8>
     884:	1e c2       	rjmp	.+1084   	; 0xcc2 <__stack+0x3c3>
     886:	00 91 2d 01 	lds	r16, 0x012D	; 0x80012d <kilo_irhigh+0xe>
     88a:	10 91 2e 01 	lds	r17, 0x012E	; 0x80012e <kilo_irhigh+0xf>
     88e:	0a 17       	cp	r16, r26
     890:	1b 07       	cpc	r17, r27
     892:	08 f4       	brcc	.+2      	; 0x896 <estimate_distance+0xc8>
     894:	1f c2       	rjmp	.+1086   	; 0xcd4 <__stack+0x3d5>
     896:	00 91 2f 01 	lds	r16, 0x012F	; 0x80012f <kilo_irhigh+0x10>
     89a:	10 91 30 01 	lds	r17, 0x0130	; 0x800130 <kilo_irhigh+0x11>
     89e:	0a 17       	cp	r16, r26
     8a0:	1b 07       	cpc	r17, r27
     8a2:	08 f4       	brcc	.+2      	; 0x8a6 <estimate_distance+0xd8>
     8a4:	25 c2       	rjmp	.+1098   	; 0xcf0 <__stack+0x3f1>
     8a6:	00 91 31 01 	lds	r16, 0x0131	; 0x800131 <kilo_irhigh+0x12>
     8aa:	10 91 32 01 	lds	r17, 0x0132	; 0x800132 <kilo_irhigh+0x13>
     8ae:	0a 17       	cp	r16, r26
     8b0:	1b 07       	cpc	r17, r27
     8b2:	08 f4       	brcc	.+2      	; 0x8b6 <estimate_distance+0xe8>
     8b4:	26 c2       	rjmp	.+1100   	; 0xd02 <__stack+0x403>
     8b6:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <kilo_irhigh+0x14>
     8ba:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <kilo_irhigh+0x15>
     8be:	0a 17       	cp	r16, r26
     8c0:	1b 07       	cpc	r17, r27
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <estimate_distance+0xf8>
     8c4:	22 c2       	rjmp	.+1092   	; 0xd0a <__stack+0x40b>
     8c6:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <kilo_irhigh+0x16>
     8ca:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <kilo_irhigh+0x17>
     8ce:	0a 17       	cp	r16, r26
     8d0:	1b 07       	cpc	r17, r27
     8d2:	08 f4       	brcc	.+2      	; 0x8d6 <estimate_distance+0x108>
     8d4:	23 c2       	rjmp	.+1094   	; 0xd1c <__stack+0x41d>
     8d6:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <kilo_irhigh+0x18>
     8da:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <kilo_irhigh+0x19>
     8de:	0a 17       	cp	r16, r26
     8e0:	1b 07       	cpc	r17, r27
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <estimate_distance+0x118>
     8e4:	24 c2       	rjmp	.+1096   	; 0xd2e <__stack+0x42f>
     8e6:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <kilo_irhigh+0x1a>
     8ea:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <kilo_irhigh+0x1b>
     8ee:	0a 17       	cp	r16, r26
     8f0:	1b 07       	cpc	r17, r27
     8f2:	08 f4       	brcc	.+2      	; 0x8f6 <estimate_distance+0x128>
     8f4:	25 c2       	rjmp	.+1098   	; 0xd40 <__stack+0x441>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	a0 ed       	ldi	r26, 0xD0	; 208
     8fc:	b0 e4       	ldi	r27, 0x40	; 64
     8fe:	89 83       	std	Y+1, r24	; 0x01
     900:	9a 83       	std	Y+2, r25	; 0x02
     902:	ab 83       	std	Y+3, r26	; 0x03
     904:	bc 83       	std	Y+4, r27	; 0x04
     906:	2c e0       	ldi	r18, 0x0C	; 12
     908:	e2 2e       	mov	r14, r18
     90a:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     90c:	f7 01       	movw	r30, r14
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	e1 5e       	subi	r30, 0xE1	; 225
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	b8 01       	movw	r22, r16
     91c:	68 1b       	sub	r22, r24
     91e:	79 0b       	sbc	r23, r25
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	0e 94 14 0b 	call	0x1628	; 0x1628 <__addsf3>
     930:	6b 01       	movw	r12, r22
     932:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     934:	ad 81       	ldd	r26, Y+5	; 0x05
     936:	be 81       	ldd	r27, Y+6	; 0x06
     938:	bd 01       	movw	r22, r26
     93a:	bb 0f       	add	r27, r27
     93c:	88 0b       	sbc	r24, r24
     93e:	99 0b       	sbc	r25, r25
     940:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatsisf>
     944:	4b 01       	movw	r8, r22
     946:	5c 01       	movw	r10, r24
     948:	b8 01       	movw	r22, r16
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     952:	2b 01       	movw	r4, r22
     954:	3c 01       	movw	r6, r24
     956:	29 81       	ldd	r18, Y+1	; 0x01
     958:	3a 81       	ldd	r19, Y+2	; 0x02
     95a:	4b 81       	ldd	r20, Y+3	; 0x03
     95c:	5c 81       	ldd	r21, Y+4	; 0x04
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	c3 01       	movw	r24, r6
     96c:	b2 01       	movw	r22, r4
     96e:	0e 94 13 0b 	call	0x1626	; 0x1626 <__subsf3>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	c5 01       	movw	r24, r10
     978:	b4 01       	movw	r22, r8
     97a:	0e 94 13 0b 	call	0x1626	; 0x1626 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e2       	ldi	r20, 0x20	; 32
     984:	51 e4       	ldi	r21, 0x41	; 65
     986:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     98a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fixsfsi>
     98e:	8b 01       	movw	r16, r22
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fixsfsi>
     998:	ab 01       	movw	r20, r22
     99a:	bc 01       	movw	r22, r24
     99c:	c8 01       	movw	r24, r16
     99e:	ba 01       	movw	r22, r20
     9a0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__divmodhi4>
     9a4:	69 83       	std	Y+1, r22	; 0x01
     9a6:	ed 81       	ldd	r30, Y+5	; 0x05
     9a8:	fe 81       	ldd	r31, Y+6	; 0x06
     9aa:	cb c0       	rjmp	.+406    	; 0xb42 <__stack+0x243>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     9ac:	dc 01       	movw	r26, r24
     9ae:	cd 90       	ld	r12, X+
     9b0:	dc 90       	ld	r13, X
     9b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <kilo_irlow>
     9b6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <kilo_irlow+0x1>
     9ba:	8c 15       	cp	r24, r12
     9bc:	9d 05       	cpc	r25, r13
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	df c0       	rjmp	.+446    	; 0xb80 <__stack+0x281>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     9c2:	bf ef       	ldi	r27, 0xFF	; 255
     9c4:	b9 83       	std	Y+1, r27	; 0x01
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     9c6:	00 91 48 01 	lds	r16, 0x0148	; 0x800148 <kilo_irlow+0x2>
     9ca:	10 91 49 01 	lds	r17, 0x0149	; 0x800149 <kilo_irlow+0x3>
     9ce:	0c 15       	cp	r16, r12
     9d0:	1d 05       	cpc	r17, r13
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	56 c1       	rjmp	.+684    	; 0xc82 <__stack+0x383>
     9d6:	00 91 4a 01 	lds	r16, 0x014A	; 0x80014a <kilo_irlow+0x4>
     9da:	10 91 4b 01 	lds	r17, 0x014B	; 0x80014b <kilo_irlow+0x5>
     9de:	0c 15       	cp	r16, r12
     9e0:	1d 05       	cpc	r17, r13
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	53 c1       	rjmp	.+678    	; 0xc8c <__stack+0x38d>
     9e6:	00 91 4c 01 	lds	r16, 0x014C	; 0x80014c <kilo_irlow+0x6>
     9ea:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <kilo_irlow+0x7>
     9ee:	0c 15       	cp	r16, r12
     9f0:	1d 05       	cpc	r17, r13
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	58 c1       	rjmp	.+688    	; 0xca6 <__stack+0x3a7>
     9f6:	00 91 4e 01 	lds	r16, 0x014E	; 0x80014e <kilo_irlow+0x8>
     9fa:	10 91 4f 01 	lds	r17, 0x014F	; 0x80014f <kilo_irlow+0x9>
     9fe:	0c 15       	cp	r16, r12
     a00:	1d 05       	cpc	r17, r13
     a02:	08 f4       	brcc	.+2      	; 0xa06 <__stack+0x107>
     a04:	59 c1       	rjmp	.+690    	; 0xcb8 <__stack+0x3b9>
     a06:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <kilo_irlow+0xa>
     a0a:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <kilo_irlow+0xb>
     a0e:	0c 15       	cp	r16, r12
     a10:	1d 05       	cpc	r17, r13
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__stack+0x117>
     a14:	b7 c0       	rjmp	.+366    	; 0xb84 <__stack+0x285>
     a16:	00 91 52 01 	lds	r16, 0x0152	; 0x800152 <kilo_irlow+0xc>
     a1a:	10 91 53 01 	lds	r17, 0x0153	; 0x800153 <kilo_irlow+0xd>
     a1e:	0c 15       	cp	r16, r12
     a20:	1d 05       	cpc	r17, r13
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	52 c1       	rjmp	.+676    	; 0xcca <__stack+0x3cb>
     a26:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <kilo_irlow+0xe>
     a2a:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <kilo_irlow+0xf>
     a2e:	0c 15       	cp	r16, r12
     a30:	1d 05       	cpc	r17, r13
     a32:	08 f4       	brcc	.+2      	; 0xa36 <__stack+0x137>
     a34:	53 c1       	rjmp	.+678    	; 0xcdc <__stack+0x3dd>
     a36:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <kilo_irlow+0x10>
     a3a:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <kilo_irlow+0x11>
     a3e:	0c 15       	cp	r16, r12
     a40:	1d 05       	cpc	r17, r13
     a42:	08 f4       	brcc	.+2      	; 0xa46 <__stack+0x147>
     a44:	50 c1       	rjmp	.+672    	; 0xce6 <__stack+0x3e7>
     a46:	00 91 58 01 	lds	r16, 0x0158	; 0x800158 <kilo_irlow+0x12>
     a4a:	10 91 59 01 	lds	r17, 0x0159	; 0x800159 <kilo_irlow+0x13>
     a4e:	0c 15       	cp	r16, r12
     a50:	1d 05       	cpc	r17, r13
     a52:	08 f4       	brcc	.+2      	; 0xa56 <__stack+0x157>
     a54:	51 c1       	rjmp	.+674    	; 0xcf8 <__stack+0x3f9>
     a56:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <kilo_irlow+0x14>
     a5a:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <kilo_irlow+0x15>
     a5e:	0c 15       	cp	r16, r12
     a60:	1d 05       	cpc	r17, r13
     a62:	08 f4       	brcc	.+2      	; 0xa66 <__stack+0x167>
     a64:	56 c1       	rjmp	.+684    	; 0xd12 <__stack+0x413>
     a66:	00 91 5c 01 	lds	r16, 0x015C	; 0x80015c <kilo_irlow+0x16>
     a6a:	10 91 5d 01 	lds	r17, 0x015D	; 0x80015d <kilo_irlow+0x17>
     a6e:	0c 15       	cp	r16, r12
     a70:	1d 05       	cpc	r17, r13
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__stack+0x177>
     a74:	57 c1       	rjmp	.+686    	; 0xd24 <__stack+0x425>
     a76:	00 91 5e 01 	lds	r16, 0x015E	; 0x80015e <kilo_irlow+0x18>
     a7a:	10 91 5f 01 	lds	r17, 0x015F	; 0x80015f <kilo_irlow+0x19>
     a7e:	0c 15       	cp	r16, r12
     a80:	1d 05       	cpc	r17, r13
     a82:	08 f4       	brcc	.+2      	; 0xa86 <__stack+0x187>
     a84:	58 c1       	rjmp	.+688    	; 0xd36 <__stack+0x437>
     a86:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <kilo_irlow+0x1a>
     a8a:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <kilo_irlow+0x1b>
     a8e:	0c 15       	cp	r16, r12
     a90:	1d 05       	cpc	r17, r13
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__stack+0x197>
     a94:	59 c1       	rjmp	.+690    	; 0xd48 <__stack+0x449>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a96:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     a98:	b9 81       	ldd	r27, Y+1	; 0x01
     a9a:	bf 3f       	cpi	r27, 0xFF	; 255
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <__stack+0x1a1>
     a9e:	59 c1       	rjmp	.+690    	; 0xd52 <__stack+0x453>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     aa0:	ed 81       	ldd	r30, Y+5	; 0x05
     aa2:	fe 81       	ldd	r31, Y+6	; 0x06
     aa4:	bf 01       	movw	r22, r30
     aa6:	ff 0f       	add	r31, r31
     aa8:	88 0b       	sbc	r24, r24
     aaa:	99 0b       	sbc	r25, r25
     aac:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatsisf>
     ab0:	4b 01       	movw	r8, r22
     ab2:	5c 01       	movw	r10, r24
     ab4:	f9 81       	ldd	r31, Y+1	; 0x01
     ab6:	6f 2f       	mov	r22, r31
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     ac2:	6b 01       	movw	r12, r22
     ac4:	7c 01       	movw	r14, r24
     ac6:	a5 01       	movw	r20, r10
     ac8:	94 01       	movw	r18, r8
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	81 e6       	ldi	r24, 0x61	; 97
     ad0:	94 e4       	ldi	r25, 0x44	; 68
     ad2:	0e 94 13 0b 	call	0x1626	; 0x1626 <__subsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	c7 01       	movw	r24, r14
     adc:	b6 01       	movw	r22, r12
     ade:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     ae2:	6b 01       	movw	r12, r22
     ae4:	7c 01       	movw	r14, r24
     ae6:	61 2f       	mov	r22, r17
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     af2:	2b 01       	movw	r4, r22
     af4:	3c 01       	movw	r6, r24
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4f e2       	ldi	r20, 0x2F	; 47
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	c5 01       	movw	r24, r10
     b00:	b4 01       	movw	r22, r8
     b02:	0e 94 13 0b 	call	0x1626	; 0x1626 <__subsf3>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	c3 01       	movw	r24, r6
     b0c:	b2 01       	movw	r22, r4
     b0e:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	0e 94 14 0b 	call	0x1628	; 0x1628 <__addsf3>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	48 e4       	ldi	r20, 0x48	; 72
     b24:	53 e4       	ldi	r21, 0x43	; 67
     b26:	0e 94 80 0b 	call	0x1700	; 0x1700 <__divsf3>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	44 e0       	ldi	r20, 0x04	; 4
     b30:	52 e4       	ldi	r21, 0x42	; 66
     b32:	0e 94 14 0b 	call	0x1628	; 0x1628 <__addsf3>
     b36:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__fixunssfsi>
     b3a:	86 2f       	mov	r24, r22
     b3c:	08 c0       	rjmp	.+16     	; 0xb4e <__stack+0x24f>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b3e:	19 82       	std	Y+1, r1	; 0x01
     b40:	fd 01       	movw	r30, r26
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b42:	ed 3b       	cpi	r30, 0xBD	; 189
     b44:	f2 40       	sbci	r31, 0x02	; 2
     b46:	0c f0       	brlt	.+2      	; 0xb4a <__stack+0x24b>
     b48:	07 c1       	rjmp	.+526    	; 0xd58 <__stack+0x459>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
     b4e:	26 96       	adiw	r28, 0x06	; 6
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	3f 90       	pop	r3
     b7c:	2f 90       	pop	r2
     b7e:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b80:	81 e2       	ldi	r24, 0x21	; 33

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b82:	e5 cf       	rjmp	.-54     	; 0xb4e <__stack+0x24f>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b84:	f5 e0       	ldi	r31, 0x05	; 5
     b86:	3f 2e       	mov	r3, r31
                if(dist->low_gain > kilo_irlow[i]) {
     b88:	e5 e0       	ldi	r30, 0x05	; 5
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ec 5b       	subi	r30, 0xBC	; 188
     b92:	fe 4f       	sbci	r31, 0xFE	; 254
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	b8 01       	movw	r22, r16
     b9a:	68 1b       	sub	r22, r24
     b9c:	79 0b       	sbc	r23, r25
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	0e 94 14 0b 	call	0x1628	; 0x1628 <__addsf3>
     bae:	4b 01       	movw	r8, r22
     bb0:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     bb2:	b6 01       	movw	r22, r12
     bb4:	dd 0c       	add	r13, r13
     bb6:	88 0b       	sbc	r24, r24
     bb8:	99 0b       	sbc	r25, r25
     bba:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__floatsisf>
     bbe:	2b 01       	movw	r4, r22
     bc0:	3c 01       	movw	r6, r24
     bc2:	b8 01       	movw	r22, r16
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
     bd0:	63 2d       	mov	r22, r3
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	a9 01       	movw	r20, r18
     bee:	0e 94 14 0b 	call	0x1628	; 0x1628 <__addsf3>
     bf2:	a5 01       	movw	r20, r10
     bf4:	94 01       	movw	r18, r8
     bf6:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	c7 01       	movw	r24, r14
     c00:	b6 01       	movw	r22, r12
     c02:	0e 94 13 0b 	call	0x1626	; 0x1626 <__subsf3>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	c3 01       	movw	r24, r6
     c0c:	b2 01       	movw	r22, r4
     c0e:	0e 94 13 0b 	call	0x1626	; 0x1626 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     c1e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fixsfsi>
     c22:	8b 01       	movw	r16, r22
     c24:	c5 01       	movw	r24, r10
     c26:	b4 01       	movw	r22, r8
     c28:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fixsfsi>
     c2c:	ab 01       	movw	r20, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	c8 01       	movw	r24, r16
     c32:	ba 01       	movw	r22, r20
     c34:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__divmodhi4>
     c38:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     c3a:	6f 3f       	cpi	r22, 0xFF	; 255
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__stack+0x341>
     c3e:	2c cf       	rjmp	.-424    	; 0xa98 <__stack+0x199>
     c40:	84 cf       	rjmp	.-248    	; 0xb4a <__stack+0x24b>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c42:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	7c 01       	movw	r14, r24
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	ef 1a       	sub	r14, r31
     c4e:	f1 08       	sbc	r15, r1
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	a9 01       	movw	r20, r18
     c6c:	0e 94 14 0b 	call	0x1628	; 0x1628 <__addsf3>
     c70:	69 83       	std	Y+1, r22	; 0x01
     c72:	7a 83       	std	Y+2, r23	; 0x02
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	49 ce       	rjmp	.-878    	; 0x90c <__stack+0xd>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	e3 cf       	rjmp	.-58     	; 0xc48 <__stack+0x349>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c82:	33 24       	eor	r3, r3
     c84:	33 94       	inc	r3
     c86:	e1 e0       	ldi	r30, 0x01	; 1
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 cf       	rjmp	.-256    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	38 2e       	mov	r3, r24
                if(dist->low_gain > kilo_irlow[i]) {
     c90:	e2 e0       	ldi	r30, 0x02	; 2
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	7b cf       	rjmp	.-266    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c96:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	d5 cf       	rjmp	.-86     	; 0xc48 <__stack+0x349>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c9e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	d1 cf       	rjmp	.-94     	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca6:	b3 e0       	ldi	r27, 0x03	; 3
     ca8:	3b 2e       	mov	r3, r27
                if(dist->low_gain > kilo_irlow[i]) {
     caa:	e3 e0       	ldi	r30, 0x03	; 3
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	6e cf       	rjmp	.-292    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb0:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	c8 cf       	rjmp	.-112    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cb8:	a4 e0       	ldi	r26, 0x04	; 4
     cba:	3a 2e       	mov	r3, r26
                if(dist->low_gain > kilo_irlow[i]) {
     cbc:	e4 e0       	ldi	r30, 0x04	; 4
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	65 cf       	rjmp	.-310    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc2:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     cc4:	86 e0       	ldi	r24, 0x06	; 6
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	bf cf       	rjmp	.-130    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cca:	e6 e0       	ldi	r30, 0x06	; 6
     ccc:	3e 2e       	mov	r3, r30
                if(dist->low_gain > kilo_irlow[i]) {
     cce:	e6 e0       	ldi	r30, 0x06	; 6
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	5c cf       	rjmp	.-328    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cd4:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     cd6:	87 e0       	ldi	r24, 0x07	; 7
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	b6 cf       	rjmp	.-148    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cdc:	77 e0       	ldi	r23, 0x07	; 7
     cde:	37 2e       	mov	r3, r23
                if(dist->low_gain > kilo_irlow[i]) {
     ce0:	e7 e0       	ldi	r30, 0x07	; 7
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	53 cf       	rjmp	.-346    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce6:	68 e0       	ldi	r22, 0x08	; 8
     ce8:	36 2e       	mov	r3, r22
                if(dist->low_gain > kilo_irlow[i]) {
     cea:	e8 e0       	ldi	r30, 0x08	; 8
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	4e cf       	rjmp	.-356    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf0:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a8 cf       	rjmp	.-176    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cf8:	59 e0       	ldi	r21, 0x09	; 9
     cfa:	35 2e       	mov	r3, r21
                if(dist->low_gain > kilo_irlow[i]) {
     cfc:	e9 e0       	ldi	r30, 0x09	; 9
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	45 cf       	rjmp	.-374    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d02:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     d04:	89 e0       	ldi	r24, 0x09	; 9
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	9f cf       	rjmp	.-194    	; 0xc48 <__stack+0x349>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     d0c:	8a e0       	ldi	r24, 0x0A	; 10
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9b cf       	rjmp	.-202    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d12:	4a e0       	ldi	r20, 0x0A	; 10
     d14:	34 2e       	mov	r3, r20
                if(dist->low_gain > kilo_irlow[i]) {
     d16:	ea e0       	ldi	r30, 0x0A	; 10
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	38 cf       	rjmp	.-400    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1c:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     d1e:	8b e0       	ldi	r24, 0x0B	; 11
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	92 cf       	rjmp	.-220    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d24:	3b e0       	ldi	r19, 0x0B	; 11
     d26:	33 2e       	mov	r3, r19
                if(dist->low_gain > kilo_irlow[i]) {
     d28:	eb e0       	ldi	r30, 0x0B	; 11
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	2f cf       	rjmp	.-418    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d2e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	89 cf       	rjmp	.-238    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d36:	2c e0       	ldi	r18, 0x0C	; 12
     d38:	32 2e       	mov	r3, r18
                if(dist->low_gain > kilo_irlow[i]) {
     d3a:	ec e0       	ldi	r30, 0x0C	; 12
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	26 cf       	rjmp	.-436    	; 0xb8c <__stack+0x28d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d40:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d42:	8d e0       	ldi	r24, 0x0D	; 13
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	80 cf       	rjmp	.-256    	; 0xc48 <__stack+0x349>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d48:	9d e0       	ldi	r25, 0x0D	; 13
     d4a:	39 2e       	mov	r3, r25
                if(dist->low_gain > kilo_irlow[i]) {
     d4c:	ed e0       	ldi	r30, 0x0D	; 13
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	1d cf       	rjmp	.-454    	; 0xb8c <__stack+0x28d>
     d52:	81 e2       	ldi	r24, 0x21	; 33
     d54:	81 0f       	add	r24, r17
     d56:	fb ce       	rjmp	.-522    	; 0xb4e <__stack+0x24f>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d58:	d1 01       	movw	r26, r2
     d5a:	cd 90       	ld	r12, X+
     d5c:	dc 90       	ld	r13, X
     d5e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <kilo_irlow>
     d62:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <kilo_irlow+0x1>
     d66:	8c 15       	cp	r24, r12
     d68:	9d 05       	cpc	r25, r13
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__stack+0x46f>
     d6c:	2c ce       	rjmp	.-936    	; 0x9c6 <__stack+0xc7>
            dist_low=0;
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	93 ce       	rjmp	.-730    	; 0xa98 <__stack+0x199>

00000d72 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
    tx_clock += tx_increment;
     d94:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     d98:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     d9c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tx_increment>
     da0:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <tx_increment+0x1>
     da4:	82 0f       	add	r24, r18
     da6:	93 1f       	adc	r25, r19
     da8:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_clock+0x1>
     dac:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_clock>
    tx_increment = 0xFF;
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     db8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    OCR0A = tx_increment;
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     dc0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kilo_ticks>
     dc4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <kilo_ticks+0x1>
     dc8:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <kilo_ticks+0x2>
     dcc:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <kilo_ticks+0x3>
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	a1 1d       	adc	r26, r1
     dd4:	b1 1d       	adc	r27, r1
     dd6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <kilo_ticks>
     dda:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <kilo_ticks+0x1>
     dde:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <kilo_ticks+0x2>
     de2:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     de6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     dea:	81 11       	cpse	r24, r1
     dec:	0f c0       	rjmp	.+30     	; 0xe0c <__vector_14+0x9a>
     dee:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <kilo_tx_period>
     df2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <kilo_tx_period+0x1>
     df6:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     dfa:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     dfe:	82 17       	cp	r24, r18
     e00:	93 07       	cpc	r25, r19
     e02:	20 f4       	brcc	.+8      	; 0xe0c <__vector_14+0x9a>
     e04:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	89 f0       	breq	.+34     	; 0xe2e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     e2e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     e32:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     e36:	09 95       	icall
        if (msg) {
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	41 f3       	breq	.-48     	; 0xe0c <__vector_14+0x9a>
            if (message_send(msg)) {
     e3c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <message_send>
     e40:	81 11       	cpse	r24, r1
     e42:	0a c0       	rjmp	.+20     	; 0xe58 <__vector_14+0xe6>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e44:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <rand>
     e48:	9c 01       	movw	r18, r24
     e4a:	33 27       	eor	r19, r19
     e4c:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <tx_increment+0x1>
     e50:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <tx_increment>
                OCR0A = tx_increment;
     e54:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     e56:	da cf       	rjmp	.-76     	; 0xe0c <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e58:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     e5c:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     e60:	09 95       	icall
                tx_clock = 0;
     e62:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     e66:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
     e6a:	d0 cf       	rjmp	.-96     	; 0xe0c <__vector_14+0x9a>

00000e6c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e6c:	80 ff       	sbrs	r24, 0
     e6e:	11 c0       	rjmp	.+34     	; 0xe92 <set_color+0x26>
        DDRD |= (1<<5);
     e70:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e72:	81 ff       	sbrs	r24, 1
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <set_color+0x2c>
        DDRD |= (1<<4);
     e76:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e78:	82 ff       	sbrs	r24, 2
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <set_color+0x32>
        DDRC |= (1<<3);
     e7c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e7e:	83 ff       	sbrs	r24, 3
     e80:	11 c0       	rjmp	.+34     	; 0xea4 <set_color+0x38>
        DDRC |= (1<<2);
     e82:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e84:	84 ff       	sbrs	r24, 4
     e86:	11 c0       	rjmp	.+34     	; 0xeaa <set_color+0x3e>
        DDRC |= (1<<5);
     e88:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e8a:	85 fd       	sbrc	r24, 5
     e8c:	11 c0       	rjmp	.+34     	; 0xeb0 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e8e:	3c 98       	cbi	0x07, 4	; 7
     e90:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e92:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e94:	81 fd       	sbrc	r24, 1
     e96:	ef cf       	rjmp	.-34     	; 0xe76 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e98:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e9a:	82 fd       	sbrc	r24, 2
     e9c:	ef cf       	rjmp	.-34     	; 0xe7c <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e9e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ea0:	83 fd       	sbrc	r24, 3
     ea2:	ef cf       	rjmp	.-34     	; 0xe82 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ea4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     ea6:	84 fd       	sbrc	r24, 4
     ea8:	ef cf       	rjmp	.-34     	; 0xe88 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     eaa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     eac:	85 ff       	sbrs	r24, 5
     eae:	ef cf       	rjmp	.-34     	; 0xe8e <set_color+0x22>
        DDRC |= (1<<4);
     eb0:	3c 9a       	sbi	0x07, 4	; 7
     eb2:	08 95       	ret

00000eb4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
    rx_timer_off();
     ec2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ec6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     eca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    rx_leadingbit = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     ed4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
    rx_busy = 0;
     ed8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    adc_trigger_high_gain();
     edc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     ee0:	93 ea       	ldi	r25, 0xA3	; 163
     ee2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ee6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	2f 93       	push	r18
     f04:	3f 93       	push	r19
     f06:	4f 93       	push	r20
     f08:	5f 93       	push	r21
     f0a:	6f 93       	push	r22
     f0c:	7f 93       	push	r23
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	af 93       	push	r26
     f14:	bf 93       	push	r27
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     f1e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f22:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    rx_busy = 1;
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     f2c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_leadingbit>
     f30:	88 23       	and	r24, r24
     f32:	a9 f1       	breq	.+106    	; 0xf9e <__vector_23+0xa6>
        rx_timer_on();
     f34:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f38:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f3c:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        rx_bytevalue = 0;
     f40:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
        rx_leadingbit = 0;
     f44:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <rx_leadingbit>
        if (rx_leadingbyte) {
     f48:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     f4c:	88 23       	and	r24, r24
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <__vector_23+0x80>
            adc_finish_conversion();
     f50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     f54:	86 fd       	sbrc	r24, 6
     f56:	fc cf       	rjmp	.-8      	; 0xf50 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f58:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f5c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     f60:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_dist+0x3>
     f64:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_dist+0x2>
            adc_trigger_low_gain();
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     f6e:	93 ea       	ldi	r25, 0xA3	; 163
     f70:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     f74:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
                    }
                }
            }
        }
    }
}
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f9e:	c9 01       	movw	r24, r18
     fa0:	87 58       	subi	r24, 0x87	; 135
     fa2:	91 09       	sbc	r25, r1
     fa4:	84 37       	cpi	r24, 0x74	; 116
     fa6:	99 40       	sbci	r25, 0x09	; 9
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__vector_23+0xb4>
     faa:	4f c0       	rjmp	.+158    	; 0x104a <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     fac:	26 58       	subi	r18, 0x86	; 134
     fae:	31 09       	sbc	r19, r1
     fb0:	a4 ef       	ldi	r26, 0xF4	; 244
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__umulhisi3>
     fb8:	aa 27       	eor	r26, r26
     fba:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     fbc:	88 30       	cpi	r24, 0x08	; 8
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <__vector_23+0xca>
     fc0:	7b c0       	rjmp	.+246    	; 0x10b8 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     fc2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <rx_leadingbit>
                if (rx_leadingbyte) {
     fc6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     fca:	81 11       	cpse	r24, r1
     fcc:	52 c0       	rjmp	.+164    	; 0x1072 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fce:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rx_byteindex>
     fd2:	e8 2f       	mov	r30, r24
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	e8 59       	subi	r30, 0x98	; 152
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     fde:	90 83       	st	Z, r25
                    rx_byteindex++;
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     fe6:	8c 30       	cpi	r24, 0x0C	; 12
     fe8:	39 f6       	brne	.-114    	; 0xf78 <__vector_23+0x80>
                        rx_timer_off();
     fea:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     fee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ff2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
                        rx_leadingbyte = 1;
     ff6:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     ffa:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     ffe:	c0 91 72 01 	lds	r28, 0x0172	; 0x800172 <rx_msg+0xa>
    1002:	d0 91 73 01 	lds	r29, 0x0173	; 0x800173 <rx_msg+0xb>
    1006:	88 e6       	ldi	r24, 0x68	; 104
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 83 09 	call	0x1306	; 0x1306 <message_crc>
    100e:	c8 17       	cp	r28, r24
    1010:	d9 07       	cpc	r29, r25
    1012:	09 f0       	breq	.+2      	; 0x1016 <__vector_23+0x11e>
    1014:	b1 cf       	rjmp	.-158    	; 0xf78 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1016:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <rx_msg+0x9>
    101a:	87 ff       	sbrs	r24, 7
    101c:	61 c0       	rjmp	.+194    	; 0x10e0 <__vector_23+0x1e8>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    101e:	98 e7       	ldi	r25, 0x78	; 120
    1020:	98 0f       	add	r25, r24
    1022:	93 30       	cpi	r25, 0x03	; 3
    1024:	30 f0       	brcs	.+12     	; 0x1032 <__vector_23+0x13a>
        motors_off();
    1026:	53 98       	cbi	0x0a, 3	; 10
    1028:	23 98       	cbi	0x04, 3	; 4
    102a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    102e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    switch (rx_msg.type) {
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	fc 01       	movw	r30, r24
    1036:	e0 58       	subi	r30, 0x80	; 128
    1038:	f1 09       	sbc	r31, r1
    103a:	eb 30       	cpi	r30, 0x0B	; 11
    103c:	f1 05       	cpc	r31, r1
    103e:	08 f0       	brcs	.+2      	; 0x1042 <__vector_23+0x14a>
    1040:	9b cf       	rjmp	.-202    	; 0xf78 <__vector_23+0x80>
    1042:	e5 5c       	subi	r30, 0xC5	; 197
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    104a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    104e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1052:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            rx_leadingbit = 1;
    1056:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <rx_leadingbit>
            rx_leadingbyte = 1;
    105a:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_leadingbyte>
            rx_busy = 0;
    105e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
            adc_trigger_high_gain();
    1062:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1066:	83 ea       	ldi	r24, 0xA3	; 163
    1068:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    106c:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    1070:	83 cf       	rjmp	.-250    	; 0xf78 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1072:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1076:	86 fd       	sbrc	r24, 6
    1078:	fc cf       	rjmp	.-8      	; 0x1072 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    107a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    107e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1082:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <rx_dist+0x1>
    1086:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rx_dist>
                    adc_trigger_high_gain();
    108a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    108e:	83 ea       	ldi	r24, 0xA3	; 163
    1090:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
                    if (rx_bytevalue != 0) { // Collision detected.
    109a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
    109e:	99 23       	and	r25, r25
    10a0:	d1 f0       	breq	.+52     	; 0x10d6 <__vector_23+0x1de>
                        rx_timer_off();
    10a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    10a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
                        rx_leadingbyte = 1;
    10ae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
    10b2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    10b6:	60 cf       	rjmp	.-320    	; 0xf78 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    10b8:	21 e0       	ldi	r18, 0x01	; 1
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <__vector_23+0x1cc>
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <__vector_23+0x1c8>
    10c8:	cf 01       	movw	r24, r30
    10ca:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
    10ce:	89 2b       	or	r24, r25
    10d0:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rx_bytevalue>
    10d4:	51 cf       	rjmp	.-350    	; 0xf78 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    10d6:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <rx_leadingbyte>
                        rx_byteindex = 0;
    10da:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
    10de:	4c cf       	rjmp	.-360    	; 0xf78 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10e0:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
    10e4:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
    10e8:	6d e3       	ldi	r22, 0x3D	; 61
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	88 e6       	ldi	r24, 0x68	; 104
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	09 95       	icall
    10f2:	42 cf       	rjmp	.-380    	; 0xf78 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10f4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	09 f4       	brne	.+2      	; 0x10fe <__vector_23+0x206>
    10fc:	dd c0       	rjmp	.+442    	; 0x12b8 <__vector_23+0x3c0>
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <__vector_23+0x20a>
    1100:	ba c0       	rjmp	.+372    	; 0x1276 <__vector_23+0x37e>
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	09 f4       	brne	.+2      	; 0x1108 <__vector_23+0x210>
    1106:	c6 c0       	rjmp	.+396    	; 0x1294 <__vector_23+0x39c>
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	09 f0       	breq	.+2      	; 0x110e <__vector_23+0x216>
    110c:	b1 c0       	rjmp	.+354    	; 0x1270 <__vector_23+0x378>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    110e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
    1112:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x6>
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	09 f4       	brne	.+2      	; 0x111c <__vector_23+0x224>
    111a:	e3 c0       	rjmp	.+454    	; 0x12e2 <__vector_23+0x3ea>
    111c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x5>
                        prev_motion = MOVE_STOP;
    1120:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1124:	23 e0       	ldi	r18, 0x03	; 3
    1126:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    112a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    112e:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1132:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
    1136:	86 30       	cpi	r24, 0x06	; 6
    1138:	09 f4       	brne	.+2      	; 0x113c <__vector_23+0x244>
    113a:	1e cf       	rjmp	.-452    	; 0xf78 <__vector_23+0x80>
                motors_on();
    113c:	53 9a       	sbi	0x0a, 3	; 10
    113e:	23 9a       	sbi	0x04, 3	; 4
    1140:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1144:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                kilo_state = MOVING;
    1148:	86 e0       	ldi	r24, 0x06	; 6
    114a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    114e:	14 cf       	rjmp	.-472    	; 0xf78 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1150:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
    1154:	86 30       	cpi	r24, 0x06	; 6
    1156:	99 f0       	breq	.+38     	; 0x117e <__vector_23+0x286>
                motors_on();
    1158:	53 9a       	sbi	0x0a, 3	; 10
    115a:	23 9a       	sbi	0x04, 3	; 4
    115c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1160:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1164:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1166:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1168:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    116a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    116c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    116e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1170:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
    1174:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                kilo_state = MOVING;
    1178:	86 e0       	ldi	r24, 0x06	; 6
    117a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9c 01       	movw	r18, r24
    1184:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <rx_msg>
    1188:	02 c0       	rjmp	.+4      	; 0x118e <__vector_23+0x296>
    118a:	22 0f       	add	r18, r18
    118c:	33 1f       	adc	r19, r19
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <__vector_23+0x292>
    1192:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_uid>
    1196:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <kilo_uid+0x1>
    119a:	82 23       	and	r24, r18
    119c:	93 23       	and	r25, r19
    119e:	89 2b       	or	r24, r25
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <__vector_23+0x2ac>
    11a2:	86 c0       	rjmp	.+268    	; 0x12b0 <__vector_23+0x3b8>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    11a4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
                    }
                }
            }
        }
    }
}
    11a8:	e7 ce       	rjmp	.-562    	; 0xf78 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    11b0:	e3 ce       	rjmp	.-570    	; 0xf78 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    11b2:	e0 e0       	ldi	r30, 0x00	; 0
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    11b8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    11bc:	8d 7f       	andi	r24, 0xFD	; 253
    11be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    11c2:	16 bc       	out	0x26, r1	; 38
            bootload();
    11c4:	e0 e0       	ldi	r30, 0x00	; 0
    11c6:	f0 e7       	ldi	r31, 0x70	; 112
    11c8:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11ca:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>
    11ce:	d4 ce       	rjmp	.-600    	; 0xf78 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    11d6:	d0 ce       	rjmp	.-608    	; 0xf78 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11d8:	85 e0       	ldi	r24, 0x05	; 5
    11da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    11de:	cc ce       	rjmp	.-616    	; 0xf78 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__vector_23+0x2f2>
    11e8:	c7 ce       	rjmp	.-626    	; 0xf78 <__vector_23+0x80>
    11ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__vector_23+0x2fc>
    11f2:	c2 ce       	rjmp	.-636    	; 0xf78 <__vector_23+0x80>
                motors_on();
    11f4:	53 9a       	sbi	0x0a, 3	; 10
    11f6:	23 9a       	sbi	0x04, 3	; 4
    11f8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    11fc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                kilo_state = SETUP;
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    1206:	b8 ce       	rjmp	.-656    	; 0xf78 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1208:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
    120c:	86 30       	cpi	r24, 0x06	; 6
    120e:	09 f0       	breq	.+2      	; 0x1212 <__vector_23+0x31a>
    1210:	b3 ce       	rjmp	.-666    	; 0xf78 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1212:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_uid>
    1216:	80 eb       	ldi	r24, 0xB0	; 176
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    121e:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <kilo_uid+0x1>
    1222:	81 eb       	ldi	r24, 0xB1	; 177
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    122a:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_turn_left>
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1236:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <kilo_turn_right>
    123a:	89 e0       	ldi	r24, 0x09	; 9
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1242:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_straight_left>
    1246:	8c e0       	ldi	r24, 0x0C	; 12
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    124e:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_straight_right>
    1252:	84 e1       	ldi	r24, 0x14	; 20
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <eeprom_write_byte>
                        motors_off();
    125a:	53 98       	cbi	0x0a, 3	; 10
    125c:	23 98       	cbi	0x04, 3	; 4
    125e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1262:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                        kilo_state = IDLE;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    126c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1270:	81 11       	cpse	r24, r1
    1272:	5f cf       	rjmp	.-322    	; 0x1132 <__vector_23+0x23a>
    1274:	81 ce       	rjmp	.-766    	; 0xf78 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1276:	88 23       	and	r24, r24
    1278:	39 f2       	breq	.-114    	; 0x1208 <__vector_23+0x310>
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__vector_23+0x378>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    127e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_msg+0x1>
    1282:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_msg+0x2>
    1286:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <kilo_uid+0x1>
    128a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_uid>
                    cur_motion = MOVE_STOP;
    128e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
    1292:	4f cf       	rjmp	.-354    	; 0x1132 <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1294:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	71 f1       	breq	.+92     	; 0x12f8 <__vector_23+0x400>
    129c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg+0x4>
                        prev_motion = MOVE_STOP;
    12a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    12aa:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
    12ae:	41 cf       	rjmp	.-382    	; 0x1132 <__vector_23+0x23a>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
    12b6:	60 ce       	rjmp	.-832    	; 0xf78 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	51 f0       	breq	.+20     	; 0x12d4 <__vector_23+0x3dc>
    12c0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x3>
                        prev_motion = MOVE_STOP;
    12c4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_LEFT;
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    12ce:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
    12d2:	2f cf       	rjmp	.-418    	; 0x1132 <__vector_23+0x23a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12d4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x3>
    12d8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_turn_left>
    12dc:	89 13       	cpse	r24, r25
    12de:	f2 cf       	rjmp	.-28     	; 0x12c4 <__vector_23+0x3cc>
    12e0:	28 cf       	rjmp	.-432    	; 0x1132 <__vector_23+0x23a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12e2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_straight_right>
    12e6:	98 13       	cpse	r25, r24
    12e8:	19 cf       	rjmp	.-462    	; 0x111c <__vector_23+0x224>
    12ea:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x5>
    12ee:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <kilo_straight_left>
    12f2:	82 13       	cpse	r24, r18
    12f4:	15 cf       	rjmp	.-470    	; 0x1120 <__vector_23+0x228>
    12f6:	1d cf       	rjmp	.-454    	; 0x1132 <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12f8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg+0x4>
    12fc:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <kilo_turn_right>
    1300:	89 13       	cpse	r24, r25
    1302:	ce cf       	rjmp	.-100    	; 0x12a0 <__vector_23+0x3a8>
    1304:	16 cf       	rjmp	.-468    	; 0x1132 <__vector_23+0x23a>

00001306 <message_crc>:
    1306:	fc 01       	movw	r30, r24
    1308:	80 81       	ld	r24, Z
    130a:	2f ef       	ldi	r18, 0xFF	; 255
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	28 27       	eor	r18, r24
    1310:	02 2e       	mov	r0, r18
    1312:	22 95       	swap	r18
    1314:	20 7f       	andi	r18, 0xF0	; 240
    1316:	20 25       	eor	r18, r0
    1318:	03 2e       	mov	r0, r19
    131a:	32 2f       	mov	r19, r18
    131c:	22 95       	swap	r18
    131e:	2f 70       	andi	r18, 0x0F	; 15
    1320:	02 26       	eor	r0, r18
    1322:	26 95       	lsr	r18
    1324:	32 27       	eor	r19, r18
    1326:	23 27       	eor	r18, r19
    1328:	22 0f       	add	r18, r18
    132a:	22 0f       	add	r18, r18
    132c:	22 0f       	add	r18, r18
    132e:	20 25       	eor	r18, r0
    1330:	81 81       	ldd	r24, Z+1	; 0x01
    1332:	28 27       	eor	r18, r24
    1334:	02 2e       	mov	r0, r18
    1336:	22 95       	swap	r18
    1338:	20 7f       	andi	r18, 0xF0	; 240
    133a:	20 25       	eor	r18, r0
    133c:	03 2e       	mov	r0, r19
    133e:	32 2f       	mov	r19, r18
    1340:	22 95       	swap	r18
    1342:	2f 70       	andi	r18, 0x0F	; 15
    1344:	02 26       	eor	r0, r18
    1346:	26 95       	lsr	r18
    1348:	32 27       	eor	r19, r18
    134a:	23 27       	eor	r18, r19
    134c:	22 0f       	add	r18, r18
    134e:	22 0f       	add	r18, r18
    1350:	22 0f       	add	r18, r18
    1352:	20 25       	eor	r18, r0
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	28 27       	eor	r18, r24
    1358:	02 2e       	mov	r0, r18
    135a:	22 95       	swap	r18
    135c:	20 7f       	andi	r18, 0xF0	; 240
    135e:	20 25       	eor	r18, r0
    1360:	03 2e       	mov	r0, r19
    1362:	32 2f       	mov	r19, r18
    1364:	22 95       	swap	r18
    1366:	2f 70       	andi	r18, 0x0F	; 15
    1368:	02 26       	eor	r0, r18
    136a:	26 95       	lsr	r18
    136c:	32 27       	eor	r19, r18
    136e:	23 27       	eor	r18, r19
    1370:	22 0f       	add	r18, r18
    1372:	22 0f       	add	r18, r18
    1374:	22 0f       	add	r18, r18
    1376:	20 25       	eor	r18, r0
    1378:	83 81       	ldd	r24, Z+3	; 0x03
    137a:	28 27       	eor	r18, r24
    137c:	02 2e       	mov	r0, r18
    137e:	22 95       	swap	r18
    1380:	20 7f       	andi	r18, 0xF0	; 240
    1382:	20 25       	eor	r18, r0
    1384:	03 2e       	mov	r0, r19
    1386:	32 2f       	mov	r19, r18
    1388:	22 95       	swap	r18
    138a:	2f 70       	andi	r18, 0x0F	; 15
    138c:	02 26       	eor	r0, r18
    138e:	26 95       	lsr	r18
    1390:	32 27       	eor	r19, r18
    1392:	23 27       	eor	r18, r19
    1394:	22 0f       	add	r18, r18
    1396:	22 0f       	add	r18, r18
    1398:	22 0f       	add	r18, r18
    139a:	20 25       	eor	r18, r0
    139c:	84 81       	ldd	r24, Z+4	; 0x04
    139e:	28 27       	eor	r18, r24
    13a0:	02 2e       	mov	r0, r18
    13a2:	22 95       	swap	r18
    13a4:	20 7f       	andi	r18, 0xF0	; 240
    13a6:	20 25       	eor	r18, r0
    13a8:	03 2e       	mov	r0, r19
    13aa:	32 2f       	mov	r19, r18
    13ac:	22 95       	swap	r18
    13ae:	2f 70       	andi	r18, 0x0F	; 15
    13b0:	02 26       	eor	r0, r18
    13b2:	26 95       	lsr	r18
    13b4:	32 27       	eor	r19, r18
    13b6:	23 27       	eor	r18, r19
    13b8:	22 0f       	add	r18, r18
    13ba:	22 0f       	add	r18, r18
    13bc:	22 0f       	add	r18, r18
    13be:	20 25       	eor	r18, r0
    13c0:	85 81       	ldd	r24, Z+5	; 0x05
    13c2:	28 27       	eor	r18, r24
    13c4:	02 2e       	mov	r0, r18
    13c6:	22 95       	swap	r18
    13c8:	20 7f       	andi	r18, 0xF0	; 240
    13ca:	20 25       	eor	r18, r0
    13cc:	03 2e       	mov	r0, r19
    13ce:	32 2f       	mov	r19, r18
    13d0:	22 95       	swap	r18
    13d2:	2f 70       	andi	r18, 0x0F	; 15
    13d4:	02 26       	eor	r0, r18
    13d6:	26 95       	lsr	r18
    13d8:	32 27       	eor	r19, r18
    13da:	23 27       	eor	r18, r19
    13dc:	22 0f       	add	r18, r18
    13de:	22 0f       	add	r18, r18
    13e0:	22 0f       	add	r18, r18
    13e2:	20 25       	eor	r18, r0
    13e4:	86 81       	ldd	r24, Z+6	; 0x06
    13e6:	28 27       	eor	r18, r24
    13e8:	02 2e       	mov	r0, r18
    13ea:	22 95       	swap	r18
    13ec:	20 7f       	andi	r18, 0xF0	; 240
    13ee:	20 25       	eor	r18, r0
    13f0:	03 2e       	mov	r0, r19
    13f2:	32 2f       	mov	r19, r18
    13f4:	22 95       	swap	r18
    13f6:	2f 70       	andi	r18, 0x0F	; 15
    13f8:	02 26       	eor	r0, r18
    13fa:	26 95       	lsr	r18
    13fc:	32 27       	eor	r19, r18
    13fe:	23 27       	eor	r18, r19
    1400:	22 0f       	add	r18, r18
    1402:	22 0f       	add	r18, r18
    1404:	22 0f       	add	r18, r18
    1406:	20 25       	eor	r18, r0
    1408:	87 81       	ldd	r24, Z+7	; 0x07
    140a:	28 27       	eor	r18, r24
    140c:	02 2e       	mov	r0, r18
    140e:	22 95       	swap	r18
    1410:	20 7f       	andi	r18, 0xF0	; 240
    1412:	20 25       	eor	r18, r0
    1414:	03 2e       	mov	r0, r19
    1416:	32 2f       	mov	r19, r18
    1418:	22 95       	swap	r18
    141a:	2f 70       	andi	r18, 0x0F	; 15
    141c:	02 26       	eor	r0, r18
    141e:	26 95       	lsr	r18
    1420:	32 27       	eor	r19, r18
    1422:	23 27       	eor	r18, r19
    1424:	22 0f       	add	r18, r18
    1426:	22 0f       	add	r18, r18
    1428:	22 0f       	add	r18, r18
    142a:	20 25       	eor	r18, r0
    142c:	80 85       	ldd	r24, Z+8	; 0x08
    142e:	28 27       	eor	r18, r24
    1430:	02 2e       	mov	r0, r18
    1432:	22 95       	swap	r18
    1434:	20 7f       	andi	r18, 0xF0	; 240
    1436:	20 25       	eor	r18, r0
    1438:	03 2e       	mov	r0, r19
    143a:	32 2f       	mov	r19, r18
    143c:	22 95       	swap	r18
    143e:	2f 70       	andi	r18, 0x0F	; 15
    1440:	02 26       	eor	r0, r18
    1442:	26 95       	lsr	r18
    1444:	32 27       	eor	r19, r18
    1446:	23 27       	eor	r18, r19
    1448:	22 0f       	add	r18, r18
    144a:	22 0f       	add	r18, r18
    144c:	22 0f       	add	r18, r18
    144e:	20 25       	eor	r18, r0
    1450:	81 85       	ldd	r24, Z+9	; 0x09
    1452:	28 27       	eor	r18, r24
    1454:	02 2e       	mov	r0, r18
    1456:	22 95       	swap	r18
    1458:	20 7f       	andi	r18, 0xF0	; 240
    145a:	20 25       	eor	r18, r0
    145c:	03 2e       	mov	r0, r19
    145e:	32 2f       	mov	r19, r18
    1460:	22 95       	swap	r18
    1462:	2f 70       	andi	r18, 0x0F	; 15
    1464:	02 26       	eor	r0, r18
    1466:	26 95       	lsr	r18
    1468:	32 27       	eor	r19, r18
    146a:	23 27       	eor	r18, r19
    146c:	22 0f       	add	r18, r18
    146e:	22 0f       	add	r18, r18
    1470:	22 0f       	add	r18, r18
    1472:	20 25       	eor	r18, r0
    1474:	c9 01       	movw	r24, r18
    1476:	08 95       	ret

00001478 <message_send>:
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	a4 b1       	in	r26, 0x04	; 4
    147e:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <tx_mask>
    1482:	2a 2b       	or	r18, r26
    1484:	24 b9       	out	0x04, r18	; 4
    1486:	21 e0       	ldi	r18, 0x01	; 1
    1488:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    148c:	20 30       	cpi	r18, 0x00	; 0
    148e:	29 f0       	breq	.+10     	; 0x149a <message_send+0x22>
    1490:	00 00       	nop
    1492:	25 b1       	in	r18, 0x05	; 5
    1494:	23 2b       	or	r18, r19
    1496:	25 b9       	out	0x05, r18	; 5
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <message_send+0x2a>
    149a:	00 00       	nop
    149c:	00 00       	nop
    149e:	00 00       	nop
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <message_send+0x2a>
    14a2:	00 00       	nop
    14a4:	00 00       	nop
    14a6:	00 00       	nop
    14a8:	30 95       	com	r19
    14aa:	25 b1       	in	r18, 0x05	; 5
    14ac:	23 23       	and	r18, r19
    14ae:	25 b9       	out	0x05, r18	; 5
    14b0:	2e ea       	ldi	r18, 0xAE	; 174
    14b2:	2a 95       	dec	r18
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <message_send+0x3a>
    14b6:	2b ee       	ldi	r18, 0xEB	; 235

000014b8 <checkcollision>:
    14b8:	30 b7       	in	r19, 0x30	; 48
    14ba:	35 ff       	sbrs	r19, 5
    14bc:	0a c0       	rjmp	.+20     	; 0x14d2 <nocollision>
    14be:	a4 b9       	out	0x04, r26	; 4
    14c0:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    14c4:	30 95       	com	r19
    14c6:	25 b1       	in	r18, 0x05	; 5
    14c8:	23 23       	and	r18, r19
    14ca:	25 b9       	out	0x05, r18	; 5
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	08 95       	ret

000014d2 <nocollision>:
    14d2:	00 00       	nop
    14d4:	2a 95       	dec	r18
    14d6:	81 f7       	brne	.-32     	; 0x14b8 <checkcollision>
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    14de:	20 30       	cpi	r18, 0x00	; 0
    14e0:	29 f0       	breq	.+10     	; 0x14ec <nocollision+0x1a>
    14e2:	00 00       	nop
    14e4:	25 b1       	in	r18, 0x05	; 5
    14e6:	23 2b       	or	r18, r19
    14e8:	25 b9       	out	0x05, r18	; 5
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <nocollision+0x22>
    14ec:	00 00       	nop
    14ee:	00 00       	nop
    14f0:	00 00       	nop
    14f2:	00 c0       	rjmp	.+0      	; 0x14f4 <nocollision+0x22>
    14f4:	00 00       	nop
    14f6:	00 00       	nop
    14f8:	00 00       	nop
    14fa:	30 95       	com	r19
    14fc:	25 b1       	in	r18, 0x05	; 5
    14fe:	23 23       	and	r18, r19
    1500:	25 b9       	out	0x05, r18	; 5
    1502:	00 00       	nop
    1504:	24 e5       	ldi	r18, 0x54	; 84
    1506:	2a 95       	dec	r18
    1508:	f1 f7       	brne	.-4      	; 0x1506 <nocollision+0x34>
    150a:	fc 01       	movw	r30, r24
    150c:	8c e0       	ldi	r24, 0x0C	; 12

0000150e <sendbyte>:
    150e:	61 91       	ld	r22, Z+
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	61 60       	ori	r22, 0x01	; 1
    1518:	72 60       	ori	r23, 0x02	; 2
    151a:	9a e0       	ldi	r25, 0x0A	; 10
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	50 e0       	ldi	r21, 0x00	; 0

00001520 <sendbit>:
    1520:	9a 01       	movw	r18, r20
    1522:	26 23       	and	r18, r22
    1524:	37 23       	and	r19, r23
    1526:	23 2b       	or	r18, r19
    1528:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    152c:	20 30       	cpi	r18, 0x00	; 0
    152e:	29 f0       	breq	.+10     	; 0x153a <sendbit+0x1a>
    1530:	00 00       	nop
    1532:	25 b1       	in	r18, 0x05	; 5
    1534:	23 2b       	or	r18, r19
    1536:	25 b9       	out	0x05, r18	; 5
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <sendbit+0x22>
    153a:	00 00       	nop
    153c:	00 00       	nop
    153e:	00 00       	nop
    1540:	00 c0       	rjmp	.+0      	; 0x1542 <sendbit+0x22>
    1542:	00 00       	nop
    1544:	00 00       	nop
    1546:	00 00       	nop
    1548:	30 95       	com	r19
    154a:	25 b1       	in	r18, 0x05	; 5
    154c:	23 23       	and	r18, r19
    154e:	25 b9       	out	0x05, r18	; 5
    1550:	00 00       	nop
    1552:	21 e5       	ldi	r18, 0x51	; 81
    1554:	2a 95       	dec	r18
    1556:	f1 f7       	brne	.-4      	; 0x1554 <sendbit+0x34>
    1558:	44 0f       	add	r20, r20
    155a:	55 1f       	adc	r21, r21
    155c:	9a 95       	dec	r25
    155e:	01 f7       	brne	.-64     	; 0x1520 <sendbit>
    1560:	8a 95       	dec	r24
    1562:	a9 f6       	brne	.-86     	; 0x150e <sendbyte>
    1564:	20 b7       	in	r18, 0x30	; 48
    1566:	20 61       	ori	r18, 0x10	; 16
    1568:	20 bf       	out	0x30, r18	; 48
    156a:	a4 b9       	out	0x04, r26	; 4
    156c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    1570:	30 95       	com	r19
    1572:	25 b1       	in	r18, 0x05	; 5
    1574:	23 23       	and	r18, r19
    1576:	25 b9       	out	0x05, r18	; 5
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	08 95       	ret

0000157e <main>:
    message_sent = 1;
}

int main()
{
    kilo_init();
    157e:	0e 94 a3 00 	call	0x146	; 0x146 <kilo_init>
    // Register the message_tx callback function.
    kilo_message_tx = message_tx;
    1582:	81 e7       	ldi	r24, 0x71	; 113
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    158a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
    // Register the message_tx_success callback function.
    kilo_message_tx_success = message_tx_success;
    158e:	84 e7       	ldi	r24, 0x74	; 116
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <kilo_message_tx_success+0x1>
    1596:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <kilo_message_tx_success>
    kilo_start(setup, loop);
    159a:	69 e8       	ldi	r22, 0x89	; 137
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	8b e7       	ldi	r24, 0x7B	; 123
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 9f 01 	call	0x33e	; 0x33e <kilo_start>
    
    return 0;
}
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__divmodhi4>:
    15ac:	97 fb       	bst	r25, 7
    15ae:	07 2e       	mov	r0, r23
    15b0:	16 f4       	brtc	.+4      	; 0x15b6 <__divmodhi4+0xa>
    15b2:	00 94       	com	r0
    15b4:	07 d0       	rcall	.+14     	; 0x15c4 <__divmodhi4_neg1>
    15b6:	77 fd       	sbrc	r23, 7
    15b8:	09 d0       	rcall	.+18     	; 0x15cc <__divmodhi4_neg2>
    15ba:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__udivmodhi4>
    15be:	07 fc       	sbrc	r0, 7
    15c0:	05 d0       	rcall	.+10     	; 0x15cc <__divmodhi4_neg2>
    15c2:	3e f4       	brtc	.+14     	; 0x15d2 <__divmodhi4_exit>

000015c4 <__divmodhi4_neg1>:
    15c4:	90 95       	com	r25
    15c6:	81 95       	neg	r24
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	08 95       	ret

000015cc <__divmodhi4_neg2>:
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255

000015d2 <__divmodhi4_exit>:
    15d2:	08 95       	ret

000015d4 <__tablejump2__>:
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	05 90       	lpm	r0, Z+
    15da:	f4 91       	lpm	r31, Z
    15dc:	e0 2d       	mov	r30, r0
    15de:	09 94       	ijmp

000015e0 <__umulhisi3>:
    15e0:	a2 9f       	mul	r26, r18
    15e2:	b0 01       	movw	r22, r0
    15e4:	b3 9f       	mul	r27, r19
    15e6:	c0 01       	movw	r24, r0
    15e8:	a3 9f       	mul	r26, r19
    15ea:	70 0d       	add	r23, r0
    15ec:	81 1d       	adc	r24, r1
    15ee:	11 24       	eor	r1, r1
    15f0:	91 1d       	adc	r25, r1
    15f2:	b2 9f       	mul	r27, r18
    15f4:	70 0d       	add	r23, r0
    15f6:	81 1d       	adc	r24, r1
    15f8:	11 24       	eor	r1, r1
    15fa:	91 1d       	adc	r25, r1
    15fc:	08 95       	ret

000015fe <__udivmodhi4>:
    15fe:	aa 1b       	sub	r26, r26
    1600:	bb 1b       	sub	r27, r27
    1602:	51 e1       	ldi	r21, 0x11	; 17
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <__udivmodhi4_ep>

00001606 <__udivmodhi4_loop>:
    1606:	aa 1f       	adc	r26, r26
    1608:	bb 1f       	adc	r27, r27
    160a:	a6 17       	cp	r26, r22
    160c:	b7 07       	cpc	r27, r23
    160e:	10 f0       	brcs	.+4      	; 0x1614 <__udivmodhi4_ep>
    1610:	a6 1b       	sub	r26, r22
    1612:	b7 0b       	sbc	r27, r23

00001614 <__udivmodhi4_ep>:
    1614:	88 1f       	adc	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	5a 95       	dec	r21
    161a:	a9 f7       	brne	.-22     	; 0x1606 <__udivmodhi4_loop>
    161c:	80 95       	com	r24
    161e:	90 95       	com	r25
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	08 95       	ret

00001626 <__subsf3>:
    1626:	50 58       	subi	r21, 0x80	; 128

00001628 <__addsf3>:
    1628:	bb 27       	eor	r27, r27
    162a:	aa 27       	eor	r26, r26
    162c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__addsf3x>
    1630:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__fp_round>
    1634:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__fp_pscA>
    1638:	38 f0       	brcs	.+14     	; 0x1648 <__addsf3+0x20>
    163a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fp_pscB>
    163e:	20 f0       	brcs	.+8      	; 0x1648 <__addsf3+0x20>
    1640:	39 f4       	brne	.+14     	; 0x1650 <__addsf3+0x28>
    1642:	9f 3f       	cpi	r25, 0xFF	; 255
    1644:	19 f4       	brne	.+6      	; 0x164c <__addsf3+0x24>
    1646:	26 f4       	brtc	.+8      	; 0x1650 <__addsf3+0x28>
    1648:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_nan>
    164c:	0e f4       	brtc	.+2      	; 0x1650 <__addsf3+0x28>
    164e:	e0 95       	com	r30
    1650:	e7 fb       	bst	r30, 7
    1652:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_inf>

00001656 <__addsf3x>:
    1656:	e9 2f       	mov	r30, r25
    1658:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fp_split3>
    165c:	58 f3       	brcs	.-42     	; 0x1634 <__addsf3+0xc>
    165e:	ba 17       	cp	r27, r26
    1660:	62 07       	cpc	r22, r18
    1662:	73 07       	cpc	r23, r19
    1664:	84 07       	cpc	r24, r20
    1666:	95 07       	cpc	r25, r21
    1668:	20 f0       	brcs	.+8      	; 0x1672 <__addsf3x+0x1c>
    166a:	79 f4       	brne	.+30     	; 0x168a <__addsf3x+0x34>
    166c:	a6 f5       	brtc	.+104    	; 0x16d6 <__addsf3x+0x80>
    166e:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_zero>
    1672:	0e f4       	brtc	.+2      	; 0x1676 <__addsf3x+0x20>
    1674:	e0 95       	com	r30
    1676:	0b 2e       	mov	r0, r27
    1678:	ba 2f       	mov	r27, r26
    167a:	a0 2d       	mov	r26, r0
    167c:	0b 01       	movw	r0, r22
    167e:	b9 01       	movw	r22, r18
    1680:	90 01       	movw	r18, r0
    1682:	0c 01       	movw	r0, r24
    1684:	ca 01       	movw	r24, r20
    1686:	a0 01       	movw	r20, r0
    1688:	11 24       	eor	r1, r1
    168a:	ff 27       	eor	r31, r31
    168c:	59 1b       	sub	r21, r25
    168e:	99 f0       	breq	.+38     	; 0x16b6 <__addsf3x+0x60>
    1690:	59 3f       	cpi	r21, 0xF9	; 249
    1692:	50 f4       	brcc	.+20     	; 0x16a8 <__addsf3x+0x52>
    1694:	50 3e       	cpi	r21, 0xE0	; 224
    1696:	68 f1       	brcs	.+90     	; 0x16f2 <__addsf3x+0x9c>
    1698:	1a 16       	cp	r1, r26
    169a:	f0 40       	sbci	r31, 0x00	; 0
    169c:	a2 2f       	mov	r26, r18
    169e:	23 2f       	mov	r18, r19
    16a0:	34 2f       	mov	r19, r20
    16a2:	44 27       	eor	r20, r20
    16a4:	58 5f       	subi	r21, 0xF8	; 248
    16a6:	f3 cf       	rjmp	.-26     	; 0x168e <__addsf3x+0x38>
    16a8:	46 95       	lsr	r20
    16aa:	37 95       	ror	r19
    16ac:	27 95       	ror	r18
    16ae:	a7 95       	ror	r26
    16b0:	f0 40       	sbci	r31, 0x00	; 0
    16b2:	53 95       	inc	r21
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <__addsf3x+0x52>
    16b6:	7e f4       	brtc	.+30     	; 0x16d6 <__addsf3x+0x80>
    16b8:	1f 16       	cp	r1, r31
    16ba:	ba 0b       	sbc	r27, r26
    16bc:	62 0b       	sbc	r22, r18
    16be:	73 0b       	sbc	r23, r19
    16c0:	84 0b       	sbc	r24, r20
    16c2:	ba f0       	brmi	.+46     	; 0x16f2 <__addsf3x+0x9c>
    16c4:	91 50       	subi	r25, 0x01	; 1
    16c6:	a1 f0       	breq	.+40     	; 0x16f0 <__addsf3x+0x9a>
    16c8:	ff 0f       	add	r31, r31
    16ca:	bb 1f       	adc	r27, r27
    16cc:	66 1f       	adc	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	c2 f7       	brpl	.-16     	; 0x16c4 <__addsf3x+0x6e>
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <__addsf3x+0x9c>
    16d6:	ba 0f       	add	r27, r26
    16d8:	62 1f       	adc	r22, r18
    16da:	73 1f       	adc	r23, r19
    16dc:	84 1f       	adc	r24, r20
    16de:	48 f4       	brcc	.+18     	; 0x16f2 <__addsf3x+0x9c>
    16e0:	87 95       	ror	r24
    16e2:	77 95       	ror	r23
    16e4:	67 95       	ror	r22
    16e6:	b7 95       	ror	r27
    16e8:	f7 95       	ror	r31
    16ea:	9e 3f       	cpi	r25, 0xFE	; 254
    16ec:	08 f0       	brcs	.+2      	; 0x16f0 <__addsf3x+0x9a>
    16ee:	b0 cf       	rjmp	.-160    	; 0x1650 <__addsf3+0x28>
    16f0:	93 95       	inc	r25
    16f2:	88 0f       	add	r24, r24
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <__addsf3x+0xa2>
    16f6:	99 27       	eor	r25, r25
    16f8:	ee 0f       	add	r30, r30
    16fa:	97 95       	ror	r25
    16fc:	87 95       	ror	r24
    16fe:	08 95       	ret

00001700 <__divsf3>:
    1700:	0e 94 94 0b 	call	0x1728	; 0x1728 <__divsf3x>
    1704:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__fp_round>
    1708:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fp_pscB>
    170c:	58 f0       	brcs	.+22     	; 0x1724 <__divsf3+0x24>
    170e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__fp_pscA>
    1712:	40 f0       	brcs	.+16     	; 0x1724 <__divsf3+0x24>
    1714:	29 f4       	brne	.+10     	; 0x1720 <__divsf3+0x20>
    1716:	5f 3f       	cpi	r21, 0xFF	; 255
    1718:	29 f0       	breq	.+10     	; 0x1724 <__divsf3+0x24>
    171a:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_inf>
    171e:	51 11       	cpse	r21, r1
    1720:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_szero>
    1724:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_nan>

00001728 <__divsf3x>:
    1728:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fp_split3>
    172c:	68 f3       	brcs	.-38     	; 0x1708 <__divsf3+0x8>

0000172e <__divsf3_pse>:
    172e:	99 23       	and	r25, r25
    1730:	b1 f3       	breq	.-20     	; 0x171e <__divsf3+0x1e>
    1732:	55 23       	and	r21, r21
    1734:	91 f3       	breq	.-28     	; 0x171a <__divsf3+0x1a>
    1736:	95 1b       	sub	r25, r21
    1738:	55 0b       	sbc	r21, r21
    173a:	bb 27       	eor	r27, r27
    173c:	aa 27       	eor	r26, r26
    173e:	62 17       	cp	r22, r18
    1740:	73 07       	cpc	r23, r19
    1742:	84 07       	cpc	r24, r20
    1744:	38 f0       	brcs	.+14     	; 0x1754 <__divsf3_pse+0x26>
    1746:	9f 5f       	subi	r25, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	44 1f       	adc	r20, r20
    1750:	aa 1f       	adc	r26, r26
    1752:	a9 f3       	breq	.-22     	; 0x173e <__divsf3_pse+0x10>
    1754:	35 d0       	rcall	.+106    	; 0x17c0 <__divsf3_pse+0x92>
    1756:	0e 2e       	mov	r0, r30
    1758:	3a f0       	brmi	.+14     	; 0x1768 <__divsf3_pse+0x3a>
    175a:	e0 e8       	ldi	r30, 0x80	; 128
    175c:	32 d0       	rcall	.+100    	; 0x17c2 <__divsf3_pse+0x94>
    175e:	91 50       	subi	r25, 0x01	; 1
    1760:	50 40       	sbci	r21, 0x00	; 0
    1762:	e6 95       	lsr	r30
    1764:	00 1c       	adc	r0, r0
    1766:	ca f7       	brpl	.-14     	; 0x175a <__divsf3_pse+0x2c>
    1768:	2b d0       	rcall	.+86     	; 0x17c0 <__divsf3_pse+0x92>
    176a:	fe 2f       	mov	r31, r30
    176c:	29 d0       	rcall	.+82     	; 0x17c0 <__divsf3_pse+0x92>
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	bb 1f       	adc	r27, r27
    1776:	26 17       	cp	r18, r22
    1778:	37 07       	cpc	r19, r23
    177a:	48 07       	cpc	r20, r24
    177c:	ab 07       	cpc	r26, r27
    177e:	b0 e8       	ldi	r27, 0x80	; 128
    1780:	09 f0       	breq	.+2      	; 0x1784 <__divsf3_pse+0x56>
    1782:	bb 0b       	sbc	r27, r27
    1784:	80 2d       	mov	r24, r0
    1786:	bf 01       	movw	r22, r30
    1788:	ff 27       	eor	r31, r31
    178a:	93 58       	subi	r25, 0x83	; 131
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	3a f0       	brmi	.+14     	; 0x179e <__divsf3_pse+0x70>
    1790:	9e 3f       	cpi	r25, 0xFE	; 254
    1792:	51 05       	cpc	r21, r1
    1794:	78 f0       	brcs	.+30     	; 0x17b4 <__divsf3_pse+0x86>
    1796:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_inf>
    179a:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_szero>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	e4 f3       	brlt	.-8      	; 0x179a <__divsf3_pse+0x6c>
    17a2:	98 3e       	cpi	r25, 0xE8	; 232
    17a4:	d4 f3       	brlt	.-12     	; 0x179a <__divsf3_pse+0x6c>
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f7 95       	ror	r31
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__divsf3_pse+0x78>
    17b4:	88 0f       	add	r24, r24
    17b6:	91 1d       	adc	r25, r1
    17b8:	96 95       	lsr	r25
    17ba:	87 95       	ror	r24
    17bc:	97 f9       	bld	r25, 7
    17be:	08 95       	ret
    17c0:	e1 e0       	ldi	r30, 0x01	; 1
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	bb 1f       	adc	r27, r27
    17ca:	62 17       	cp	r22, r18
    17cc:	73 07       	cpc	r23, r19
    17ce:	84 07       	cpc	r24, r20
    17d0:	ba 07       	cpc	r27, r26
    17d2:	20 f0       	brcs	.+8      	; 0x17dc <__divsf3_pse+0xae>
    17d4:	62 1b       	sub	r22, r18
    17d6:	73 0b       	sbc	r23, r19
    17d8:	84 0b       	sbc	r24, r20
    17da:	ba 0b       	sbc	r27, r26
    17dc:	ee 1f       	adc	r30, r30
    17de:	88 f7       	brcc	.-30     	; 0x17c2 <__divsf3_pse+0x94>
    17e0:	e0 95       	com	r30
    17e2:	08 95       	ret

000017e4 <__fixsfsi>:
    17e4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__fixunssfsi>
    17e8:	68 94       	set
    17ea:	b1 11       	cpse	r27, r1
    17ec:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_szero>
    17f0:	08 95       	ret

000017f2 <__fixunssfsi>:
    17f2:	0e 94 95 0c 	call	0x192a	; 0x192a <__fp_splitA>
    17f6:	88 f0       	brcs	.+34     	; 0x181a <__fixunssfsi+0x28>
    17f8:	9f 57       	subi	r25, 0x7F	; 127
    17fa:	98 f0       	brcs	.+38     	; 0x1822 <__fixunssfsi+0x30>
    17fc:	b9 2f       	mov	r27, r25
    17fe:	99 27       	eor	r25, r25
    1800:	b7 51       	subi	r27, 0x17	; 23
    1802:	b0 f0       	brcs	.+44     	; 0x1830 <__fixunssfsi+0x3e>
    1804:	e1 f0       	breq	.+56     	; 0x183e <__fixunssfsi+0x4c>
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	1a f0       	brmi	.+6      	; 0x1816 <__fixunssfsi+0x24>
    1810:	ba 95       	dec	r27
    1812:	c9 f7       	brne	.-14     	; 0x1806 <__fixunssfsi+0x14>
    1814:	14 c0       	rjmp	.+40     	; 0x183e <__fixunssfsi+0x4c>
    1816:	b1 30       	cpi	r27, 0x01	; 1
    1818:	91 f0       	breq	.+36     	; 0x183e <__fixunssfsi+0x4c>
    181a:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_zero>
    181e:	b1 e0       	ldi	r27, 0x01	; 1
    1820:	08 95       	ret
    1822:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_zero>
    1826:	67 2f       	mov	r22, r23
    1828:	78 2f       	mov	r23, r24
    182a:	88 27       	eor	r24, r24
    182c:	b8 5f       	subi	r27, 0xF8	; 248
    182e:	39 f0       	breq	.+14     	; 0x183e <__fixunssfsi+0x4c>
    1830:	b9 3f       	cpi	r27, 0xF9	; 249
    1832:	cc f3       	brlt	.-14     	; 0x1826 <__fixunssfsi+0x34>
    1834:	86 95       	lsr	r24
    1836:	77 95       	ror	r23
    1838:	67 95       	ror	r22
    183a:	b3 95       	inc	r27
    183c:	d9 f7       	brne	.-10     	; 0x1834 <__fixunssfsi+0x42>
    183e:	3e f4       	brtc	.+14     	; 0x184e <__fixunssfsi+0x5c>
    1840:	90 95       	com	r25
    1842:	80 95       	com	r24
    1844:	70 95       	com	r23
    1846:	61 95       	neg	r22
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	8f 4f       	sbci	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	08 95       	ret

00001850 <__floatunsisf>:
    1850:	e8 94       	clt
    1852:	09 c0       	rjmp	.+18     	; 0x1866 <__floatsisf+0x12>

00001854 <__floatsisf>:
    1854:	97 fb       	bst	r25, 7
    1856:	3e f4       	brtc	.+14     	; 0x1866 <__floatsisf+0x12>
    1858:	90 95       	com	r25
    185a:	80 95       	com	r24
    185c:	70 95       	com	r23
    185e:	61 95       	neg	r22
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	8f 4f       	sbci	r24, 0xFF	; 255
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	99 23       	and	r25, r25
    1868:	a9 f0       	breq	.+42     	; 0x1894 <__floatsisf+0x40>
    186a:	f9 2f       	mov	r31, r25
    186c:	96 e9       	ldi	r25, 0x96	; 150
    186e:	bb 27       	eor	r27, r27
    1870:	93 95       	inc	r25
    1872:	f6 95       	lsr	r31
    1874:	87 95       	ror	r24
    1876:	77 95       	ror	r23
    1878:	67 95       	ror	r22
    187a:	b7 95       	ror	r27
    187c:	f1 11       	cpse	r31, r1
    187e:	f8 cf       	rjmp	.-16     	; 0x1870 <__floatsisf+0x1c>
    1880:	fa f4       	brpl	.+62     	; 0x18c0 <__floatsisf+0x6c>
    1882:	bb 0f       	add	r27, r27
    1884:	11 f4       	brne	.+4      	; 0x188a <__floatsisf+0x36>
    1886:	60 ff       	sbrs	r22, 0
    1888:	1b c0       	rjmp	.+54     	; 0x18c0 <__floatsisf+0x6c>
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	16 c0       	rjmp	.+44     	; 0x18c0 <__floatsisf+0x6c>
    1894:	88 23       	and	r24, r24
    1896:	11 f0       	breq	.+4      	; 0x189c <__floatsisf+0x48>
    1898:	96 e9       	ldi	r25, 0x96	; 150
    189a:	11 c0       	rjmp	.+34     	; 0x18be <__floatsisf+0x6a>
    189c:	77 23       	and	r23, r23
    189e:	21 f0       	breq	.+8      	; 0x18a8 <__floatsisf+0x54>
    18a0:	9e e8       	ldi	r25, 0x8E	; 142
    18a2:	87 2f       	mov	r24, r23
    18a4:	76 2f       	mov	r23, r22
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <__floatsisf+0x5e>
    18a8:	66 23       	and	r22, r22
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <__floatsisf+0x74>
    18ac:	96 e8       	ldi	r25, 0x86	; 134
    18ae:	86 2f       	mov	r24, r22
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	2a f0       	brmi	.+10     	; 0x18c0 <__floatsisf+0x6c>
    18b6:	9a 95       	dec	r25
    18b8:	66 0f       	add	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	da f7       	brpl	.-10     	; 0x18b6 <__floatsisf+0x62>
    18c0:	88 0f       	add	r24, r24
    18c2:	96 95       	lsr	r25
    18c4:	87 95       	ror	r24
    18c6:	97 f9       	bld	r25, 7
    18c8:	08 95       	ret

000018ca <__fp_inf>:
    18ca:	97 f9       	bld	r25, 7
    18cc:	9f 67       	ori	r25, 0x7F	; 127
    18ce:	80 e8       	ldi	r24, 0x80	; 128
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <__fp_nan>:
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	80 ec       	ldi	r24, 0xC0	; 192
    18da:	08 95       	ret

000018dc <__fp_pscA>:
    18dc:	00 24       	eor	r0, r0
    18de:	0a 94       	dec	r0
    18e0:	16 16       	cp	r1, r22
    18e2:	17 06       	cpc	r1, r23
    18e4:	18 06       	cpc	r1, r24
    18e6:	09 06       	cpc	r0, r25
    18e8:	08 95       	ret

000018ea <__fp_pscB>:
    18ea:	00 24       	eor	r0, r0
    18ec:	0a 94       	dec	r0
    18ee:	12 16       	cp	r1, r18
    18f0:	13 06       	cpc	r1, r19
    18f2:	14 06       	cpc	r1, r20
    18f4:	05 06       	cpc	r0, r21
    18f6:	08 95       	ret

000018f8 <__fp_round>:
    18f8:	09 2e       	mov	r0, r25
    18fa:	03 94       	inc	r0
    18fc:	00 0c       	add	r0, r0
    18fe:	11 f4       	brne	.+4      	; 0x1904 <__fp_round+0xc>
    1900:	88 23       	and	r24, r24
    1902:	52 f0       	brmi	.+20     	; 0x1918 <__fp_round+0x20>
    1904:	bb 0f       	add	r27, r27
    1906:	40 f4       	brcc	.+16     	; 0x1918 <__fp_round+0x20>
    1908:	bf 2b       	or	r27, r31
    190a:	11 f4       	brne	.+4      	; 0x1910 <__fp_round+0x18>
    190c:	60 ff       	sbrs	r22, 0
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <__fp_round+0x20>
    1910:	6f 5f       	subi	r22, 0xFF	; 255
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	8f 4f       	sbci	r24, 0xFF	; 255
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	08 95       	ret

0000191a <__fp_split3>:
    191a:	57 fd       	sbrc	r21, 7
    191c:	90 58       	subi	r25, 0x80	; 128
    191e:	44 0f       	add	r20, r20
    1920:	55 1f       	adc	r21, r21
    1922:	59 f0       	breq	.+22     	; 0x193a <__fp_splitA+0x10>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	71 f0       	breq	.+28     	; 0x1944 <__fp_splitA+0x1a>
    1928:	47 95       	ror	r20

0000192a <__fp_splitA>:
    192a:	88 0f       	add	r24, r24
    192c:	97 fb       	bst	r25, 7
    192e:	99 1f       	adc	r25, r25
    1930:	61 f0       	breq	.+24     	; 0x194a <__fp_splitA+0x20>
    1932:	9f 3f       	cpi	r25, 0xFF	; 255
    1934:	79 f0       	breq	.+30     	; 0x1954 <__fp_splitA+0x2a>
    1936:	87 95       	ror	r24
    1938:	08 95       	ret
    193a:	12 16       	cp	r1, r18
    193c:	13 06       	cpc	r1, r19
    193e:	14 06       	cpc	r1, r20
    1940:	55 1f       	adc	r21, r21
    1942:	f2 cf       	rjmp	.-28     	; 0x1928 <__fp_split3+0xe>
    1944:	46 95       	lsr	r20
    1946:	f1 df       	rcall	.-30     	; 0x192a <__fp_splitA>
    1948:	08 c0       	rjmp	.+16     	; 0x195a <__fp_splitA+0x30>
    194a:	16 16       	cp	r1, r22
    194c:	17 06       	cpc	r1, r23
    194e:	18 06       	cpc	r1, r24
    1950:	99 1f       	adc	r25, r25
    1952:	f1 cf       	rjmp	.-30     	; 0x1936 <__fp_splitA+0xc>
    1954:	86 95       	lsr	r24
    1956:	71 05       	cpc	r23, r1
    1958:	61 05       	cpc	r22, r1
    195a:	08 94       	sec
    195c:	08 95       	ret

0000195e <__fp_zero>:
    195e:	e8 94       	clt

00001960 <__fp_szero>:
    1960:	bb 27       	eor	r27, r27
    1962:	66 27       	eor	r22, r22
    1964:	77 27       	eor	r23, r23
    1966:	cb 01       	movw	r24, r22
    1968:	97 f9       	bld	r25, 7
    196a:	08 95       	ret

0000196c <__mulsf3>:
    196c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__mulsf3x>
    1970:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__fp_round>
    1974:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__fp_pscA>
    1978:	38 f0       	brcs	.+14     	; 0x1988 <__mulsf3+0x1c>
    197a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fp_pscB>
    197e:	20 f0       	brcs	.+8      	; 0x1988 <__mulsf3+0x1c>
    1980:	95 23       	and	r25, r21
    1982:	11 f0       	breq	.+4      	; 0x1988 <__mulsf3+0x1c>
    1984:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_inf>
    1988:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_nan>
    198c:	11 24       	eor	r1, r1
    198e:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_szero>

00001992 <__mulsf3x>:
    1992:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fp_split3>
    1996:	70 f3       	brcs	.-36     	; 0x1974 <__mulsf3+0x8>

00001998 <__mulsf3_pse>:
    1998:	95 9f       	mul	r25, r21
    199a:	c1 f3       	breq	.-16     	; 0x198c <__mulsf3+0x20>
    199c:	95 0f       	add	r25, r21
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	55 1f       	adc	r21, r21
    19a2:	62 9f       	mul	r22, r18
    19a4:	f0 01       	movw	r30, r0
    19a6:	72 9f       	mul	r23, r18
    19a8:	bb 27       	eor	r27, r27
    19aa:	f0 0d       	add	r31, r0
    19ac:	b1 1d       	adc	r27, r1
    19ae:	63 9f       	mul	r22, r19
    19b0:	aa 27       	eor	r26, r26
    19b2:	f0 0d       	add	r31, r0
    19b4:	b1 1d       	adc	r27, r1
    19b6:	aa 1f       	adc	r26, r26
    19b8:	64 9f       	mul	r22, r20
    19ba:	66 27       	eor	r22, r22
    19bc:	b0 0d       	add	r27, r0
    19be:	a1 1d       	adc	r26, r1
    19c0:	66 1f       	adc	r22, r22
    19c2:	82 9f       	mul	r24, r18
    19c4:	22 27       	eor	r18, r18
    19c6:	b0 0d       	add	r27, r0
    19c8:	a1 1d       	adc	r26, r1
    19ca:	62 1f       	adc	r22, r18
    19cc:	73 9f       	mul	r23, r19
    19ce:	b0 0d       	add	r27, r0
    19d0:	a1 1d       	adc	r26, r1
    19d2:	62 1f       	adc	r22, r18
    19d4:	83 9f       	mul	r24, r19
    19d6:	a0 0d       	add	r26, r0
    19d8:	61 1d       	adc	r22, r1
    19da:	22 1f       	adc	r18, r18
    19dc:	74 9f       	mul	r23, r20
    19de:	33 27       	eor	r19, r19
    19e0:	a0 0d       	add	r26, r0
    19e2:	61 1d       	adc	r22, r1
    19e4:	23 1f       	adc	r18, r19
    19e6:	84 9f       	mul	r24, r20
    19e8:	60 0d       	add	r22, r0
    19ea:	21 1d       	adc	r18, r1
    19ec:	82 2f       	mov	r24, r18
    19ee:	76 2f       	mov	r23, r22
    19f0:	6a 2f       	mov	r22, r26
    19f2:	11 24       	eor	r1, r1
    19f4:	9f 57       	subi	r25, 0x7F	; 127
    19f6:	50 40       	sbci	r21, 0x00	; 0
    19f8:	9a f0       	brmi	.+38     	; 0x1a20 <__mulsf3_pse+0x88>
    19fa:	f1 f0       	breq	.+60     	; 0x1a38 <__mulsf3_pse+0xa0>
    19fc:	88 23       	and	r24, r24
    19fe:	4a f0       	brmi	.+18     	; 0x1a12 <__mulsf3_pse+0x7a>
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	bb 1f       	adc	r27, r27
    1a06:	66 1f       	adc	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	91 50       	subi	r25, 0x01	; 1
    1a0e:	50 40       	sbci	r21, 0x00	; 0
    1a10:	a9 f7       	brne	.-22     	; 0x19fc <__mulsf3_pse+0x64>
    1a12:	9e 3f       	cpi	r25, 0xFE	; 254
    1a14:	51 05       	cpc	r21, r1
    1a16:	80 f0       	brcs	.+32     	; 0x1a38 <__mulsf3_pse+0xa0>
    1a18:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_inf>
    1a1c:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_szero>
    1a20:	5f 3f       	cpi	r21, 0xFF	; 255
    1a22:	e4 f3       	brlt	.-8      	; 0x1a1c <__mulsf3_pse+0x84>
    1a24:	98 3e       	cpi	r25, 0xE8	; 232
    1a26:	d4 f3       	brlt	.-12     	; 0x1a1c <__mulsf3_pse+0x84>
    1a28:	86 95       	lsr	r24
    1a2a:	77 95       	ror	r23
    1a2c:	67 95       	ror	r22
    1a2e:	b7 95       	ror	r27
    1a30:	f7 95       	ror	r31
    1a32:	e7 95       	ror	r30
    1a34:	9f 5f       	subi	r25, 0xFF	; 255
    1a36:	c1 f7       	brne	.-16     	; 0x1a28 <__mulsf3_pse+0x90>
    1a38:	fe 2b       	or	r31, r30
    1a3a:	88 0f       	add	r24, r24
    1a3c:	91 1d       	adc	r25, r1
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret

00001a46 <do_rand>:
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
    1a5c:	68 81       	ld	r22, Y
    1a5e:	79 81       	ldd	r23, Y+1	; 0x01
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	9b 81       	ldd	r25, Y+3	; 0x03
    1a64:	61 15       	cp	r22, r1
    1a66:	71 05       	cpc	r23, r1
    1a68:	81 05       	cpc	r24, r1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <do_rand+0x30>
    1a6e:	64 e2       	ldi	r22, 0x24	; 36
    1a70:	79 ed       	ldi	r23, 0xD9	; 217
    1a72:	8b e5       	ldi	r24, 0x5B	; 91
    1a74:	97 e0       	ldi	r25, 0x07	; 7
    1a76:	2d e1       	ldi	r18, 0x1D	; 29
    1a78:	33 ef       	ldi	r19, 0xF3	; 243
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__divmodsi4>
    1a82:	49 01       	movw	r8, r18
    1a84:	5a 01       	movw	r10, r20
    1a86:	9b 01       	movw	r18, r22
    1a88:	ac 01       	movw	r20, r24
    1a8a:	a7 ea       	ldi	r26, 0xA7	; 167
    1a8c:	b1 e4       	ldi	r27, 0x41	; 65
    1a8e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__muluhisi3>
    1a92:	6b 01       	movw	r12, r22
    1a94:	7c 01       	movw	r14, r24
    1a96:	ac ee       	ldi	r26, 0xEC	; 236
    1a98:	b4 ef       	ldi	r27, 0xF4	; 244
    1a9a:	a5 01       	movw	r20, r10
    1a9c:	94 01       	movw	r18, r8
    1a9e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulohisi3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8c 0d       	add	r24, r12
    1aa8:	9d 1d       	adc	r25, r13
    1aaa:	ae 1d       	adc	r26, r14
    1aac:	bf 1d       	adc	r27, r15
    1aae:	b7 ff       	sbrs	r27, 7
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <do_rand+0x72>
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	a1 09       	sbc	r26, r1
    1ab6:	b0 48       	sbci	r27, 0x80	; 128
    1ab8:	88 83       	st	Y, r24
    1aba:	99 83       	std	Y+1, r25	; 0x01
    1abc:	aa 83       	std	Y+2, r26	; 0x02
    1abe:	bb 83       	std	Y+3, r27	; 0x03
    1ac0:	9f 77       	andi	r25, 0x7F	; 127
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	cf 90       	pop	r12
    1ace:	bf 90       	pop	r11
    1ad0:	af 90       	pop	r10
    1ad2:	9f 90       	pop	r9
    1ad4:	8f 90       	pop	r8
    1ad6:	08 95       	ret

00001ad8 <rand_r>:
    1ad8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <do_rand>
    1adc:	08 95       	ret

00001ade <rand>:
    1ade:	87 e0       	ldi	r24, 0x07	; 7
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <do_rand>
    1ae6:	08 95       	ret

00001ae8 <srand>:
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    1af0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1af4:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1af8:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1afc:	08 95       	ret

00001afe <eeprom_read_byte>:
    1afe:	f9 99       	sbic	0x1f, 1	; 31
    1b00:	fe cf       	rjmp	.-4      	; 0x1afe <eeprom_read_byte>
    1b02:	92 bd       	out	0x22, r25	; 34
    1b04:	81 bd       	out	0x21, r24	; 33
    1b06:	f8 9a       	sbi	0x1f, 0	; 31
    1b08:	99 27       	eor	r25, r25
    1b0a:	80 b5       	in	r24, 0x20	; 32
    1b0c:	08 95       	ret

00001b0e <eeprom_write_byte>:
    1b0e:	26 2f       	mov	r18, r22

00001b10 <eeprom_write_r18>:
    1b10:	f9 99       	sbic	0x1f, 1	; 31
    1b12:	fe cf       	rjmp	.-4      	; 0x1b10 <eeprom_write_r18>
    1b14:	1f ba       	out	0x1f, r1	; 31
    1b16:	92 bd       	out	0x22, r25	; 34
    1b18:	81 bd       	out	0x21, r24	; 33
    1b1a:	20 bd       	out	0x20, r18	; 32
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	fa 9a       	sbi	0x1f, 2	; 31
    1b22:	f9 9a       	sbi	0x1f, 1	; 31
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	08 95       	ret

00001b2a <__divmodsi4>:
    1b2a:	05 2e       	mov	r0, r21
    1b2c:	97 fb       	bst	r25, 7
    1b2e:	1e f4       	brtc	.+6      	; 0x1b36 <__divmodsi4+0xc>
    1b30:	00 94       	com	r0
    1b32:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__negsi2>
    1b36:	57 fd       	sbrc	r21, 7
    1b38:	07 d0       	rcall	.+14     	; 0x1b48 <__divmodsi4_neg2>
    1b3a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__udivmodsi4>
    1b3e:	07 fc       	sbrc	r0, 7
    1b40:	03 d0       	rcall	.+6      	; 0x1b48 <__divmodsi4_neg2>
    1b42:	4e f4       	brtc	.+18     	; 0x1b56 <__divmodsi4_exit>
    1b44:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__negsi2>

00001b48 <__divmodsi4_neg2>:
    1b48:	50 95       	com	r21
    1b4a:	40 95       	com	r20
    1b4c:	30 95       	com	r19
    1b4e:	21 95       	neg	r18
    1b50:	3f 4f       	sbci	r19, 0xFF	; 255
    1b52:	4f 4f       	sbci	r20, 0xFF	; 255
    1b54:	5f 4f       	sbci	r21, 0xFF	; 255

00001b56 <__divmodsi4_exit>:
    1b56:	08 95       	ret

00001b58 <__negsi2>:
    1b58:	90 95       	com	r25
    1b5a:	80 95       	com	r24
    1b5c:	70 95       	com	r23
    1b5e:	61 95       	neg	r22
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	08 95       	ret

00001b68 <__muluhisi3>:
    1b68:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__umulhisi3>
    1b6c:	a5 9f       	mul	r26, r21
    1b6e:	90 0d       	add	r25, r0
    1b70:	b4 9f       	mul	r27, r20
    1b72:	90 0d       	add	r25, r0
    1b74:	a4 9f       	mul	r26, r20
    1b76:	80 0d       	add	r24, r0
    1b78:	91 1d       	adc	r25, r1
    1b7a:	11 24       	eor	r1, r1
    1b7c:	08 95       	ret

00001b7e <__mulshisi3>:
    1b7e:	b7 ff       	sbrs	r27, 7
    1b80:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__muluhisi3>

00001b84 <__mulohisi3>:
    1b84:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__muluhisi3>
    1b88:	82 1b       	sub	r24, r18
    1b8a:	93 0b       	sbc	r25, r19
    1b8c:	08 95       	ret

00001b8e <__udivmodsi4>:
    1b8e:	a1 e2       	ldi	r26, 0x21	; 33
    1b90:	1a 2e       	mov	r1, r26
    1b92:	aa 1b       	sub	r26, r26
    1b94:	bb 1b       	sub	r27, r27
    1b96:	fd 01       	movw	r30, r26
    1b98:	0d c0       	rjmp	.+26     	; 0x1bb4 <__udivmodsi4_ep>

00001b9a <__udivmodsi4_loop>:
    1b9a:	aa 1f       	adc	r26, r26
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	ee 1f       	adc	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	a2 17       	cp	r26, r18
    1ba4:	b3 07       	cpc	r27, r19
    1ba6:	e4 07       	cpc	r30, r20
    1ba8:	f5 07       	cpc	r31, r21
    1baa:	20 f0       	brcs	.+8      	; 0x1bb4 <__udivmodsi4_ep>
    1bac:	a2 1b       	sub	r26, r18
    1bae:	b3 0b       	sbc	r27, r19
    1bb0:	e4 0b       	sbc	r30, r20
    1bb2:	f5 0b       	sbc	r31, r21

00001bb4 <__udivmodsi4_ep>:
    1bb4:	66 1f       	adc	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	1a 94       	dec	r1
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <__udivmodsi4_loop>
    1bc0:	60 95       	com	r22
    1bc2:	70 95       	com	r23
    1bc4:	80 95       	com	r24
    1bc6:	90 95       	com	r25
    1bc8:	9b 01       	movw	r18, r22
    1bca:	ac 01       	movw	r20, r24
    1bcc:	bd 01       	movw	r22, r26
    1bce:	cf 01       	movw	r24, r30
    1bd0:	08 95       	ret

00001bd2 <_exit>:
    1bd2:	f8 94       	cli

00001bd4 <__stop_program>:
    1bd4:	ff cf       	rjmp	.-2      	; 0x1bd4 <__stop_program>
